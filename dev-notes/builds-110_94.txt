builds-110_94.txt

Record of builds from source of 110.94
--------------------------------------

MacOS

1. MacOS 10.14.6 (iMac late 2015)
   a. ARCH=x86 (32-bit)
      OPSYS=darwin (18.7.0)
      Xcode 11.2, with macOSX10.13.sdk added in
        Xcode/Contents/Developer/Platforms/MacOSX/Developer/SDKs
      command: config/install.sh
   b. ARCH=amd64 (64-bit)
      OPSYS=darwin (18.7.0)
      Xcode 11.2, with only default macOSX10.15.sdk
      command: config/install.sh -default 64

2. MacOS 10.15.1 (MacBook Pro, late 2013)
   ARCH=amd64
   OPSYS=darwin (19.0.0)
   Xcode 11.2, with only default macOSX10.15.sdk
   64-bit: config/install.sh -default 64


Linux

1 Ubuntu 18.04.3 LTS (64 bit); generic 2016 PC build, 4GHz Core i7 proceesor
  a. ARCH=x86 (32 bit)
     OPSYS=linux
     (see below for 32-bit support packages installed)
     command: config/install.sh
  b. ARCH=amd64 (64 bit)
     OPSYS=linux
     command: config/install.sh -default 64
     
Note: For the 32-bit build, first followed instructions for
"recent version [sic] of Ubuntu" in dist/working/110.94/INSTALL:

      dpkg --add-architecture i386
      apt-get update
      apt-get install libc6:i386
  
but this was not sufficient to compile the runtime, so needed
to add:

      apt-get install gcc-multilib
      apt-get install g++-multilib

after which runtime compiled successfully. So I don't know if
libc6:i386 was actually necessary.

64-bit compile was in the same environment, with these 32-bit
packages installed, so haven't tested 64-bit build without
these packages. Could uninstall them and test the 64-bit build
again.

QUESTION: On all recent (64 bit) Linux systems with basic
tool chain (gcc, etc.) installed, does the 64 bit build succeed
without needing additional 32-bit support packages?

INSTALL needs to be updated. Also, it should be formated as
HTML since plain text is mangled by Microsoft Edge.


Windows 10 (64 bit, Version 1903)

Note: There are three different files with instructions on
building/installing SML/NJ under Windows (not Cygwin):

a. dev-notes/windows10-installer.txt
b. dist/working/110.94/WININSTALL.html
c. http://www.smlnj.org/local/build-release.html

The first two are neither correct not up-to-date.  For instance,
the file base/runtime/c-lib/win32/win32-debug.c mentioned in
windows10-installer.txt does not exist.

The third set of instructions (c) works with Windows 10 and
Visual Studio Community 2019 (which set of packages?).  These
instructions use a mixture of Cygwin and Visual Studio steps,
with Cygwin being used to download and set up the necessary
files, with the actual build being done in the Visual Studio
Developer Command Prompt.

1. Visual Studio Community 2019, Version 16.3.7
   32-bit Cygwin [with which packages loaded?]
   Following instructions (c).
   Note: step (9), disabling asdl, was verified to be necessary.

2. Cygwin (32-bit)
   Plain Cygwin build using config/install.sh fails at the end of compiling the runtime:

gcc -std=gnu99 -o run.x86-cygwin -O2  main.o c-libraries.o unix-raise-syserr.o ml-options.o boot.o load-ml.o run-ml.o globals.o ml-state.o error.o timers.o unix-timers.o qualify-name.o swap-bytes.o unix-fault.o signal-util.o unix-signal.o unix-prof.o prim.o   ../c-libs/posix-os/libposix-os.a ../c-libs/smlnj-runtime/libsmlnj-runt.a ../c-libs/smlnj-signals/libsmlnj-sig.a ../c-libs/smlnj-prof/libsmlnj-prof.a ../c-libs/smlnj-sockets/libsmlnj-sock.a ../c-libs/smlnj-time/libsmlnj-time.a ../c-libs/smlnj-date/libsmlnj-date.a ../c-libs/smlnj-math/libsmlnj-math.a ../c-libs/posix-process/libposix-process.a ../c-libs/posix-procenv/libposix-procenv.a ../c-libs/posix-filesys/libposix-filesys.a ../c-libs/posix-io/libposix-io.a ../c-libs/posix-sysdb/libposix-sysdb.a ../c-libs/posix-signal/libposix-signal.a ../c-libs/posix-tty/libposix-tty.a ../c-libs/posix-error/libposix-error.a ../gc/libgc.a ../memory/libmem.a ../c-libs/dl/libunix-dynload.a -lws2_32 -Wl,--export-all cygwin.def -lm
/usr/lib/gcc/i686-pc-cygwin/7.4.0/../../../../i686-pc-cygwin/bin/ld: Cannot export _ml_Date_asctime: symbol not defined
/usr/lib/gcc/i686-pc-cygwin/7.4.0/../../../../i686-pc-cygwin/bin/ld: Cannot export machine_id: symbol not defined
/usr/lib/gcc/i686-pc-cygwin/7.4.0/../../../../i686-pc-cygwin/bin/ld: Cannot export set_request: symbol not defined
collect2: error: ld returned 1 exit status
make[1]: *** [makefile:116: run.x86-cygwin] Error 1
make[1]: Leaving directory '/home/Dave/sml/Dev/test/base/runtime/objs'
make: *** [mk.x86-cygwin:22: all] Error 2
config/install.sh: !!! Run-time system build failed for some reason.

There are 3 "Cannot export" error messages for 3 symbols that are not
defined: _ml_Date_asctime, machine_id, and set_request.  Could not
find these symbols by grepping the runtime source code. Do they come
from some missing libraries?


Cygwin32 packages installed were:

binutils
curl
gcc-core
gcc-debuginfo
gcc-g++
gcc-tools-epoch2-autoconf
gcc-tools-epoch2-automake
gccmakedep
make
make-debuginfo
makedepend
makedepend-debuginfo
subversion
subversion-debuginfo
subversion-devel
subversion--tools
wget
