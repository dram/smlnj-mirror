val it = () : unit
val it = () : unit
val check' = fn : (unit -> bool) -> string
val checkres1 = fn : ('a -> ''b) -> ('a * ''b) list -> string
val checkres2 = fn : ('a -> 'b -> ''c) -> ('a * 'b * ''c) list -> string
t018.sml:18.1-19.28 Warning: match nonexhaustive
          (nil,nil) => ...
          (x :: xr,y :: yr) => ...
  
val f1 = fn : 'a list * 'b list -> int
t018.sml:21.27-22.30 Warning: match nonexhaustive
          (nil,nil) => ...
          (x :: xr,y :: yr) => ...
  
val f1c = fn : 'a list -> 'b list -> int
val test1a = "OK" : string
val test1b = "OK" : string
val test1c = "OK" : string
val test2a = "OK" : string
val test2b = "OK" : string
val test2c = "OK" : string
datatype 'a t = Uniq of 'a
val fc1 = fn : string t -> string
val test5 = "OK" : string
val berry = fn : bool * bool * bool -> int
val testberry = "OK" : string
t018.sml:66.1-70.31 Warning: match nonexhaustive
          (A,B,C nil) => ...
          (A,B,C (1 :: nil)) => ...
          (B,B,_) => ...
          (A,A,A) => ...
          (C nil,A,A) => ...
  
datatype t = A | B | C of int list
val fcon = fn : t * t * t -> int
val test6a = "OK" : string
val test6b = "OK" : string
val test6c = "OK" : string
val test6d = "OK" : string
t018.sml:92.1-96.18 Warning: match redundant and nonexhaustive
          101 => ...
          102 => ...
    -->   101 => ...
          104 => ...
          ~101 => ...
  
val fi = fn : int -> int
val test10a = "OK" : string
t018.sml:103.1-106.22 Warning: match redundant and nonexhaustive
          "first" => ...
          "second" => ...
    -->   "first" => ...
          "fourth" => ...
  
val test10b = "OK" : string
val test10c = "OK" : string
val test10d = "OK" : string
val fs = fn : string -> int
val test11a = "OK" : string
t018.sml:112.1-115.18 Warning: match redundant and nonexhaustive
          #"A" => ...
          #"B" => ...
    -->   #"A" => ...
          #"D" => ...
  
val test11b = "OK" : string
val test11c = "OK" : string
val fc = fn : char -> int
val test12a = "OK" : string
t018.sml:123.1-126.20 Warning: match redundant and nonexhaustive
          257 => ...
          258 => ...
    -->   257 => ...
          260 => ...
  
val test12b = "OK" : string
val test12c = "OK" : string
val test12d = "OK" : string
val test12e = "OK" : string
val fw = fn : word -> int
val test13a = "OK" : string
t018.sml:136.1-137.20 Warning: match redundant
          () => ...
    -->   x => ...
  
val test13b = "OK" : string
val test13c = "OK" : string
val test13d = "OK" : string
val funit1 = fn : unit -> int
t018.sml:139.1-140.20 Warning: match redundant
          () => ...
    -->   x => ...
  
val funit2 = fn : unit -> int
val test20 = "OK" : string
val test21 = "OK" : string
t018.sml:148.1-156.42 Warning: match nonexhaustive
          #[true,false,_] => ...
          #[false,_,true] => ...
          #[_,true,false] => ...
          #[false,false,false] => ...
          #[] => ...
          #[true] => ...
          #[true,true] => ...
          #[true,true,true,true] => ...
          #[true,true,true] => ...
  
val berryvec = fn : bool vector -> int
val testberryvec = "OK" : string
t018.sml:172.1-173.25 Warning: match redundant
          ref () => ...
    -->   ref x => ...
  
val fref1 = fn : unit ref -> int
val test30 = "OK" : string
val fref2 = fn : int list ref -> int
val test31 = "OK" : string
val dynExcon = A(-) : exn
exception A
exception C
exception D
exception B = A
t018.sml:199.1-202.16 Warning: match redundant and nonexhaustive
          A => ...
          B => ...
    -->   A => ...
          C => ...
  
val fexc1 = fn : exn -> int
val test40a = "OK" : string
val test40b = "OK" : string
val test40c = "OK" : string
val test40d = "OK" : string
val test40e = "OK" : string
exception I of int
exception R of real
exception Z = I
t018.sml:225.2-228.18 Warning: match redundant and nonexhaustive
          A => ...
          B => ...
    -->   A => ...
          C => ...
  
val enclose42 = fn : unit -> string list
val test42 = ["OK","OK","OK","OK","OK"] : string list
t018.sml:247.9-247.21 Warning: binding not exhaustive
          x :: nil = ...
val fbind = fn : 'a list -> 'a
val test50a = "OK" : string
val test50b = "OK" : string
val test50c = "OK" : string
val esc = fn : string -> int
val test60a = "OK" : string
val irr1 = fn : unit * int -> int
val irr2 = fn : 'a vector * int -> int
val irr3 = fn : 'a * int -> int
val test70 = true : bool

