Structure absyn and its simplication
====================================

Elaborator/elaborate/elabmod.sml

1. Elaborating a base structure expression of form "struct <decl> end"
(BaseStr case of elabStr/elab:)

1.1 elaborate the body declarations <decl>

    absDecl = declaration absyn for the structure body <decl>

    env' = corresponding incremental static environment for body

1.2. extractSig used to extract an inferred signature for the structure

    elements = signature elements with their specs

    locations : binding list = 
      a list of Bindings for value components exported by the
      inferred signature.  access values for these compents are the
      essential information.  These will be used in a structur
      record expression to build the dynamic structure record value.
      These locations also provide information about any primitive
      value components.
      
1.3. the structure type info is encoded in 

    resStr : Structure (STR) =
      STR{
        sign = ...
	rlzn = ...
	access = dacc
	prim = ?}

This STR record needs an access value (dacc) which, however, is not
really relevant to a structure "expression".

This use of STR to express the static type info for a structure
expression is not really appropriate, since STR is analagous to 
the VALvar construct representing a variable binding, and hence
is properly used to describe a structure variable binding.  Here
we have no such structure variable or binding.  (We can call the
sign, rlzn, prim components of the STR the structure "type" for
short.)
      
1.4. The absyn created for the structure is a single structure
declaration STRdec([STRB{ ...}])):

    resDec = STRdec [STRB{
    	     	      name = tempStrId   ("tempStr", defined in specialsyms.sml)
		      str = resStr       (the structure type, but also
    	     	                          providing and access dacc for the str binding)
		      def = LETstr (absDecl, STRstr(locations))}
                    ]

So the structure expression "struct <decl> end" is translated into 
a structure declaration as though it had been written 

    structure tempStrId = 
       let <decl>
        in {locations}  (structure record construction)
       end

2. elaborating the simple structure declaration (elabStrbs/loop, case strb::rest, line 1197)

   "structure A = struct <decl> end"


    bindStr = clone of resStr above with new access (= access2)

    sb = STRB{
           name = "A"
	   str = bindStr
	   def = LETstr(resDec, VARstr(resStr))

Here resStr in the LETstr body contains the access dacc referring to
the binding of tempStrId in resDec.


Simplified version:

Translate a BastStr structure expression like: struct decl end

directly to a modified version of a STRstr:

STRstr{
  body = decl,
  sign = sign,
  rlzn = rlzn,
  locations = locations}

or, combining sign and rlzn into a "structure type",

resStr' =
STRstr{
  body = decl,
  strtyp = {sign = sign,rlzn = rlzn},
  locations = locations}

sb = STRB{name = "A",
          str = STRvar{strtyp, access, path}
          def = resStr'}

