(* t6.sml  -- based on yacc.grm.sml *)
(* 1st 2 (+1) rules of t4.sml, 4 sv constructors. ruleCounts: [1,5,10] *)
(* dropped C0 constant constructor, which does not occur *)

structure T6 =
struct

  datatype sv
     = C1 of unit  (* C14 *)
     | C2 of unit  (* C19 *)
     | C3 of unit  (* C6 *)
     | C4 of unit  (* C20 *)

  type spp = sv * int * int
  type stack = spp list

fun actions (state: int, stack: stack): int =
case (state,stack)

of (0, (C1 x0a, _, r0) ::
       _ ::
       (C2 x0b, _, _) ::
       (C3 x0c, l0, _) ::
       rest) =>
       0

 | (1, (C4 x1a, l1a, r1) ::
       (C2 x1b, l1b, _) ::
       rest) =>
       1

 | _ => 2

end (* structure *)

--------------------------------------------------------------------------------
- use "t6.sml";
transVB:pat = ittransVB:exp = use "t6.sml"
[opening t6.sml]
>> matchComp
<< makeAndor
andor:
<> AND 2 {0} {}
   <0> VARS 0 (state,0) {0}
   <1> VARS 1 (stack,0) {0}
>> decisionTree: andor ID = 2, numRules = 1
** decisionTree: intialOrNodes = []
>> makeDecisionTree: survivors = [0]; orNodes = []
<< incrementRuleCount: 0 to 1
<< makeDecisionTree: NO relevant
<< decisionTree: ruleCounts = [1]
  Total Choice Nodes = 0, Max Use Count = (~1, 0)
<< decisionTree
dectree:
DLEAF 0
>> genMatch
** genMatch: ruleCounts: [1], length rules: 1
multirules = []
>> genNode:AND: 2, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:VARS: 1, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: stack[lv2] @ 0 --> <1>[lv18]
>> genNode:VARS: 0, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: state[lv3] @ 0 --> <0>[lv19]
>> bindSVars
>> lookVar: stack[lv2] @ 0 --> <1>[lv18]
>> lookVar: state[lv3] @ 0 --> <0>[lv19]
** bindSvars: venv = stack[lv2]-><1>[lv18], state[lv3]-><0>[lv19]
<< bindSvars
>> transExp: CASEexp
>> matchComp
>> addBind: id = 4; |bind| = 1
>> addBind: id = 5; |bind| = 1
>> addBind: id = 32; |bind| = 1
>> addBind: id = 9; |bind| = 1
>> addBind: id = 26; |bind| = 1
<< makeAndor
andor:
<> AND 26 {0,1} {2}
   <0> OR 0 {0,1} {2}
      I0 LEAF {0} {2}
      I1 LEAF {1} {2}
   <1> OR 1 {0,1} {2}
      ::
      <1.::> AND 25 {0,1} {2}
         <1.::.0> AND 6 {0,1} {2}
            <1.::.0.0> OR 2 {0,1} {2}
               C1 <1.::.0.0.C1> VARS 3 (x0a,0) {0,2}
               C4 <1.::.0.0.C4> VARS 27 (x1a,1) {1,2}
            <1.::.0.1> VARS 4 (%WILD%,0) (l1a,1) {0,1,2}
            <1.::.0.2> VARS 5 (r0,0) (r1,1) {0,1,2}
         <1.::.1> OR 7 {0,1} {2}
            ::
            <1.::.1.::> AND 24 {0,1} {2}
               <1.::.1.::.0> AND 32 {1} {0,2}
                  <1.::.1.::.0.0> OR 28 {1} {0,2}
                     C2 <1.::.1.::.0.0.C2> VARS 29 (x1b,1) {0,1,2}
                  <1.::.1.::.0.1> VARS 30 (l1b,1) {0,1,2}
                  <1.::.1.::.0.2> VARS 31 (%WILD%,1) {0,1,2}
               <1.::.1.::.1> OR 9 {0} {1,2}
                  ::
                  <1.::.1.::.1.::> AND 23 {0} {1,2}
                     <1.::.1.::.1.::.0> AND 14 {0} {1,2}
                        <1.::.1.::.1.::.0.0> OR 10 {0} {1,2}
                           C2 <1.::.1.::.1.::.0.0.C2> VARS 11 (x0b,0) {0,1,2}
                        <1.::.1.::.1.::.0.1> VARS 12 (%WILD%,0) {0,1,2}
                        <1.::.1.::.1.::.0.2> VARS 13 (%WILD%,0) {0,1,2}
                     <1.::.1.::.1.::.1> OR 15 {0} {1,2}
                        ::
                        <1.::.1.::.1.::.1.::> AND 22 {0} {1,2}
                           <1.::.1.::.1.::.1.::.0> AND 20 {0} {1,2}
                              <1.::.1.::.1.::.1.::.0.0> OR 16 {0} {1,2}
                                 C3
                                 <1.::.1.::.1.::.1.::.0.0.C3> VARS 17 (x0c,0) {0,1,2}
                              <1.::.1.::.1.::.1.::.0.1> VARS 18 (l0,0) {0,1,2}
                              <1.::.1.::.1.::.1.::.0.2> VARS 19 (%WILD%,0) {0,1,2}
                           <1.::.1.::.1.::.1.::.1> VARS 21 (rest,0) {0,1,2}
>> decisionTree: andor ID = 26, numRules = 3
** decisionTree: intialOrNodes = [1,0]
>> makeDecisionTree: survivors = [0,1,2]; orNodes = [1,0]
** makeDecisionTree[SOME(OR)]: best relevant = 1
** andorToDecTree: id = 25
  path = <1.::>
  live = [0,1,2]
  variantSurvivors = [0,1,2]
  variantCandidates = [7,0,2]
>> makeDecisionTree: survivors = [0,1,2]; orNodes = [7,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 7
** andorToDecTree: id = 24
  path = <1.::.1.::>
  live = [0,1,2]
  variantSurvivors = [0,1,2]
  variantCandidates = [9,28,0,2]
>> makeDecisionTree: survivors = [0,1,2]; orNodes = [9,28,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 9
** andorToDecTree: id = 23
  path = <1.::.1.::.1.::>
  live = [0,1,2]
  variantSurvivors = [0,1,2]
  variantCandidates = [15,28,10,0,2]
>> makeDecisionTree: survivors = [0,1,2]; orNodes = [15,28,10,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 15
** andorToDecTree: id = 22
  path = <1.::.1.::.1.::.1.::>
  live = [0,1,2]
  variantSurvivors = [0,1,2]
  variantCandidates = [16,28,10,0,2]
>> makeDecisionTree: survivors = [0,1,2]; orNodes = [16,28,10,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 16
** andorToDecTree: id = 17
  path = <1.::.1.::.1.::.1.::.0.0.C3>
  live = [0,1,2]
  variantSurvivors = [0,1,2]
  variantCandidates = [28,10,0,2]
>> makeDecisionTree: survivors = [0,1,2]; orNodes = [28,10,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 10
** andorToDecTree: id = 11
  path = <1.::.1.::.1.::.0.0.C2>
  live = [0,1,2]
  variantSurvivors = [0,1,2]
  variantCandidates = [28,0,2]
>> makeDecisionTree: survivors = [0,1,2]; orNodes = [28,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 0
** andorToDecTree: id = ~1
  path = <0.I0>
  live = [0,2]
  variantSurvivors = [0,2]
  variantCandidates = [28,2]
>> makeDecisionTree: survivors = [0,2]; orNodes = [28,2]
** makeDecisionTree[SOME(OR)]: best relevant = 2
** andorToDecTree: id = 3
  path = <1.::.0.0.C1>
  live = [0,2]
  variantSurvivors = [0,2]
  variantCandidates = [28]
>> makeDecisionTree: survivors = [0,2]; orNodes = [28]
<< incrementRuleCount: 0 to 1
<< makeDecisionTree: NO relevant
** andorToDecTree: id = 27
  path = <1.::.0.0.C4>
  live = [1,2]
  variantSurvivors = [2]
  variantCandidates = [28]
>> makeDecisionTree: survivors = [2]; orNodes = [28]
<< incrementRuleCount: 2 to 1
<< makeDecisionTree: NO relevant
defaultOp: id = 2, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [28]
<< incrementRuleCount: 2 to 2
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 2 relevant
** andorToDecTree: id = ~1
  path = <0.I1>
  live = [1,2]
  variantSurvivors = [1,2]
  variantCandidates = [28,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [28,2]
** makeDecisionTree[SOME(OR)]: best relevant = 28
** andorToDecTree: id = 29
  path = <1.::.1.::.0.0.C2>
  live = [0,1,2]
  variantSurvivors = [1,2]
  variantCandidates = [2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [2]
<< incrementRuleCount: 1 to 1
<< makeDecisionTree: NO relevant
defaultOp: id = 28, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [2]
<< incrementRuleCount: 2 to 3
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 28 relevant
defaultOp: id = 0, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [28,2]
<< incrementRuleCount: 2 to 4
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 0 relevant
defaultOp: id = 10, defaultSurvivors = [1,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [28,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 28
** andorToDecTree: id = 29
  path = <1.::.1.::.0.0.C2>
  live = [0,1,2]
  variantSurvivors = [1,2]
  variantCandidates = [0,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [0,2]
<< incrementRuleCount: 1 to 2
<< makeDecisionTree: NO relevant
defaultOp: id = 28, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [0,2]
<< incrementRuleCount: 2 to 5
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 28 relevant
<< makeDecisionTree: 10 relevant
defaultOp: id = 16, defaultSurvivors = [1,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [28,10,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 28
** andorToDecTree: id = 29
  path = <1.::.1.::.0.0.C2>
  live = [0,1,2]
  variantSurvivors = [1,2]
  variantCandidates = [10,0,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [10,0,2]
<< incrementRuleCount: 1 to 3
<< makeDecisionTree: NO relevant
defaultOp: id = 28, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [10,0,2]
<< incrementRuleCount: 2 to 6
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 28 relevant
<< makeDecisionTree: 16 relevant
defaultOp: id = 15, defaultSurvivors = [1,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [28,10,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 28
** andorToDecTree: id = 29
  path = <1.::.1.::.0.0.C2>
  live = [0,1,2]
  variantSurvivors = [1,2]
  variantCandidates = [10,0,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [10,0,2]
<< incrementRuleCount: 1 to 4
<< makeDecisionTree: NO relevant
defaultOp: id = 28, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [10,0,2]
<< incrementRuleCount: 2 to 7
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 28 relevant
<< makeDecisionTree: 15 relevant
defaultOp: id = 9, defaultSurvivors = [1,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [28,0,2]
** makeDecisionTree[SOME(OR)]: best relevant = 28
** andorToDecTree: id = 29
  path = <1.::.1.::.0.0.C2>
  live = [0,1,2]
  variantSurvivors = [1,2]
  variantCandidates = [0,2]
>> makeDecisionTree: survivors = [1,2]; orNodes = [0,2]
<< incrementRuleCount: 1 to 5
<< makeDecisionTree: NO relevant
defaultOp: id = 28, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [0,2]
<< incrementRuleCount: 2 to 8
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 28 relevant
<< makeDecisionTree: 9 relevant
defaultOp: id = 7, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [0,2]
<< incrementRuleCount: 2 to 9
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 7 relevant
defaultOp: id = 1, defaultSurvivors = [2]
>> makeDecisionTree: survivors = [2]; orNodes = [0]
<< incrementRuleCount: 2 to 10
<< makeDecisionTree: NO relevant
<< makeDecisionTree: 1 relevant
<< decisionTree: ruleCounts = [1,5,10]
  Total Choice Nodes = 13, Max Use Count = (28, 5)
<< decisionTree
dectree:
CHOICE 1 <1>
   :: CHOICE 7 <1.::.1>
      :: CHOICE 9 <1.::.1.::.1>
         :: CHOICE 15 <1.::.1.::.1.::.1>
            :: CHOICE 16 <1.::.1.::.1.::.1.::.0.0>
               C3 CHOICE 10 <1.::.1.::.1.::.0.0>
                  C2 CHOICE 0 <0>
                     I0 CHOICE 2 <1.::.0.0>
                        C1 DLEAF 0
                        C4 DLEAF 2
                        * DLEAF 2
                     I1 CHOICE 28 <1.::.1.::.0.0>
                        C2 DLEAF 1
                        * DLEAF 2
                     * DLEAF 2
                  * CHOICE 28 <1.::.1.::.0.0>
                     C2 DLEAF 1
                     * DLEAF 2
               * CHOICE 28 <1.::.1.::.0.0>
                  C2 DLEAF 1
                  * DLEAF 2
            * CHOICE 28 <1.::.1.::.0.0>
               C2 DLEAF 1
               * DLEAF 2
         * CHOICE 28 <1.::.1.::.0.0>
            C2 DLEAF 1
            * DLEAF 2
      * DLEAF 2
   * DLEAF 2
>> genMatch
** genMatch: ruleCounts: [1,5,10], length rules: 3
multirules = [1,2]
>> genNode:AND: 26, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
>> genNode:OR: 1, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:OR: 0, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:AND: 25, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:OR: 7, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:AND: 6, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:VARS: 5, 2
>> bindPatVars: |vars| = 2, |asvars| = 0
VarEnvMC.bindVar: r0[lv14] @ 0 --> <1.::.0.2>[lv36]
VarEnvMC.bindVar: r1[lv7] @ 1 --> <1.::.0.2>[lv36]
>> genNode:VARS: 4, 2
>> bindPatVars: |vars| = 2, |asvars| = 0
VarEnvMC.bindVar: l1a[lv8] @ 1 --> <1.::.0.1>[lv37]
>> genNode:OR: 2, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:AND: 24, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:OR: 9, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: rest[lv4] @ 1 --> <1.::.1.::.1>[lv40]
>> genNode:AND: 32, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
>> genNode:VARS: 31, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
>> genNode:VARS: 30, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: l1b[lv5] @ 1 --> <1.::.1.::.0.1>[lv43]
>> genNode:OR: 28, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:AND: 23, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:OR: 15, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:AND: 14, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:VARS: 13, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
>> genNode:VARS: 12, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
>> genNode:OR: 10, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:AND: 22, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:VARS: 21, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: rest[lv10] @ 0 --> <1.::.1.::.1.::.1.::.1>[lv52]
>> genNode:AND: 20, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:VARS: 19, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
>> genNode:VARS: 18, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: l0[lv11] @ 0 --> <1.::.1.::.1.::.1.::.0.1>[lv55]
>> genNode:OR: 16, 0
>> bindPatVars: |vars| = 0, |asvars| = 0
>> genNode:VARS: 17, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: x0c[lv12] @ 0 --> <1.::.1.::.1.::.1.::.0.0.C3>[lv57]
>> genNode:VARS: 11, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: x0b[lv13] @ 0 --> <1.::.1.::.1.::.0.0.C2>[lv58]
>> genNode:VARS: 3, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: x0a[lv15] @ 0 --> <1.::.0.0.C1>[lv59]
>> bindSVars
>> lookVar: rest[lv10] @ 0 --> <1.::.1.::.1.::.1.::.1>[lv52]
>> lookVar: l0[lv11] @ 0 --> <1.::.1.::.1.::.1.::.0.1>[lv55]
>> lookVar: x0c[lv12] @ 0 --> <1.::.1.::.1.::.1.::.0.0.C3>[lv57]
>> lookVar: x0b[lv13] @ 0 --> <1.::.1.::.1.::.0.0.C2>[lv58]
>> lookVar: r0[lv14] @ 0 --> <1.::.0.2>[lv36]
>> lookVar: x0a[lv15] @ 0 --> <1.::.0.0.C1>[lv59]
** bindSvars: venv = rest[lv10]-><1.::.1.::.1.::.1.::.1>[lv52], l0[lv11]-><1.::.1.::.1.::.1.::.0.1>[lv55], x0c[lv12]-><1.::.1.::.1.::.1.::.0.0.C3>[lv57], x0b[lv13]-><1.::.1.::.1.::.0.0.C2>[lv58], r0[lv14]-><1.::.0.2>[lv36], x0a[lv15]-><1.::.0.0.C1>[lv59]
<< bindSvars
>> genNode:VARS: 27, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: x1a[lv9] @ 1 --> <1.::.0.0.C4>[lv60]
>> bindSVars
** bindSvars: venv = 
<< bindSvars
>> bindSVars
** bindSvars: venv = 
<< bindSvars
>> genNode:VARS: 29, 1
>> bindPatVars: |vars| = 1, |asvars| = 0
VarEnvMC.bindVar: x1b[lv6] @ 1 --> <1.::.1.::.0.0.C2>[lv61]
>> bindSVars
>> lookVar: rest[lv4] @ 1 --> <1.::.1.::.1>[lv40]
>> lookVar: l1b[lv5] @ 1 --> <1.::.1.::.0.1>[lv43]
>> lookVar: x1b[lv6] @ 1 --> <1.::.1.::.0.0.C2>[lv61]
>> lookVar: r1[lv7] @ 1 --> <1.::.0.2>[lv36]
>> lookVar: l1a[lv8] @ 1 --> <1.::.0.1>[lv37]
Error: Compiler bug: VarEnvMC: lookVar: unbound pattern var: x1a[lv9]
