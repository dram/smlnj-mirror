(* sml-basis.sml *)

(* Interface to runtime c code. SML stubs (generated by IDL tool?) *)

structure SMLBasis : SML_BASIS =
struct

(* /******************** Useful IDL types ********************/ *)
type idl_string = String.string

(* /******************** Common SML types ********************/ *)
type ML_word8vec_t = Word8Vector.vector
type ML_word8arr_t = Word8Array.array
type ML_charvec_t = CharVector.vector
type ML_chararr_t = CharArray.array
type ML_unit_t = unit
type ML_string_t = string
type ML_string_opt_t = string option
type ML_polldesc_list_t = poll_desc list
type ML_pollinfo_list_t = poll_info list

(* /******************** Exported run-time system types ********************/ *)
type IODesc_t = pointer
type Directory_t = pointer
type Time_t = {sec:Int32.int,usec:Int32.int}

(* /******************** Types for argument passing ********************/ *)
(* dbm: added missing tm_mon *)
type Date_t = {tm_sec:Int32.int,tm_min:Int32.int,tm_hour:Int32.int,tm_mday:Int32.int,tm_mon:Int32.int,tm_year:Int32.int,tm_wday:Int32.int,tm_yday:Int32.int,tm_isdst:Int32.int}

(* dummy function implementation *)
fun dummy _ = raise Fail "dummy"

(* /******************** IEEEReal support ********************/ *)
(* Where used: ieee-real.sml *)
val TO_NEAREST : Int32.int = 0
val TO_NEGINF : Int32.int = 0 
val TO_POSINF : Int32.int = 0
val TO_ZERO : Int32.int = 0
val getRoundingMode : unit -> Int32.int = dummy
val setRoundingMode : Int32.int -> unit = dummy

(* /******************** OSBinPrimIO and OSTextPrimIO support *************/ *)
(* Where used: OS/os-bin-prim-io.sml, OS/os-text-prim-io.sml
   These are OS generic versions replacing Unix/posix-{bin,text}-prim-io.sml
   and Win32/win32-{bin,text}-prim-io.sml *)
val openFile : (ML_string_t * Int32.int) -> IODesc_t = dummy
val closeFile : IODesc_t -> unit = dummy
val readTextVec : (IODesc_t * Int32.int) -> ML_charvec_t = dummy
val writeTextVec : (IODesc_t * ML_charvec_t * Int32.int * Int32.int) -> Int32.int = dummy
val readBinVec : (IODesc_t * Int32.int) -> ML_word8vec_t = dummy
val writeBinVec : (IODesc_t * ML_word8vec_t * Int32.int * Int32.int) -> Int32.int = dummy
    (* was writeBin *)
val readTextArr : (IODesc_t * Int32.int) -> ML_chararr_t = dummy
val writeTextArr : (IODesc_t * ML_chararr_t * Int32.int * Int32.int) -> Int32.int = dummy
val readBinArr : (IODesc_t * Int32.int) -> ML_word8arr_t = dummy
val writeBinArr : (IODesc_t * ML_word8arr_t * Int32.int * Int32.int) -> Int32.int = dummy
val IOD_KIND_FILE : Int32.int = 0
val IOD_KIND_DIR : Int32.int = 0
val IOD_KIND_SYMLINK : Int32.int = 0
val IOD_KIND_TTY : Int32.int = 0
val IOD_KIND_PIPE : Int32.int = 0
val IOD_KIND_SOCKET : Int32.int = 0
val IOD_KIND_DEVICE : Int32.int = 0
val ioDescKind : IODesc_t -> Int32.int = dummy
val seek : (IODesc_t * Int32.int) -> Int32.int = dummy
val seekCur : (IODesc_t) -> Int32.int = dummy  (* maybe seek, seekCur should be combined *)
val nonBlockingSupported : bool = true
val blockingOn : IODesc_t -> ML_Unit_t = dummy
val blockingOff: IODesc_t -> ML_Unit_t = dummy
val updateStatus : IODesc_t * ML_bool_t * ML_bool_t -> ML_unit_t = dummy
val createFile : ML_string_t * ML_bool_t -> IODesc_t = dummy
(* missing: readTextArr, writeTextArr, readBinArr, writeBinArr, seek, seekCur,
 *   nonBlockingSupported, blockingOn, blockingOff, updateStatus, createFile *)

(* /******************** TextIO support ********************/ *)
(* Where used: OS/os-test-prim-io.sml *)
   
val getStdIn : unit -> IODesc_t = dummy
val getStdOut : unit -> IODesc_t = dummy
val getStdErr : unit -> IODesc_t = dummy

(* /******************** OSImp, OS.Process support ********************/ *)
(* Where used: Unix/os.sml?
               Win32/os.sml?
               Unix/os-process.sml?
               Win32/win32-process.sml?
   wait for generic OS support? *)
val errorName : Int32.int -> idl_string = dummy
val errorMessage : Int32.int -> idl_string = dummy
val getEnv : idl_string -> ML_string_opt_t = dummy
val sleep : Time_t -> unit = dummy  (* where used? *)

(* /******************** OS.FileSys support ********************/ *)
(* Where used: OS/os-filesys.sml
   This is a new OS generic FileSys structure, to replace Unix/os-filesys.sml
   and Win32/os-filesys.sml *)
val openDir : idl_string -> Directory_t = dummy
val readDir : Directory_t -> ML_string_opt_t = dummy
val rewindDir : Directory_t -> ML_unit_t = dummy
val closeDir : Directory_t -> ML_unit_t = dummy
val chDir : idl_string -> ML_unit_t = dummy
val getDir : unit -> ML_string_t = dummy
val mkDir : idl_string -> ML_unit_t = dummy   (* needs mode flags parameter? *)
val rmDir : idl_string -> ML_unit_t = dummy
val isDir : idl_string -> Bool.bool = dummy
val isLink : idl_string -> Bool.bool = dummy
val readLink : idl_string -> ML_string_t = dummy
val fullPath : idl_string -> ML_string_t = dummy
val realPath : idl_string -> ML_string_t = dummy
val setTime : (idl_string * Time_t option) -> ML_unit_t = dummy
val remove : idl_string -> ML_unit_t = dummy
val rename : (idl_string * idl_string) -> ML_unit_t = dummy
val A_READ : Int32.int = 0
val A_WRITE : Int32.int = 0
val A_EXEC : Int32.int = 0
val access : (idl_string * Int32.int) -> Bool.bool = dummy
val tmpName : unit -> ML_string_t = dummy
val fileId : idl_string -> ML_word8vec_t = dummy
val fileSize : idl_string -> Int32.int = dummy
val modTime: idl_string -> Time_t = dummy
(* missing: fileSize, modTime *)

(* /******************** OS.IO support ********************/ *)
(* Where used: Unix/os-io.sml? 
               Win32/os-io.sml?
   wait for generic OS support *)
val poll : (ML_polldesc_list_t * Time_t option) -> ML_pollinfo_list_t = dummy

(* /******************** Time support ********************/ *)
(* Where used: ? *)
val now : unit -> Time_t = dummy

(* /******************** Date support ********************/ *)
(* Where used: date.sml *)
val gmTime : Time_t -> Date_t = dummy
val localTime : Time_t -> Date_t = dummy
(* missing: ascTime, mkTime, strfTime *)

(* /******************** Timer support ********************/ *)
(* Where used: internal-timer.sml
   If this is supposed to directly replace 
      CInterface.c_function "SMLNJ-Time" "gettime",
   then it has to provide more results, but probably its return values
   are combined seconds/microseconds *)
val getCPUTime : unit -> (Time_t * Time_t * Time_t) = dummy

end (* structure SMLBasis *)
