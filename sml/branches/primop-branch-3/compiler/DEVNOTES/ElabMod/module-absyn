oAbstract syntax structures for modules
(constructed in elabmod.sml and sigmatch.sml)

Structures

1. Basic (elabStr) (L643)

A basic structure expression

  struct <decls> end 

is translated into a structure _declaration_:

  structure tempStrId = let <decls> in structure<locations> end

where <locations> is a list of bindings returned by extractSig (L657)
applied to the elaborated body decls. The data structure is:

  STRdec [
     STRB{name = tempStrId,
          def = LETstr(absDecl,STRstr(locations)),
	  str = resStr}
  ]

where
 
  absDecl is abstract syntax of body declaration (elabDecl0, L650)
  resStr = STR{sign,rlzn,access,prim} (L669)

where sign and rlzn are constructed from results of extractSig, and
access is a fresh lvar (L684).

The <locations> bindings are the bindings for the identifiers declared
in <decls> that are exported as components of the structure. The only
relevant information in the bindings for translation are the access
fields (for variables, exception constrs, structures and functors).
Type components are not represented in <locations>.  So it mignt be
possible to strip <locations> down to a list of lvars.

The main translation info in the resStr STR is the access.  This
access info probably should be a direct element of the STRB data
structure.  Then the STR would be only a "type" description (sign and
rlzn) for the structure.  This would make structure declarations more
analagous to value variables, where a VALvar contains an access and
a type as separate properties.

2. AppStr(I)
3. VarStr
4. ConstrainedStr
5. LetStr


Structure Declarations (elabStrbs, L1135)

* two entity variables
entv - fresh entitiy variable for current str binding (L1165)
entsv - if no constraint coercion, same as entv, but if there is
        a constraint, this will be the entVar for the intermediate
        raw structure before coercion.

* resStr vs bindStr

There are two levels of bindings

    structure A = strexp

is elaborated into the equivalent of:

    structure A =			  [static defStr = resStr]
       let structure <tempStr> = strexp
	in <tempStr>  (resStr)
       end

represented as:

    STRB{name = A,
	 str = bindStr,
	 def = LETstr(STRB(name = <tempStr>, str = resStr, ...),
		      VARstr resStr)}

where bindStr and resStr are naturally the same, because A and <tempStr>
are essentially the same structure (same static desc), but they will have
to have different access values.

If there is a constraint, as in

    structure A: SIG = strexp

Then the elaboration produces a declaration sequence for the constrained 
rhs definition:

structure A =                             [static bindStr]
  let
    structure <tempStr> = strexp          [static defStr]
    structure <anonStr> =                 [static resStr]
       let <sigmatch coercion decls>
	in STRstr(bindings)
       end
   in <anonStr> (resStr)
  end

represented as:

    STRB{name = A,
	 str = bindStr,
	 def = LETstr(SEQdec[STRB(name = <tempStr>, str = defStr, ...),
	                     STRB(name = <anonStr>, str = resStr, ...)],
		      VARstr resStr)
