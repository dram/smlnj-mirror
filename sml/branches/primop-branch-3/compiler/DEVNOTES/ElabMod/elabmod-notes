New terms:

* primary vs seconday tycons  (should functor elements also be primaries?)
  primaries are atomic (primitive or generative), secondaries are DEFtycs
* volatile vs nonvolatile (stable) tycons (and other entities)

The functor static action can be viewed as mapping parameter primaries
to result primaries -- for tycons.  It also maps functor elements to

----------------------------
Entity variables, paths, environments.  Relativization and epcontext.
As with semantics, can assume all module elaboration is in volatile
mode (as though all top level declarations are actually within a 
virtual top-level functor body). Nonvolatiles are a potential elaboration
optimization, but may not be worth it.

Static environment is then always paired with an entity environment
* static environment bindings can come with entity variables (just like specs)
* tycons can contain their entity paths as a field, so relativization is
  simple -- just map the tycon to its epath field

-------------
Signature elaboration should push struct definitions (direct and where clause)
down to the tycon leaf nodes.  This should not be left to instantiation.

Instantiation needs to be refactored.  One part to determine the equivalence
classes, and the second to build the associated enity environment (realization).
We need to also build ltyEnv for translating functors into FLINT ltys, using
the first (factoring) phase of instantiation.

----------------------------

Types:

ModuleId:  (ElabData/modules/moduleid.sml)
static identifiers (collectively called statIds)
Used for statenv pickle isolation

tycId
  stamp
sigId
  stamp
strId
  { sign: stamp, rlzn: stamp }
fctId
  { paramsig: stamp, bodysig: stamp, rlzn: stamp }
envId
  stamp

tmap -- maps from identifiers to static representations of corresponding entity
  { m_tyc: T.gtrec StampM.map,
    m_sig: M.sigrec StampM.map,
    m_str: M.strEntity StrM.map,
    m_fct: M.fctEntity FctM.map, 
    m_env: M.envrec StampM.map }
'a umap -- generic maps from static identifiers


EntPath (ElabData/modules/entpath.sml)
    entVar   -- entity variable 
      == stamp
    entPath  -- entity path
      == entVar list  ==  stamp list
    rEntPath -- reverse entity path
      == entVar list (reverse order)

EntPathContext: (ElabData/modules/epcontext.sml)
    pathmap -- mapping from statIds to reverse entpaths
      EP.rEntPath MI.umap
    epContext -- "environment" for mapping statIds to relative entity paths
	datatype context
	  = EMPTY
	  | LAYER of {locals: pathmap ref, 
		      lookContext: EP.entPath,
		      bindContext: EP.rEntPath,
		      outer: context}

epContexts maintain a mapping from statIds to reverse entity paths.
It maintains a local pathmap for each closed structure scope (where closed
means a functor body whose entities won't be referenced from outside the scope).
It also maintains an entity path (lookContext) telling the entity path to the
current structure node, and a memoized reverse version of that path in bindContext.

To relativize an entity path to the current structure scope, we remove the longest
common prefix of that path and the current lookContext path.

Question: When is NONE passed to enterOpen? (entsv param of elabStr)
  1. when elaborating the body of a functor with no result signature contraint


ElabStr

Q: How could we have a ConstrainedStr(strexp,constraint) where constraint is NoSig?
A: This should not happen.  ConstrainedStr is constructed in the parser only when
there is a constraint signature.

Q: When is the entVarOp argument of elabStr a SOME ev?
A: List of elabStr calls:

   1. AppStrI(spath,[(arg,b)]) case in elabStr
      elabStr called with (SOME entv) where entv is a fresh entvar.
      the binding entv |-> argEnt is added to argDee to make resDee  ???

   2. ?

============================================================================
Notes from code.
============================================================================
[extractSig.1] Here is an example where the entity path of a tycon element
is a nonsingular path:

functor F(X: sig type t end) =
struct
  open X
end

In this case, the value of epOp will be SOME[ev_X, ev_t].  Longer entity paths
could result from nested structures in the parameter, e.g.

functor F(X: sig structure A : sig type t end end) =
struct
  open X.A
end

would give epOp = SOME[ev_X, ev_A, ev_t].