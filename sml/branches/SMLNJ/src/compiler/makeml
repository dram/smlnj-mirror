#!/bin/ksh
#

FULL=""
ALLOC=1M

ARCH=sparc
OPSYS=solaris
RUN_DIR=../../bin/.run
OBJS_DIR=../runtime/objs
HEAP_IMAGE=""
RUN=""
RUN_ARGS=""
SET_FLAGS=""
REBUILD=""

#
# use the arch-n-opsys script to determine the ARCH/OS if possible
#
if [ -f ../../bin/.arch-n-opsys ]; then
  ARCH_N_OPSYS=`../../bin/.arch-n-opsys`
  if [ "$?" = "0" ]; then
    eval $ARCH_N_OPSYS
  fi
fi

while [ "$#" != "0" ]
do
  arg=$1; shift
  case $arg in
    -full) FULL="@SMLfull" ;;
    -bare) FULL="@SMLbare" ;;
    -rebuild)
      if [ "$#" = "0" ]; then
        echo "makeml: missing argument for \"-rebuild\" option"
	exit 1
      fi
      REBUILD="@SMLrebuild=$1"; shift
    ;;
    -arch)
      if [ "$#" = "0" ]; then
        echo "makeml: missing argument for \"-arch\" option"
	exit 1
      fi
      ARCH=$1; shift
    ;;
    -opsys)
      if [ "$#" = "0" ]; then
        echo "makeml: missing argument for \"-opsys\" option"
	exit 1
      fi
      OPSYS=$1; shift
    ;;
    -o)
      if [ "$#" = "0" ]; then
        echo "makeml: missing argument for \"-o\" option"
	exit 1
      fi
      HEAP_IMAGE=$1; shift
    ;;
    -run)
      if [ "$#" = "0" ]; then
        echo "makeml: missing argument for \"-run\" option"
	exit 1
      fi
      RUN=$1; shift
    ;;
    -alloc)
      if [ "$#" = "0" ]; then
        echo "makeml: missing argument for \"-alloc\" option"
	exit 1
      fi
      ALLOC=$1; shift
    ;;
    -boot)
      if [ "$#" = "0" ]; then
        echo "makeml: missing argument for \"-boot\" option"
	exit 1
      fi
      BOOT_DIR=$1; shift
    ;;
    @SML*)
      RUN_ARGS="$RUN_ARGS $arg"
    ;;
    *) echo "makeml: unknown argument \"$arg\""
       exit 1
    ;;
  esac
done

case $OPSYS in
  solaris) MAKE=/usr/ccs/bin/make ;;
esac

if [ "$RUN" = "" ]; then
  if [ "$OPSYS" = "win32" ]; then
    RUN_CMD="run.$ARCH-$OPSYS.exe"
  else
    RUN_CMD="run.$ARCH-$OPSYS"
  fi
  if [ -x "$RUN_DIR/$RUN_CMD" ]; then
    RUN="$RUN_DIR/$RUN_CMD"
  elif [ -x "$OBJS_DIR/$RUN_CMD" ]; then
    RUN="$OBJS_DIR/$RUN_CMD"
  else
    echo "makeml: unable to find run-time system \"$RUN_CMD\""
    exit 1
  fi
fi

if [ "$HEAP_IMAGE" = "" ]; then
  if [ "$FULL" = "" ]; then
    HEAP_IMAGE="sml"
  else
    HEAP_IMAGE="sml-full"
  fi
fi

if [ "$BOOT_DIR" = "" ]; then
  BOOT_DIR="./bin.$ARCH-unix"
fi

if [ ! -d ./bin.$ARCH-unix ]; then
  ln -s $BOOT_DIR ./bin.$ARCH-unix
fi

#echo "$RUN @SMLboot=$BOOT_DIR @SMLalloc=$ALLOC $RUN_ARGS $FULL -b $BOOT_DIR"
#$RUN @SMLboot=$BOOT_DIR @SMLalloc=$ALLOC $RUN_ARGS $FULL -b $BOOT_DIR <<XXXX
echo "$RUN @SMLboot=$BOOT_DIR @SMLalloc=$ALLOC $RUN_ARGS $FULL $REBUILD"
      $RUN @SMLboot=$BOOT_DIR @SMLalloc=$ALLOC $RUN_ARGS $FULL $REBUILD <<XXXX
$SET_FLAGS
val use = Compiler.Interact.useFile;
val _ = (SMLofNJ.exportML "$HEAP_IMAGE";
	 print Compiler.banner;
         print "\n");
XXXX

if [ -L ./bin.$ARCH-unix ]; then
  rm -f ./bin.$ARCH-unix
fi
