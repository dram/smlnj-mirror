<!-- ord-set.mldoc -->

<!DOCTYPE ML-DOC SYSTEM>

<COPYRIGHT OWNER="AT&AMP;T Bell Laboratories" YEAR=1996>
<VERSION VERID="1.0" YEAR=1996 MONTH=5 DAY=29>
<TITLE>The ORD_SET signature</TITLE>

<SECT>
<HEAD>The <CD/ORD_SET/ signature</HEAD>

<PP>
<!-- Some general introductory text -->

<SIGNATURE SIGID="ORD_SET">
  <SIGBODY SIGID="ORD_SET" FILE=ORD-SET-SIG>
    <SPEC>
      <SUBSTRUCT>Key<ID>ORD_KEY</SUBSTRUCT>
    <SPEC>
      <TYPE><ID>item
    <SPEC>
      <TYPE><ID>set
    <SPEC>
      <VAL>empty<TY>set
        <COMMENT>
          <PROTOTY>
          empty
          </PROTOTY>
          explain the use and semantics of empty HERE.
    <SPEC>
      <VAL>singleton<TY>item -> set
        <COMMENT>
          <PROTOTY>
          singleton <ARG/it/
          </PROTOTY>
          explain the use and semantics of singleton HERE.
    <SPEC>
      <VAL>add<TY>(set * item) -> set
        <COMMENT>
          <PROTOTY>
          add (<ARG/se/, <ARG/it/)
          </PROTOTY>
          explain the use and semantics of add HERE.
    <SPEC>
      <VAL>addList<TY>(set * item list) -> set
        <COMMENT>
          <PROTOTY>
          addList (<ARG/se/, <ARG/l/)
          </PROTOTY>
          explain the use and semantics of addList HERE.
    <SPEC>
      <VAL>delete<TY>(set * item) -> set
        <COMMENT>
          <PROTOTY>
          delete (<ARG/se/, <ARG/it/)
          </PROTOTY>
          explain the use and semantics of delete HERE.
    <SPEC>
      <VAL>member<TY>(set * item) -> bool
        <COMMENT>
          <PROTOTY>
          member (<ARG/se/, <ARG/it/)
          </PROTOTY>
          explain the use and semantics of member HERE.
    <SPEC>
      <VAL>isEmpty<TY>set -> bool
        <COMMENT>
          <PROTOTY>
          isEmpty <ARG/se/
          </PROTOTY>
          explain the use and semantics of isEmpty HERE.
    <SPEC>
      <VAL>equal<TY>(set * set) -> bool
        <COMMENT>
          <PROTOTY>
          equal (<ARG/se/, <ARG/se2/)
          </PROTOTY>
          explain the use and semantics of equal HERE.
    <SPEC>
      <VAL>isSubset<TY>(set * set) -> bool
        <COMMENT>
          <PROTOTY>
          isSubset (<ARG/se/, <ARG/se2/)
          </PROTOTY>
          explain the use and semantics of isSubset HERE.
    <SPEC>
      <VAL>numItems<TY>set -> int
        <COMMENT>
          <PROTOTY>
          numItems <ARG/se/
          </PROTOTY>
          explain the use and semantics of numItems HERE.
    <SPEC>
      <VAL>listItems<TY>set -> item list
        <COMMENT>
          <PROTOTY>
          listItems <ARG/se/
          </PROTOTY>
          explain the use and semantics of listItems HERE.
    <SPEC>
      <VAL>union<TY>(set * set) -> set
        <COMMENT>
          <PROTOTY>
          union (<ARG/se/, <ARG/se2/)
          </PROTOTY>
          explain the use and semantics of union HERE.
    <SPEC>
      <VAL>intersection<TY>(set * set) -> set
        <COMMENT>
          <PROTOTY>
          intersection (<ARG/se/, <ARG/se2/)
          </PROTOTY>
          explain the use and semantics of intersection HERE.
    <SPEC>
      <VAL>difference<TY>(set * set) -> set
        <COMMENT>
          <PROTOTY>
          difference (<ARG/se/, <ARG/se2/)
          </PROTOTY>
          explain the use and semantics of difference HERE.
    <SPEC>
      <VAL>map<TY>(item -> 'b) -> set -> 'b list
        <COMMENT>
          <PROTOTY>
          map <ARG/f/ <ARG/se/
          </PROTOTY>
          explain the use and semantics of map HERE.
    <SPEC>
      <VAL>app<TY>(item -> unit) -> set -> unit
        <COMMENT>
          <PROTOTY>
          app <ARG/f/ <ARG/se/
          </PROTOTY>
          explain the use and semantics of app HERE.
    <SPEC>
      <VAL>foldl<TY>((item * 'b) -> 'b) -> 'b -> set -> 'b
        <COMMENT>
          <PROTOTY>
          foldl <ARG/f/ <ARG/a/ <ARG/se/
          </PROTOTY>
          explain the use and semantics of foldl HERE.
    <SPEC>
      <VAL>foldr<TY>((item * 'b) -> 'b) -> 'b -> set -> 'b
        <COMMENT>
          <PROTOTY>
          foldr <ARG/f/ <ARG/a/ <ARG/se/
          </PROTOTY>
          explain the use and semantics of foldr HERE.
    <SPEC>
      <VAL>filter<TY>(item -> bool) -> set -> set
        <COMMENT>
          <PROTOTY>
          filter <ARG/f/ <ARG/se/
          </PROTOTY>
          explain the use and semantics of filter HERE.
    <SPEC>
      <VAL>exists<TY>(item -> bool) -> set -> bool
        <COMMENT>
          <PROTOTY>
          exists <ARG/f/ <ARG/se/
          </PROTOTY>
          explain the use and semantics of exists HERE.
    <SPEC>
      <VAL>find<TY>(item -> bool) -> set -> item option
        <COMMENT>
          <PROTOTY>
          find <ARG/f/ <ARG/se/
          </PROTOTY>
          explain the use and semantics of find HERE.
  </SIGBODY>
  <SEEALSO>
    <SIGREF/ORD_KEY/ <SIGREF/ORD_MAP/
  </SEEALSO>
</SIGNATURE>
