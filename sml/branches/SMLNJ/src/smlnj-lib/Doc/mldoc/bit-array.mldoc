<!-- bit-array.mldoc -->

<!DOCTYPE ML-DOC SYSTEM>

<COPYRIGHT OWNER="AT&AMP;T Bell Laboratories" YEAR=1996>
<VERSION VERID="1.0" YEAR=1996 MONTH=5 DAY=29>
<TITLE>The BIT_ARRAY signature</TITLE>

<SECT>
<HEAD>The <CD/BIT_ARRAY/ signature</HEAD>

<PP>
<!-- Some general introductory text -->

<SIGNATURE SIGID="BIT_ARRAY">
  <SIGBODY SIGID="BIT_ARRAY" FILE=BIT-ARRAY-SIG>
    <SPEC>
      <INCLUDE>MONO_ARRAY
      <SHARING TYPE>
        elem <EQU> bool
      </SHARING>
    <SPEC>
      <VAL>fromString<TY>string -> array
        <COMMENT>
          <PROTOTY>
          fromString <ARG/s/
          </PROTOTY>
          explain the use and semantics of fromString HERE.
    <SPEC>
      <VAL>bits<TY>(int * int list) -> array
        <COMMENT>
          <PROTOTY>
          bits (<ARG/i/, <ARG/l/)
          </PROTOTY>
          explain the use and semantics of bits HERE.
    <SPEC>
      <VAL>getBits<TY>array -> int list
        <COMMENT>
          <PROTOTY>
          getBits <ARG/arr/
          </PROTOTY>
          explain the use and semantics of getBits HERE.
    <SPEC>
      <VAL>toString<TY>array -> string
        <COMMENT>
          <PROTOTY>
          toString <ARG/arr/
          </PROTOTY>
          explain the use and semantics of toString HERE.
    <SPEC>
      <VAL>isZero<TY>array -> bool
        <COMMENT>
          <PROTOTY>
          isZero <ARG/arr/
          </PROTOTY>
          explain the use and semantics of isZero HERE.
    <SPEC>
      <VAL>extend0<TY>(array * int) -> array
        <COMMENT>
          <PROTOTY>
          extend0 (<ARG/arr/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of extend0 HERE.
    <SPEC>
      <VAL>extend1<TY>(array * int) -> array
        <COMMENT>
          <PROTOTY>
          extend1 (<ARG/arr/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of extend1 HERE.
    <SPEC>
      <VAL>eqBits<TY>(array * array) -> bool
        <COMMENT>
          <PROTOTY>
          eqBits (<ARG/arr/, <ARG/arr2/)
          </PROTOTY>
          explain the use and semantics of eqBits HERE.
    <SPEC>
      <VAL>equal<TY>(array * array) -> bool
        <COMMENT>
          <PROTOTY>
          equal (<ARG/arr/, <ARG/arr2/)
          </PROTOTY>
          explain the use and semantics of equal HERE.
    <SPEC>
      <VAL>andb<TY>(array * array * int) -> array
        <COMMENT>
          <PROTOTY>
          andb (<ARG/arr/, <ARG/arr2/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of andb HERE.
    <SPEC>
      <VAL>orb<TY>(array * array * int) -> array
        <COMMENT>
          <PROTOTY>
          orb (<ARG/arr/, <ARG/arr2/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of orb HERE.
    <SPEC>
      <VAL>xorb<TY>(array * array * int) -> array
        <COMMENT>
          <PROTOTY>
          xorb (<ARG/arr/, <ARG/arr2/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of xorb HERE.
    <SPEC>
      <VAL>notb<TY>array -> array
        <COMMENT>
          <PROTOTY>
          notb <ARG/arr/
          </PROTOTY>
          explain the use and semantics of notb HERE.
    <SPEC>
      <VAL>lshift<TY>(array * int) -> array
        <COMMENT>
          <PROTOTY>
          lshift (<ARG/arr/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of lshift HERE.
    <SPEC>
      <VAL>rshift<TY>(array * int) -> array
        <COMMENT>
          <PROTOTY>
          rshift (<ARG/arr/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of rshift HERE.
    <SPEC>
      <VAL>setBit<TY>(array * int) -> unit
        <COMMENT>
          <PROTOTY>
          setBit (<ARG/arr/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of setBit HERE.
    <SPEC>
      <VAL>clrBit<TY>(array * int) -> unit
        <COMMENT>
          <PROTOTY>
          clrBit (<ARG/arr/, <ARG/i/)
          </PROTOTY>
          explain the use and semantics of clrBit HERE.
    <SPEC>
      <VAL>union<TY>array -> array -> unit
        <COMMENT>
          <PROTOTY>
          union <ARG/arr/ <ARG/arr2/
          </PROTOTY>
          explain the use and semantics of union HERE.
    <SPEC>
      <VAL>intersection<TY>array -> array -> unit
        <COMMENT>
          <PROTOTY>
          intersection <ARG/arr/ <ARG/arr2/
          </PROTOTY>
          explain the use and semantics of intersection HERE.
    <SPEC>
      <VAL>complement<TY>array -> unit
        <COMMENT>
          <PROTOTY>
          complement <ARG/arr/
          </PROTOTY>
          explain the use and semantics of complement HERE.
<!-- optional SEEALSO; uncomment to use     -->
<!-- <SEEALSO>    -->
<!--   non-empty list of XREFS here   -->
<!-- </SEEALSO>    -->
</SIGNATURE>
