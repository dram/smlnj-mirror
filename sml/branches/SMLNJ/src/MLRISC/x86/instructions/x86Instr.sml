(*
 * This file was automatically generated by MDGen
 * from the machine description file "x86/x86.md".
 *)


signature X86INSTR =
sig
   structure C : X86CELLS
   structure Constant: CONSTANT
   structure Region : REGION
   datatype operand =
     Immed of Int32.int
   | Const of Constant.const
   | ImmedLabel of LabelExp.labexp
   | Relative of int
   | LabelEA of LabelExp.labexp
   | Direct of int
   | FDirect of int
   | MemReg of int
   | Displace of {base:int, disp:operand, mem:Region.region}
   | Indexed of {base:int option, index:int, scale:int, disp:operand, mem:Region.region
     }
   type ea = operand
   datatype binaryOp =
     ADD
   | SUB
   | AND
   | OR
   | XOR
   | SHL
   | SAR
   | SHR
   datatype multDivOp =
     UMUL
   | IDIV
   | UDIV
   datatype unaryOp =
     DEC
   | INC
   | NEG
   | NOT
   datatype move =
     MOVL
   | MOVZX
   | MOVB
   datatype cond =
     EQ
   | NE
   | LT
   | LE
   | GT
   | GE
   | B
   | BE
   | A
   | AE
   | C
   | NC
   | P
   | NP
   | O
   | NO
   datatype fbinOp =
     FADDP
   | FADD
   | FMULP
   | FMUL
   | FSUBP
   | FSUB
   | FSUBRP
   | FSUBR
   | FDIVP
   | FDIV
   | FDIVRP
   | FDIVR
   datatype funOp =
     FABS
   | FCHS
   datatype instruction =
     NOP
   | JMP of (operand * Label.label list)
   | JCC of {cond:cond, opnd:operand}
   | CALL of (operand * C.cellset * C.cellset * Region.region)
   | RET of operand option
   | MOVE of {mvOp:move, src:operand, dst:operand}
   | LEA of {r32:int, addr:operand}
   | CMP of {lsrc:operand, rsrc:operand}
   | BINARY of {binOp:binaryOp, src:operand, dst:operand}
   | MULTDIV of {multDivOp:multDivOp, src:operand}
   | MUL3 of {dst:int, src1:operand, src2:Int32.int option}
   | UNARY of {unOp:unaryOp, opnd:operand}
   | PUSH of operand
   | POP of operand
   | CDQ
   | INTO
   | COPY of {dst:int list, src:int list, tmp:operand option}
   | FCOPY of {dst:int list, src:int list, tmp:operand option}
   | FBINARY of {binOp:fbinOp, src:operand, dst:operand}
   | FUNARY of funOp
   | FUCOMPP
   | FXCH
   | FSTP of operand
   | FLD of operand
   | FILD of operand
   | FNSTSW
   | SAHF
   | ANNOTATION of {i:instruction, a:Annotations.annotation}
   | GROUP of Annotations.annotation
end

functor X86Instr(structure Const : CONSTANT
                 structure Region : REGION
                ) : X86INSTR =
struct
   structure C = X86Cells
   structure Region = Region
   structure Constant = Const
   datatype operand =
     Immed of Int32.int
   | Const of Constant.const
   | ImmedLabel of LabelExp.labexp
   | Relative of int
   | LabelEA of LabelExp.labexp
   | Direct of int
   | FDirect of int
   | MemReg of int
   | Displace of {base:int, disp:operand, mem:Region.region}
   | Indexed of {base:int option, index:int, scale:int, disp:operand, mem:Region.region
     }
   type ea = operand
   datatype binaryOp =
     ADD
   | SUB
   | AND
   | OR
   | XOR
   | SHL
   | SAR
   | SHR
   datatype multDivOp =
     UMUL
   | IDIV
   | UDIV
   datatype unaryOp =
     DEC
   | INC
   | NEG
   | NOT
   datatype move =
     MOVL
   | MOVZX
   | MOVB
   datatype cond =
     EQ
   | NE
   | LT
   | LE
   | GT
   | GE
   | B
   | BE
   | A
   | AE
   | C
   | NC
   | P
   | NP
   | O
   | NO
   datatype fbinOp =
     FADDP
   | FADD
   | FMULP
   | FMUL
   | FSUBP
   | FSUB
   | FSUBRP
   | FSUBR
   | FDIVP
   | FDIV
   | FDIVRP
   | FDIVR
   datatype funOp =
     FABS
   | FCHS
   datatype instruction =
     NOP
   | JMP of (operand * Label.label list)
   | JCC of {cond:cond, opnd:operand}
   | CALL of (operand * C.cellset * C.cellset * Region.region)
   | RET of operand option
   | MOVE of {mvOp:move, src:operand, dst:operand}
   | LEA of {r32:int, addr:operand}
   | CMP of {lsrc:operand, rsrc:operand}
   | BINARY of {binOp:binaryOp, src:operand, dst:operand}
   | MULTDIV of {multDivOp:multDivOp, src:operand}
   | MUL3 of {dst:int, src1:operand, src2:Int32.int option}
   | UNARY of {unOp:unaryOp, opnd:operand}
   | PUSH of operand
   | POP of operand
   | CDQ
   | INTO
   | COPY of {dst:int list, src:int list, tmp:operand option}
   | FCOPY of {dst:int list, src:int list, tmp:operand option}
   | FBINARY of {binOp:fbinOp, src:operand, dst:operand}
   | FUNARY of funOp
   | FUCOMPP
   | FXCH
   | FSTP of operand
   | FLD of operand
   | FILD of operand
   | FNSTSW
   | SAHF
   | ANNOTATION of {i:instruction, a:Annotations.annotation}
   | GROUP of Annotations.annotation
end

