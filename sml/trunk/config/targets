# targets
#
# the following is a list of the targets (in addition to sml) that
# this shell script can install.  Comment out those that you do not
# want.  Note that cml-lib requires cml.

#
# But first, decide where you want to have stable libraries stored.
# If leave "dont_move_libraries" commented out, then the install script will
# move all libraries out of the source tree and into the $LIBDIR
# directory.  Thus, you can then delete the entire source tree without
# losing functionality.  With "dont_move_libraries", libraries will stay
# where they are (within the CM subdirectories of their respective source
# directories).

#dont_move_libraries

# (The base system consisting of runtime, compiler, and basic libraries
# will always be built.)

# unpack the source code for the SML/NJ compiler; this is not required,
# unless you are doing compiler hacking, but it may be interesting to look at.
#
#request src-smlnj

# build ML-Yacc
#
request ml-yacc

# Always: install the pre-compiled ML-Yacc Library; this is necessary
# to use parsers produced by ML-Yacc, but also to bootstrap the system
# in the first place.


# build ML-Lex
#
request ml-lex

# Always: install the pre-compiled SML/NJ Library (necessary to bootstrap).


# build ML-Burg
#
#request ml-burg

# pre-compile and install the remaining components of the SML/NJ library
# (everything except smlnj-lib.cm, aka Util, itself)
#
request smlnj-lib

# pre-compile and install CM "portable graph" utility library
#
#request pgraph-util

# pre-compile and install Concurrent ML, which is a library for message-passing
# concurrency.
#
#request cml

# pre-compile and install the CML Library, which provides some useful CML
# modules.
#
#request cml-lib

# pre-compile and install eXene, which is a library for X-Windows programming.
# EXene requires CML.
#
#request eXene

# pre-compile and install the C-Kit, which is a library for parsing and
# type-checking C programs
#
#request ckit

# pre-compile and install the ML-NLFFI Library, which is the core of
# a new foreign function interface (where "foreign" functions are
# "no longer foreign")
# This library is necessary to compile and/or run programs that use
# the new FFI.
# This preview release currently works only under X86/Linux.
#
#request ml-nlffi-lib

# build ML-NLFFI-Gen, a program generator tool used in conjunction with
# the new "NLFFI" foreign function interface.  The tool generates ML
# glue code from C source code.
# (Requires ckit!)
# This preview release currently works only under X86/Linux.
#
#request ml-nlffigen

# pre-compile and install the MLRISC Tools library.
# This library is for parsing and pretty printing SML code.
# It's used by various MLRISC code generator generator.
#
#request mlrisc-tools

# Build and install the 'nowhere' program translator.
# This tool translates programs with conditional patterns (where clauses) 
# into legal SML code.  See MLRISC/Tools/Doc/nowhere.tex for its
# (bad) documentation.
# (Requires the mlrisc-tools library!)
#
#request nowhere

# unpack and install the documentation directory.
#
#request doc

# Note: autoloading is always enabled.
#   In order to customize what is being pre-registered for autoloading
#   edit file "preloads".  You should make sure that it contains at least
#   "$smlnj/cm.cm".
#  Also, it is a good idea to have "$/basis.cm" pre-loaded.
