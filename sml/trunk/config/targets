# targets
#
# the following is a list of the targets (in addition to sml) that
# this shell script can install.  Comment out those that you do not
# want.  Note that cml-lib requires cml.

#
# But first, decide where you want to have stable libraries stored.
# If you set $MOVE_LIBRARIES to true, then the install script will
# move all libraries out of the source tree and into the $LIBDIR
# directory.  Thus, you can then delete the entire source tree without
# losing functionality.  So choose one of these two:

MOVE_LIBRARIES=true
#MOVE_LIBRARIES=false

# Now let's get started with the target list...

TARGETS=""

# (Always: build the basic sml compiler. This is not reflected in $TARGETS.)


# unpack the source code for the SML/NJ compiler; this is not required,
# unless you are doing compiler hacking, but it may be interesting to look at.
#
#TARGETS="$TARGETS src-smlnj"

# build ML-Yacc
#
TARGETS="$TARGETS ml-yacc"

# Always: install the pre-compiled ML-Yacc Library; this is necessary
# to use parsers produced by ML-Yacc, but also to bootstrap the system
# in the first place.


# build ML-Lex
#
TARGETS="$TARGETS ml-lex"

# Always: install the pre-compiled SML/NJ Library (necessary to bootstrap).


# build ML-Burg
#
#TARGETS="$TARGETS ml-burg"

# pre-compile and install the remaining components of the SML/NJ library
# (everything except smlnj-lib.cm, aka Util, itself)
TARGETS="$TARGETS smlnj-lib"

# pre-compile and install Concurrent ML, which is a library for message-passing
# concurrency.
#
#TARGETS="$TARGETS cml"

# pre-compile and install the CML Library, which provides some useful CML
# modules.
#
#TARGETS="$TARGETS cml-lib"

# pre-compile and install eXene, which is a library for X-Windows programming.
# EXene requires CML.
#
#TARGETS="$TARGETS eXene"

# pre-compile and install the C-Kit, which is a library for parsing and
# type-checking C programs
#
#TARGETS="$TARGETS ckit"

# pre-compile and install the ML-NLFFI Library, which is the core of
# a new foreign function interface (where "foreign" functions are
# "no longer foreign")
# This library is necessary to compile and/or run programs that use
# the new FFI.
# This preview release currently works only under X86/Linux.
#
#TARGETS="$TARGETS ml-nlffi-lib"

# build ML-NLFFI-Gen, a program generator tool used in conjunction with
# the new "NLFFI" foreign function interface.  The tool generates ML
# glue code from C source code.
# (Requires ckit!)
# This preview release currently works only under X86/Linux.
#
#TARGETS="$TARGETS ml-nlffigen"

# unpack and install the documentation directory.
#
#TARGETS="$TARGETS doc"

# Note: autoloading is always enabled.
#   In order to customize what is being pre-registered for autoloading
#   edit file "preloads".  You should make sure that it contains at least
#   "$smlnj/cm.cm".
#  Also, it is a good idea to have "$/basis.cm" pre-loaded.
