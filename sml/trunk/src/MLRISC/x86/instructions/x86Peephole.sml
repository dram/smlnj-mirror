(* WARNING: this is generated by running 'wheregen x86Peephole.peep'.
 * Do not edit this file directly.
 *)

(*#line 17.1 "x86Peephole.peep"*)
functor X86Peephole(X86Instr : X86INSTR): PEEPHOLE =
struct

(*#line 19.4 "x86Peephole.peep"*)
   structure I = X86Instr

(*#line 20.4 "x86Peephole.peep"*)
   structure C = I.C

(*#line 23.4 "x86Peephole.peep"*)
   fun peephole instrs = 
       let 
(*#line 24.8 "x86Peephole.peep"*)
           fun isStackPtr (I.Direct r) = C.sameColor (r, C.esp)
             | isStackPtr _ = false

(*#line 27.8 "x86Peephole.peep"*)
           fun isZero (I.Immed n) = n = 0
             | isZero (I.ImmedLabel le) = (I.LabelExp.valueOf le) = 0
             | isZero _ = false

(*#line 31.8 "x86Peephole.peep"*)
           fun isZeroOpt NONE = true
             | isZeroOpt (SOME opn) = isZero opn

(*#line 34.8 "x86Peephole.peep"*)
           fun loop (code, instrs) = 
               let val v_32 = code
                   fun state_8 (v_0, v_3) = 
                       let val i = v_0
                           and rest = v_3
                       in loop (rest, i :: instrs)
                       end
                   fun state_42 (v_0, v_1, v_2, v_3) = 
                       (case v_1 of
                         I.Direct v_26 => 
                         let val dst = v_1
                             and src = v_2
                             and rest = v_3
                         in (if (isZero src)
                               then (loop (rest, (I.BINARY {binOp=I.XORL, src=dst, dst=dst}) :: instrs))
                               else (state_8 (v_0, v_3)))
                         end
                       | _ => state_8 (v_0, v_3)
                       )
               in 
                  (case v_32 of
                    nil => instrs
                  | op :: v_31 => 
                    let val (v_0, v_3) = v_31
                    in 
                       (case v_0 of
                         I.BINARY v_18 => 
                         let val {binOp=v_25, dst=v_1, src=v_2, ...} = v_18
                         in 
                            (case v_2 of
                              I.Immed v_16 => 
                              (case v_25 of
                                I.ADDL => 
                                (case v_1 of
                                  I.Direct v_26 => 
                                  (case v_3 of
                                    nil => state_8 (v_0, v_3)
                                  | op :: v_13 => 
                                    let val (v_12, v_6) = v_13
                                    in 
                                       (case v_12 of
                                         I.BINARY v_11 => 
                                         let val {binOp=v_10, dst=v_9, src=v_8, ...} = v_11
                                         in 
                                            (case v_10 of
                                              I.SUBL => 
                                              (case v_9 of
                                                I.Direct v_5 => 
                                                (case v_8 of
                                                  I.Immed v_7 => 
                                                  let val d_i = v_26
                                                      and n = v_16
                                                      and d_j = v_5
                                                      and m = v_7
                                                      and rest = v_6
                                                  in (if ((C.sameColor (d_i, C.esp)) andalso (C.sameColor (d_j, C.esp)))
                                                        then (if (m = n)
                                                          then (loop (rest, instrs))
                                                          else (if (m < n)
                                                          then (loop (rest, (I.BINARY {binOp=I.ADDL, src=I.Immed (n - m), dst=I.Direct C.esp}) :: instrs))
                                                          else (loop (rest, (I.BINARY {binOp=I.SUBL, src=I.Immed (m - n), dst=I.Direct C.esp}) :: instrs))))
                                                        else (state_8 (v_0, v_3)))
                                                  end
                                                | _ => state_8 (v_0, v_3)
                                                )
                                              | _ => state_8 (v_0, v_3)
                                              )
                                            | _ => state_8 (v_0, v_3)
                                            )
                                         end
                                       | _ => state_8 (v_0, v_3)
                                       )
                                    end
                                  )
                                | _ => state_8 (v_0, v_3)
                                )
                              | I.SUBL => 
                                (case v_1 of
                                  I.Direct v_26 => 
                                  (case v_16 of
                                    4 => 
                                    (case v_3 of
                                      nil => state_8 (v_0, v_3)
                                    | op :: v_13 => 
                                      let val (v_12, v_6) = v_13
                                      in 
                                         (case v_12 of
                                           I.MOVE v_11 => 
                                           let val {dst=v_9, mvOp=v_28, src=v_8, ...} = v_11
                                           in 
                                              (case v_9 of
                                                I.Displace v_5 => 
                                                let val {base=v_27, disp=v_30, ...} = v_5
                                                in 
                                                   (case v_30 of
                                                     I.Immed v_29 => 
                                                     (case v_29 of
                                                       0 => 
                                                       (case v_28 of
                                                         I.MOVL => 
                                                         let val dst_i = v_26
                                                          and base = v_27
                                                          and src = v_8
                                                          and rest = v_6
                                                         in (if (((C.sameColor (base, C.esp)) andalso (C.sameColor (dst_i, C.esp))) andalso (not (isStackPtr src)))
                                                          then (loop (rest, (I.PUSHL src) :: instrs))
                                                          else (state_8 (v_0, v_3)))
                                                         end
                                                       | _ => state_8 (v_0, v_3)
                                                       )
                                                     | _ => state_8 (v_0, v_3)
                                                     )
                                                   | _ => state_8 (v_0, v_3)
                                                   )
                                                end
                                              | _ => state_8 (v_0, v_3)
                                              )
                                           end
                                         | _ => state_8 (v_0, v_3)
                                         )
                                      end
                                    )
                                  | _ => state_8 (v_0, v_3)
                                  )
                                | _ => state_8 (v_0, v_3)
                                )
                              | _ => state_8 (v_0, v_3)
                              )
                            | I.ImmedLabel v_16 => 
                              (case v_25 of
                                I.ADDL => 
                                let val le = v_16
                                    and rest = v_3
                                in (if ((I.LabelExp.valueOf le) = 0)
                                      then (loop (rest, instrs))
                                      else (state_8 (v_0, v_3)))
                                end
                              | I.SUBL => 
                                let val le = v_16
                                    and rest = v_3
                                in (if ((I.LabelExp.valueOf le) = 0)
                                      then (loop (rest, instrs))
                                      else (state_8 (v_0, v_3)))
                                end
                              | _ => state_8 (v_0, v_3)
                              )
                            | _ => state_8 (v_0, v_3)
                            )
                         end
                       | I.LEA v_18 => 
                         let val {addr=v_24, r32=v_21, ...} = v_18
                         in 
                            (case v_24 of
                              I.Displace v_23 => 
                              let val {base=v_19, disp=v_22, ...} = v_23
                              in 
                                 (case v_22 of
                                   I.ImmedLabel v_20 => 
                                   let val base = v_19
                                       and le = v_20
                                       and r32 = v_21
                                       and rest = v_3
                                   in (if (((I.LabelExp.valueOf le) = 0) andalso (C.sameColor (r32, base)))
                                         then (loop (rest, instrs))
                                         else (state_8 (v_0, v_3)))
                                   end
                                 | _ => state_8 (v_0, v_3)
                                 )
                              end
                            | _ => state_8 (v_0, v_3)
                            )
                         end
                       | I.MOVE v_18 => 
                         let val {dst=v_1, mvOp=v_17, src=v_2, ...} = v_18
                         in 
                            (case v_17 of
                              I.MOVL => 
                              (case v_2 of
                                I.Displace v_16 => 
                                let val {base=v_4, disp=v_15, ...} = v_16
                                in 
                                   (case v_15 of
                                     I.Immed v_14 => 
                                     (case v_14 of
                                       0 => 
                                       (case v_3 of
                                         nil => state_42 (v_0, v_1, v_2, v_3)
                                       | op :: v_13 => 
                                         let val (v_12, v_6) = v_13
                                         in 
                                            (case v_12 of
                                              I.BINARY v_11 => 
                                              let val {binOp=v_10, dst=v_9, src=v_8, ...} = v_11
                                              in 
                                                 (case v_10 of
                                                   I.ADDL => 
                                                   (case v_9 of
                                                     I.Direct v_5 => 
                                                     (case v_8 of
                                                       I.Immed v_7 => 
                                                       (case v_7 of
                                                         4 => 
                                                         let val dst = v_1
                                                          and base = v_4
                                                          and dst_i = v_5
                                                          and rest = v_6
                                                         in (if (((C.sameColor (base, C.esp)) andalso (C.sameColor (dst_i, C.esp))) andalso (not (isStackPtr dst)))
                                                          then (loop (rest, (I.POP dst) :: instrs))
                                                          else (state_42 (v_0, v_1, v_2, v_3)))
                                                         end
                                                       | _ => state_42 (v_0, v_1, v_2, v_3)
                                                       )
                                                     | _ => state_42 (v_0, v_1, v_2, v_3)
                                                     )
                                                   | _ => state_42 (v_0, v_1, v_2, v_3)
                                                   )
                                                 | _ => state_42 (v_0, v_1, v_2, v_3)
                                                 )
                                              end
                                            | _ => state_42 (v_0, v_1, v_2, v_3)
                                            )
                                         end
                                       )
                                     | _ => state_42 (v_0, v_1, v_2, v_3)
                                     )
                                   | _ => state_42 (v_0, v_1, v_2, v_3)
                                   )
                                end
                              | _ => state_42 (v_0, v_1, v_2, v_3)
                              )
                            | _ => state_8 (v_0, v_3)
                            )
                         end
                       | _ => state_8 (v_0, v_3)
                       )
                    end
                  )
               end
       in loop (instrs, [])
       end
end

