Group (viscomp-lib.cm) is

  basis.cm
  comp-lib.cm

library/sources.cm
graphs/sources.cm
visualization/sources.cm
ir/sources.cm

(* Core definitions. These are required *)
control/mlriscErrormsg.sml
control/mlrisc-control.sml
control/mlrisc-timing.sml

instructions/cells.sig
instructions/cells.sml
instructions/insnProps.sig
instructions/stream.sig
instructions/stream.sml
instructions/instructions.sig
instructions/shuffle.sml
instructions/block-names.sig
instructions/constant.sig
instructions/labelExp.sml
instructions/labels.sml
instructions/pseudoOps.sig
instructions/region.sig
instructions/basicAnnotations.sig
instructions/basicAnnotations.sml
instructions/freqProps.sig
instructions/freqProps.sml


(* New aliasing/memory disambiguation support *)
aliasing/mlriscRegion.sig
aliasing/mlriscRegion.sml
aliasing/pointsTo.sig
aliasing/pointsTo.sml

mltree/mltree-basis.sig
mltree/mltree-basis.sml
mltree/mltree.sig
mltree/mltree.sml
mltree/mltree-util.sig
mltree/mltree-util.sml
mltree/mltreecomp.sig
mltree/mltreegen.sig
mltree/mltreegen.sml
mltree/flowgen.sig
mltree/mltree-mult.sig
mltree/mltree-mult.sml


(* Basic cluster stuff. These are required. *)
cluster/flowgraph.sml
cluster/printCluster.sml
cluster/clustergen.sml


(* MLRISC IR for optimizations. These are necessary only if you want
 * to use various optional MLRISC optimizations.
 *)
IR/dataflow.sig
IR/dataflow.sml
IR/mlrisc-cfg-util.sig
IR/mlrisc-cfg-util.sml
IR/mlrisc-cfg.sig
IR/mlrisc-cfg.sml
IR/mlrisc-cfg2cluster.sml
IR/mlrisc-cluster2cfg.sml
IR/mlrisc-format-insn.sml
IR/mlrisc-ir.sig
IR/mlrisc-ir.sml
IR/mlrisc-liveness.sml
IR/mlrisc-reshape-branches.sig
IR/mlrisc-reshape-branches.sml
IR/static-branch-prediction.sig
IR/static-branch-prediction.sml


(* Core register allocator utilities *)
ra/getreg.sig
ra/getreg.sml
ra/liveness.sml
ra/ra-params.sig
ra/ra.sml
ra/raBitset.sml

(* Assembly machine code stuff *)
emit/instruction-emitter.sig
emit/asmEmit.sml
emit/asmStream.sml
emit/code-string.sig
emit/emitterNEW.sig

backpatch/backpatch.sml
backpatch/bbsched.sig
backpatch/delaySlotProps.sig
backpatch/sdi-jumps.sig
backpatch/spanDep.sml
backpatch/vlBackPatch.sml

(* Sparc specific backend *)
sparc/instructions/sparcCells.sml
sparc/instructions/sparcInstr.sml
sparc/instructions/sparcShuffle.sig
sparc/instructions/sparcShuffle.sml
sparc/instructions/sparcProps.sml
sparc/emit/sparcAsm.sml
sparc/emit/sparcMC.sml
sparc/backpatch/sparcJumps.sml
sparc/backpatch/sparcDelaySlotProps.sml
sparc/mltree/sparcPseudoInstr.sig
sparc/mltree/sparc.sml
sparc/ra/sparcRewrite.sml
sparc/ra/sparcRegAlloc.sml

(* HPPA specific backend *)
hppa/instructions/hppaCells.sml
hppa/instructions/hppaInstr.sml
hppa/instructions/hppaShuffle.sig
hppa/instructions/hppaShuffle.sml
hppa/instructions/hppaProps.sml
hppa/emit/hppaAsm.sml
hppa/emit/hppaMC.sml
hppa/backpatch/hppaDelaySlotProps.sml
hppa/backpatch/hppaJumps.sml
hppa/mltree/hppaMillicode.sig
hppa/mltree/hppaLabelComp.sig
hppa/mltree/hppa.sml
hppa/ra/hppaRewrite.sml
hppa/ra/hppaRegAlloc.sml

(* Alpha specific backend *)
alpha/instructions/alphaCells.sml
alpha/instructions/alphaInstr.sml
alpha/instructions/alphaShuffle.sig
alpha/instructions/alphaShuffle.sml
alpha/instructions/alphaProps.sml
alpha/emit/alphaAsm.sml
alpha/emit/alphaMC.sml
alpha/backpatch/alphaJumps.sml
alpha/mltree/alphaPseudoInstr.sig
alpha/mltree/alpha.sml
alpha/ra/alphaRewrite.sml
alpha/ra/alphaRegAlloc.sml

(* X86 specific backend *)
x86/instructions/x86Cells.sml
x86/instructions/x86Instr.sml
x86/instructions/x86Shuffle.sig
x86/instructions/x86Shuffle.sml
x86/instructions/x86Props.sml
x86/instructions/x86MemRegs.sig
x86/emit/x86Asm.sml
x86/x86MC.sml		(* temporary handwritten version *)
x86/ra/x86Rewrite.sig
x86/ra/x86Rewrite.sml
x86/ra/x86RegAlloc.sml
x86/ra/x86Spill.sml
x86/ra/x86PseudoR.sml
x86/backpatch/x86Jumps.sml
x86/mltree/x86.sml

(* PowerPC specific backend *)
ppc/instructions/ppcCells.sml
ppc/instructions/ppcInstr.sml
ppc/instructions/ppcShuffle.sig
ppc/instructions/ppcShuffle.sml
ppc/instructions/ppcProps.sml
ppc/emit/ppcAsm.sml
ppc/emit/ppcMC.sml
ppc/backpatch/ppcJumps.sml
ppc/mltree/ppcPseudoInstr.sig
ppc/mltree/ppc.sml
ppc/ra/ppcRewrite.sml
ppc/ra/ppcRegAlloc.sml

(* Glue modules.  These are required only if you want to 
 * play with optimizations.
 *)
Glue/mlrisc-glue.sig
Glue/mlrisc-glue.sml
