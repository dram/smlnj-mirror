(*
 * This file was automatically generated by MDGen (v2.0)
 * from the machine description file "sparc/sparc.md".
 *)


signature SPARCINSTR =
sig
   structure C : SPARCCELLS
   structure Constant: CONSTANT
   structure LabelExp: LABELEXP
   structure Region : REGION
      sharing Constant = LabelExp.Constant
   datatype load =
     LDSB
   | LDSH
   | LDUB
   | LDUH
   | LD
   | LDX
   | LDD
   datatype store =
     STB
   | STH
   | ST
   | STX
   | STD
   datatype fload =
     LDF
   | LDDF
   | LDQF
   | LDFSR
   | LDXFSR
   datatype fstore =
     STF
   | STDF
   | STFSR
   datatype arith =
     AND
   | ANDCC
   | ANDN
   | ANDNCC
   | OR
   | ORCC
   | ORN
   | ORNCC
   | XOR
   | XORCC
   | XNOR
   | XNORCC
   | ADD
   | ADDCC
   | TADD
   | TADDCC
   | TADDTV
   | TADDTVCC
   | SUB
   | SUBCC
   | TSUB
   | TSUBCC
   | TSUBTV
   | TSUBTVCC
   | UMUL
   | UMULCC
   | SMUL
   | SMULCC
   | UDIV
   | UDIVCC
   | SDIV
   | SDIVCC
   | MULX
   | SDIVX
   | UDIVX
   datatype shift =
     SLL
   | SRL
   | SRA
   | SLLX
   | SRLX
   | SRAX
   datatype farith1 =
     FiTOs
   | FiTOd
   | FiTOq
   | FsTOi
   | FdTOi
   | FqTOi
   | FsTOd
   | FsTOq
   | FdTOs
   | FdTOq
   | FqTOs
   | FqTOd
   | FMOVs
   | FNEGs
   | FABSs
   | FMOVd
   | FNEGd
   | FABSd
   | FMOVq
   | FNEGq
   | FABSq
   | FSQRTs
   | FSQRTd
   | FSQRTq
   datatype farith2 =
     FADDs
   | FADDd
   | FADDq
   | FSUBs
   | FSUBd
   | FSUBq
   | FMULs
   | FMULd
   | FMULq
   | FsMULd
   | FdMULq
   | FDIVs
   | FDIVd
   | FDIVq
   datatype fcmp =
     FCMPs
   | FCMPd
   | FCMPq
   | FCMPEs
   | FCMPEd
   | FCMPEq
   datatype branch =
     BN
   | BE
   | BLE
   | BL
   | BLEU
   | BCS
   | BNEG
   | BVS
   | BA
   | BNE
   | BG
   | BGE
   | BGU
   | BCC
   | BPOS
   | BVC
   datatype rcond =
     RZ
   | RLEZ
   | RLZ
   | RNZ
   | RGZ
   | RGEZ
   datatype cc =
     ICC
   | XCC
   datatype prediction =
     PT
   | PN
   datatype fbranch =
     FBN
   | FBNE
   | FBLG
   | FBUL
   | FBL
   | FBUG
   | FBG
   | FBU
   | FBA
   | FBE
   | FBUE
   | FBGE
   | FBUGE
   | FBLE
   | FBULE
   | FBO
   datatype ea =
     Direct of int
   | FDirect of int
   | Displace of {base:int, disp:int}
   datatype fsize =
     S
   | D
   | Q
   datatype operand =
     REG of int
   | IMMED of int
   | LAB of LabelExp.labexp
   | LO of LabelExp.labexp
   | HI of LabelExp.labexp
   type addressing_mode = (C.cell * operand)
   datatype instruction =
     LOAD of {l:load, d:int, r:int, i:operand, mem:Region.region}
   | STORE of {s:store, d:int, r:int, i:operand, mem:Region.region}
   | FLOAD of {l:fload, r:int, i:operand, d:int, mem:Region.region}
   | FSTORE of {s:fstore, d:int, r:int, i:operand, mem:Region.region}
   | SETHI of {i:int, d:int}
   | ARITH of {a:arith, r:int, i:operand, d:int}
   | SHIFT of {s:shift, r:int, i:operand, d:int}
   | MOVicc of {b:branch, i:operand, d:int}
   | MOVfcc of {b:fbranch, i:operand, d:int}
   | MOVR of {rcond:rcond, r:int, i:operand, d:int}
   | FMOVicc of {sz:fsize, b:branch, r:int, d:int}
   | FMOVfcc of {sz:fsize, b:fbranch, r:int, d:int}
   | Bicc of {b:branch, a:bool, label:Label.label, nop:bool}
   | FBfcc of {b:fbranch, a:bool, label:Label.label, nop:bool}
   | BR of {rcond:rcond, p:prediction, r:int, a:bool, label:Label.label
     , nop:bool}
   | BP of {b:branch, p:prediction, cc:cc, a:bool, label:Label.label, nop:bool
     }
   | JMP of {r:int, i:operand, labs:Label.label list, nop:bool}
   | JMPL of {r:int, i:operand, d:int, defs:C.cellset, uses:C.cellset, nop:bool
     , mem:Region.region}
   | CALL of {defs:C.cellset, uses:C.cellset, label:Label.label, nop:bool
     , mem:Region.region}
   | Ticc of {t:branch, cc:cc, r:int, i:operand}
   | FPop1 of {a:farith1, r:int, d:int}
   | FPop2 of {a:farith2, r1:int, r2:int, d:int}
   | FCMP of {cmp:fcmp, r1:int, r2:int, nop:bool}
   | COPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | FCOPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | SAVE of {r:int, i:operand, d:int}
   | RESTORE of {r:int, i:operand, d:int}
   | RDY of {d:int}
   | WRY of {r:int, i:operand}
   | RET of {leaf:bool, nop:bool}
   | ANNOTATION of {i:instruction, a:Annotations.annotation}
end

functor SparcInstr(structure LabelExp : LABELEXP
                   structure Region   : REGION
                  ) : SPARCINSTR =
struct
   structure C = SparcCells
   structure Region = Region
   structure LabelExp = LabelExp
   structure Constant = LabelExp.Constant
   datatype load =
     LDSB
   | LDSH
   | LDUB
   | LDUH
   | LD
   | LDX
   | LDD
   datatype store =
     STB
   | STH
   | ST
   | STX
   | STD
   datatype fload =
     LDF
   | LDDF
   | LDQF
   | LDFSR
   | LDXFSR
   datatype fstore =
     STF
   | STDF
   | STFSR
   datatype arith =
     AND
   | ANDCC
   | ANDN
   | ANDNCC
   | OR
   | ORCC
   | ORN
   | ORNCC
   | XOR
   | XORCC
   | XNOR
   | XNORCC
   | ADD
   | ADDCC
   | TADD
   | TADDCC
   | TADDTV
   | TADDTVCC
   | SUB
   | SUBCC
   | TSUB
   | TSUBCC
   | TSUBTV
   | TSUBTVCC
   | UMUL
   | UMULCC
   | SMUL
   | SMULCC
   | UDIV
   | UDIVCC
   | SDIV
   | SDIVCC
   | MULX
   | SDIVX
   | UDIVX
   datatype shift =
     SLL
   | SRL
   | SRA
   | SLLX
   | SRLX
   | SRAX
   datatype farith1 =
     FiTOs
   | FiTOd
   | FiTOq
   | FsTOi
   | FdTOi
   | FqTOi
   | FsTOd
   | FsTOq
   | FdTOs
   | FdTOq
   | FqTOs
   | FqTOd
   | FMOVs
   | FNEGs
   | FABSs
   | FMOVd
   | FNEGd
   | FABSd
   | FMOVq
   | FNEGq
   | FABSq
   | FSQRTs
   | FSQRTd
   | FSQRTq
   datatype farith2 =
     FADDs
   | FADDd
   | FADDq
   | FSUBs
   | FSUBd
   | FSUBq
   | FMULs
   | FMULd
   | FMULq
   | FsMULd
   | FdMULq
   | FDIVs
   | FDIVd
   | FDIVq
   datatype fcmp =
     FCMPs
   | FCMPd
   | FCMPq
   | FCMPEs
   | FCMPEd
   | FCMPEq
   datatype branch =
     BN
   | BE
   | BLE
   | BL
   | BLEU
   | BCS
   | BNEG
   | BVS
   | BA
   | BNE
   | BG
   | BGE
   | BGU
   | BCC
   | BPOS
   | BVC
   datatype rcond =
     RZ
   | RLEZ
   | RLZ
   | RNZ
   | RGZ
   | RGEZ
   datatype cc =
     ICC
   | XCC
   datatype prediction =
     PT
   | PN
   datatype fbranch =
     FBN
   | FBNE
   | FBLG
   | FBUL
   | FBL
   | FBUG
   | FBG
   | FBU
   | FBA
   | FBE
   | FBUE
   | FBGE
   | FBUGE
   | FBLE
   | FBULE
   | FBO
   datatype ea =
     Direct of int
   | FDirect of int
   | Displace of {base:int, disp:int}
   datatype fsize =
     S
   | D
   | Q
   datatype operand =
     REG of int
   | IMMED of int
   | LAB of LabelExp.labexp
   | LO of LabelExp.labexp
   | HI of LabelExp.labexp
   type addressing_mode = (C.cell * operand)
   datatype instruction =
     LOAD of {l:load, d:int, r:int, i:operand, mem:Region.region}
   | STORE of {s:store, d:int, r:int, i:operand, mem:Region.region}
   | FLOAD of {l:fload, r:int, i:operand, d:int, mem:Region.region}
   | FSTORE of {s:fstore, d:int, r:int, i:operand, mem:Region.region}
   | SETHI of {i:int, d:int}
   | ARITH of {a:arith, r:int, i:operand, d:int}
   | SHIFT of {s:shift, r:int, i:operand, d:int}
   | MOVicc of {b:branch, i:operand, d:int}
   | MOVfcc of {b:fbranch, i:operand, d:int}
   | MOVR of {rcond:rcond, r:int, i:operand, d:int}
   | FMOVicc of {sz:fsize, b:branch, r:int, d:int}
   | FMOVfcc of {sz:fsize, b:fbranch, r:int, d:int}
   | Bicc of {b:branch, a:bool, label:Label.label, nop:bool}
   | FBfcc of {b:fbranch, a:bool, label:Label.label, nop:bool}
   | BR of {rcond:rcond, p:prediction, r:int, a:bool, label:Label.label
     , nop:bool}
   | BP of {b:branch, p:prediction, cc:cc, a:bool, label:Label.label, nop:bool
     }
   | JMP of {r:int, i:operand, labs:Label.label list, nop:bool}
   | JMPL of {r:int, i:operand, d:int, defs:C.cellset, uses:C.cellset, nop:bool
     , mem:Region.region}
   | CALL of {defs:C.cellset, uses:C.cellset, label:Label.label, nop:bool
     , mem:Region.region}
   | Ticc of {t:branch, cc:cc, r:int, i:operand}
   | FPop1 of {a:farith1, r:int, d:int}
   | FPop2 of {a:farith2, r1:int, r2:int, d:int}
   | FCMP of {cmp:fcmp, r1:int, r2:int, nop:bool}
   | COPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | FCOPY of {dst:int list, src:int list, impl:instruction list option ref
     , tmp:ea option}
   | SAVE of {r:int, i:operand, d:int}
   | RESTORE of {r:int, i:operand, d:int}
   | RDY of {d:int}
   | WRY of {r:int, i:operand}
   | RET of {leaf:bool, nop:bool}
   | ANNOTATION of {i:instruction, a:Annotations.annotation}
end

