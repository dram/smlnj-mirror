val it = () : unit
signature HASH_KEY =
  sig
    type hash_key
    val hashVal : hash_key -> word
    val sameKey : hash_key * hash_key -> bool
  end
signature MONO_HASH_TABLE =
  sig
    structure Key :
      sig
        type hash_key
        val hashVal : hash_key -> word
        val sameKey : hash_key * hash_key -> bool
      end
    type 'a hash_table
    val mkTable : int * exn -> 'a hash_table
    val insert : 'a hash_table -> Key.hash_key * 'a -> unit
    val lookup : 'a hash_table -> Key.hash_key -> 'a
    val find : 'a hash_table -> Key.hash_key -> 'a option
    val remove : 'a hash_table -> Key.hash_key -> 'a
    val numItems : 'a hash_table -> int
    val listItems : 'a hash_table -> 'a list
    val listItemsi : 'a hash_table -> (Key.hash_key * 'a) list
    val app : ('a -> unit) -> 'a hash_table -> unit
    val appi : (Key.hash_key * 'a -> unit) -> 'a hash_table -> unit
    val map : ('a -> 'b) -> 'a hash_table -> 'b hash_table
    val mapi : (Key.hash_key * 'a -> 'b) -> 'a hash_table -> 'b hash_table
    val fold : ('a * 'b -> 'b) -> 'b -> 'a hash_table -> 'b
    val foldi : (Key.hash_key * 'a * 'b -> 'b) -> 'b -> 'a hash_table -> 'b
    val filter : ('a -> bool) -> 'a hash_table -> unit
    val filteri : (Key.hash_key * 'a -> bool) -> 'a hash_table -> unit
    val copy : 'a hash_table -> 'a hash_table
    val bucketSizes : 'a hash_table -> int list
  end
structure HashTableRep :
  sig
    datatype ('a,'b) bucket = B of word * 'a * 'b * ('a,'b) bucket | NIL
    type  ('a,'b) table = ('a,'b) bucket array
    val alloc : int -> ('a,'b) table
    val growTable : ('a,'b) table * int -> ('a,'b) table
    val growTableIfNeeded : ('a,'b) table ref * int -> bool
    val listItems : ('a,'b) table * int ref -> 'b list
    val listItemsi : ('a,'b) table * int ref -> ('a * 'b) list
    val appi : ('b * 'c -> 'a) -> ('b,'c) table -> unit
    val app : ('c -> 'a) -> ('b,'c) table -> unit
    val mapi : ('b * 'a -> 'c) -> ('b,'a) table -> ('b,'c) table
    val map : ('a -> 'c) -> ('b,'a) table -> ('b,'c) table
    val foldi : ('a * 'b * 'c -> 'c) -> 'c -> ('a,'b) table -> 'c
    val fold : ('b * 'c -> 'c) -> 'c -> ('a,'b) table -> 'c
    val filteri : ('a * 'b -> bool) -> ('a,'b) table -> unit
    val filter : ('b -> bool) -> ('a,'b) table -> unit
    val copy : ('a,'b) table -> ('a,'b) table
    val bucketSizes : ('a,'b) table -> int list
  end
functor HashTableFn : <sig>
functor Dictionary : <sig>
functor T : <sig>
structure OP :
  sig
    structure U : <sig>
    datatype v = v of int U.dictionary
    val cre : int -> v
  end

