(*
 * This file was automatically generated by MDGen (v2.0)
 * from the machine description file "sparc/sparc.md".
 *)


signature SPARCCELLS =
sig
   datatype mycellkind =
     GP
   | FP
   | Y
   | PSR
   | FSR
   | CC
   | MEM
   | CTRL
   | UNKNOWN
   withtype cellset = (int list * int list * int list)
   include CELLS_BASIS where type cellkind = mycellkind
   val showGP : cell -> string
   val showFP : cell -> string
   val showY : cell -> string
   val showPSR : cell -> string
   val showFSR : cell -> string
   val showCC : cell -> string
   val showMEM : cell -> string
   val showCTRL : cell -> string
   val showGPWithType : (cell * ty) -> string
   val showFPWithType : (cell * ty) -> string
   val showYWithType : (cell * ty) -> string
   val showPSRWithType : (cell * ty) -> string
   val showFSRWithType : (cell * ty) -> string
   val showCCWithType : (cell * ty) -> string
   val showMEMWithType : (cell * ty) -> string
   val showCTRLWithType : (cell * ty) -> string
   val stackptrR : cell
   val asmTmpR : cell
   val linkReg : cell
   val fasmTmp : cell
   val y : cell
   val psr : cell
   val fsr : cell
   val addGP : (cell * cellset) -> cellset
   val addFP : (cell * cellset) -> cellset
   val addPSR : (cell * cellset) -> cellset
   val zeroReg : cellkind -> cell option
   val toString : cellkind -> cell -> string
   val toStringWithType : cellkind -> cell * ty -> string
   val addCell : cellkind -> cell * cellset -> cellset
   val rmvCell : cellkind -> cell * cellset -> cellset
   val addReg : cell * cellset -> cellset
   val rmvReg : cell * cellset -> cellset
   val addFreg : cell * cellset -> cellset
   val rmvFreg : cell * cellset -> cellset
   val getCell : cellkind -> cellset -> cell list
   val updateCell : cellkind -> cellset * cell list -> cellset
   val empty : cellset
   val cellsetToString : cellset -> string
   val cellsetToString' : (cell -> cell) -> cellset -> string
   val cellsetToCells : cellset -> cell list
end

structure SparcCells : SPARCCELLS =
struct
   datatype mycellkind =
     GP
   | FP
   | Y
   | PSR
   | FSR
   | CC
   | MEM
   | CTRL
   | UNKNOWN
   withtype cellset = (int list * int list * int list)
   exception SparcCells
   structure SL = SortedList
   fun error msg = MLRiscErrorMsg.error("SparcCells",msg)
   val cellkindToString = (fn GP => "GP"
                            | FP => "FP"
                            | Y => "Y"
                            | PSR => "PSR"
                            | FSR => "FSR"
                            | CC => "CC"
                            | MEM => "MEM"
                            | CTRL => "CTRL"
                            | UNKNOWN => "UNKNOWN"
                          )
   structure MyCellsBasis = CellsBasis
      (type cellkind = mycellkind
       exception Cells = SparcCells
       val unknown = UNKNOWN
       val cellkindToString = cellkindToString
       val INT = GP
       val FLOAT = FP
       val firstPseudo = 256
       val kinds = [GP, FP, Y, PSR, FSR, CC, MEM, CTRL, UNKNOWN]
       val physical = [{from=0, to=31, kind=GP}, {from=32, to=63, kind=FP}, {from=64, to=64, kind=Y}, {from=65, to=65, kind=PSR}, {from=66, to=66, kind=FSR}, {from=67, to=66, kind=CC}, {from=67, to=66, kind=MEM}, {from=67, to=66, kind=CTRL}]
      )

   open MyCellsBasis
   val offsetGP = 0
   and offsetFP = 32
   and offsetY = 64
   and offsetPSR = 65
   and offsetFSR = 66
   and offsetCC = 67
   and offsetMEM = 67
   and offsetCTRL = 67
   val stackptrR = (14 + offsetGP)
   val asmTmpR = (10 + offsetGP)
   val linkReg = (15 + offsetGP)
   val fasmTmp = (30 + offsetFP)
   val y = (0 + offsetY)
   val psr = (0 + offsetPSR)
   val fsr = (0 + offsetFSR)
   fun zeroReg GP = SOME (0 + offsetGP)
     | zeroReg _ = NONE
   fun showGPWithType (r, ty) = (fn (r, _) => (if (r < 8)
                                       then ("%g" ^ (Int.toString r))
                                       else (if (r = 14)
                                          then "%sp"
                                          else (if (r < 16)
                                             then ("%o" ^ (Int.toString (r - 8)))
                                             else (if (r < 24)
                                                then ("%l" ^ (Int.toString (r - 16)))
                                                else (if (r = 30)
                                                   then "%fp"
                                                   else (if (r < 32)
                                                      then ("%i" ^ (Int.toString (r - 24)))
                                                      else ("%r" ^ (Int.toString r))))))))
                                ) (r, ty)
   and showFPWithType (r, ty) = let
          val r = (if (r <= 63)
                 then (r - 32)
                 else r)
       in (fn (f, _) => "%f" ^ (Int.toString f)
          ) (r, ty)
       end

   and showYWithType (r, ty) = let
          val r = (if (r <= 64)
                 then (r - 64)
                 else r)
       in (fn _ => "%y"
          ) (r, ty)
       end

   and showPSRWithType (r, ty) = let
          val r = (if (r <= 65)
                 then (r - 65)
                 else r)
       in (fn (0, _) => "%psr"
            | (n, _) => "%psr" ^ (Int.toString n)
          ) (r, ty)
       end

   and showFSRWithType (r, ty) = let
          val r = (if (r <= 66)
                 then (r - 66)
                 else r)
       in (fn (0, _) => "%fsr"
            | (n, _) => "%fsr" ^ (Int.toString n)
          ) (r, ty)
       end

   and showCCWithType (r, ty) = let
          val r = (if (r <= 66)
                 then (r - 67)
                 else r)
       in (fn _ => "%cc"
          ) (r, ty)
       end

   and showMEMWithType (r, ty) = let
          val r = (if (r <= 66)
                 then (r - 67)
                 else r)
       in (fn (r, _) => "m" ^ (Int.toString r)
          ) (r, ty)
       end

   and showCTRLWithType (r, ty) = let
          val r = (if (r <= 66)
                 then (r - 67)
                 else r)
       in (fn (r, _) => "ctrl" ^ (Int.toString r)
          ) (r, ty)
       end

   fun showGP r = showGPWithType (r, 64)
   fun showFP r = showFPWithType (r, 32)
   fun showY r = showYWithType (r, 64)
   fun showPSR r = showPSRWithType (r, 64)
   fun showFSR r = showFSRWithType (r, 64)
   fun showCC r = showCCWithType (r, 64)
   fun showMEM r = showMEMWithType (r, 8)
   fun showCTRL r = showCTRLWithType (r, 8)
   fun toStringWithType GP = showGPWithType
     | toStringWithType FP = showFPWithType
     | toStringWithType Y = showYWithType
     | toStringWithType PSR = showPSRWithType
     | toStringWithType FSR = showFSRWithType
     | toStringWithType CC = showCCWithType
     | toStringWithType MEM = showMEMWithType
     | toStringWithType CTRL = showCTRLWithType
     | toStringWithType UNKNOWN = (fn (r, ty) => "unknown" ^ (Int.toString r)
                                  )
   fun toString GP = showGP
     | toString FP = showFP
     | toString Y = showY
     | toString PSR = showPSR
     | toString FSR = showFSR
     | toString CC = showCC
     | toString MEM = showMEM
     | toString CTRL = showCTRL
     | toString UNKNOWN = (fn r => "unknown" ^ (Int.toString r)
                          )
   val cellsetnames = ["GP", "FP", "PSR"]
   val empty = ([], [], [])
   fun addCell GP = addGP
     | addCell FP = addFP
     | addCell PSR = addPSR
     | addCell CC = addGP
     | addCell _ = error "addCell"
   and rmvCell GP = rmvGP
     | rmvCell FP = rmvFP
     | rmvCell PSR = rmvPSR
     | rmvCell CC = rmvGP
     | rmvCell _ = error "rmvCell"
   and getCell GP = getGP
     | getCell FP = getFP
     | getCell PSR = getPSR
     | getCell CC = getGP
     | getCell _ = error "getCell"
   and updateCell GP = updateGP
     | updateCell FP = updateFP
     | updateCell PSR = updatePSR
     | updateCell CC = updateGP
     | updateCell _ = error "updateCell"
   and addGP (r, (setGP, setFP, setPSR)) = (SL.enter (r, setGP), setFP, setPSR)
   and addFP (r, (setGP, setFP, setPSR)) = (setGP, SL.enter (r, setFP), setPSR)
   and addPSR (r, (setGP, setFP, setPSR)) = (setGP, setFP, SL.enter (r, setPSR))
   and rmvGP (r, (setGP, setFP, setPSR)) = (SL.rmv (r, setGP), setFP, setPSR)
   and rmvFP (r, (setGP, setFP, setPSR)) = (setGP, SL.rmv (r, setFP), setPSR)
   and rmvPSR (r, (setGP, setFP, setPSR)) = (setGP, setFP, SL.rmv (r, setPSR))
   and getGP (setGP, setFP, setPSR) = setGP
   and getFP (setGP, setFP, setPSR) = setFP
   and getPSR (setGP, setFP, setPSR) = setPSR
   and updateGP ((setGP, setFP, setPSR), r) = (r, setFP, setPSR)
   and updateFP ((setGP, setFP, setPSR), r) = (setGP, r, setPSR)
   and updatePSR ((setGP, setFP, setPSR), r) = (setGP, setFP, r)
   and cellsetToString (setGP, setFP, setPSR) = printTuple (cellsetnames, [printSet showGP setGP, printSet showFP setFP, printSet showPSR setPSR])
   and cellsetToString' regmap = (fn (setGP, setFP, setPSR) => cellsetToString (map regmap setGP, map regmap setFP, map regmap setPSR)
                                 )
   and cellsetToCells (setGP, setFP, setPSR) = setGP @ (setFP @ setPSR)
   val addReg = addGP
   val addFreg = addFP
   val rmvReg = rmvGP
   val rmvFreg = rmvFP
end

