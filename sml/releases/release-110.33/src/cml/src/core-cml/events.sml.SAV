(* events.sml
 *
 * COPYRIGHT (c) 1995 AT&T Bell Laboratories.
 *
 * The representation of event values and the event combinators.
 *)

structure Events (*: EVENTS*) =
  struct

    structure Q = Queue
    structure S = Scheduler

    structure Rep : sig
	datatype cvar = CVAR of cvar_state ref
	and cvar_state
	  = CVAR_unset of (RepTypes.thread_id * unit cont) list
	  | CVAR_set
	datatype 'a base_evt = BASE_EVT of {
	      pollFn  : unit -> bool,
	      doFn    : unit -> 'a,
	      blockFn : (bool ref * (unit -> unit)) -> 'a
	    }
	datatype 'a event
	  = EVT of ('a base_evt list)
	  | GUARD of (unit -> 'a event)
	  | W_NACK of unit -> {
		baseEvts : ('a base_evt * bool ref) list,
		nacks: (bool ref list * cvar) list,
		allFlgs : bool ref list
	      }
      end = RepTypes
    open Rep

    fun baseEvt arg = EVT[BASE_EVT arg]

  (* the event constructor for waiting on a cvar *)
    fun getCVarEvt (CVAR(state)) = let
	  fun pollFn () = (case !state
		 of CVAR_set => true
		  | _ => false
		(* end case *))
	  fun doFn () = ()
	  fun blockFn (dirtyFlg, next) = raise Fail "unimplemented"
	  in
	    baseEvt{pollFn=pollFn, doFn=doFn, blockFn=blockFn}
	  end

    val guard = GUARD

  (* force the evaluation of any guards in an event value. *)
    fun force (GUARD g) = force (g ())
      | force evt = evt

  (* evaluate a W_NACK event *)
    fun evalWNack (f : unit event -> 'a event) = let
	  val cv = CVAR(ref(CVAR_unset []))
	  fun eval (EVT[bev]) = let
		val flg = ref true
		val flgs = [flg]
		in
		  {baseEvts = [(bev, flg)], nacks=[(flgs, cv)], allFlgs=flgs}
		end
	    | eval (EVT el) = let
		fun unzipMap ([], bevs, flgs) = (bevs, flgs)
		  | unzipMap (bev::r, bevs, flgs) = let val flg = ref true
		      in
			unzipMap (r, (bev, flg)::bevs, flg::flgs)
		      end
		val (bevs, flgs) = unzipMap (el, [], [])
		in
		  {baseEvts = bevs, nacks = [(flgs, cv)], allFlgs=flgs}
		end
	    | eval (GUARD g) = eval (g ())
	    | eval (W_NACK f') = let
		val {baseEvts, nacks, allFlgs} = f' ()
		in
		  { baseEvts = baseEvts,
		    nacks = (allFlgs, cv) :: nacks,
		    allFlgs = allFlgs
		  }
		end
	  in
	    eval (f (getCVarEvt cv))
	  end

    fun withNack f = W_NACK(fn () => evalWNack f)

    fun choose [] = EVT[]
      | choose [evt] = evt
      | choose (el : 'a event list) = let
	  fun eval ([], bevs, nacks, allFlgs) =
		{baseEvts=bevs, nacks=nacks, allFlgs=allFlgs}
	    | eval (GUARD g :: r, bevs, nacks, allFlgs) =
		eval (g() :: r, bevs, nacks, allFlgs)
	    | eval (W_NACK f :: r, bevs, nacks, allFlgs) = let
		val {baseEvts, nacks=nacks', allFlgs=flgs'} = f()
		in
		  eval (r, baseEvts @ bevs, nacks' @ nacks, flgs' @ allFlgs)
		end
	    | eval (EVT el :: r, bevs, nacks, allFlgs) = let
		val flg = ref true
		val el' = map (fn bev => (bev, flg)) el
		in
		  eval (r, el' @ bevs, nacks, flg::allFlgs)
		end
	  fun f ([], el, [], _) = EVT el
	    | f ([], [], gl, true) = W_NACK(fn () => eval (rev gl, [], [], []))
	    | f ([], bevs, gl, true) = let
		fun f' () = let
		      val flg = ref true
		      val bevs' = map (fn bev => (bev, flg)) bevs
		      val {baseEvts, nacks, allFlgs} = eval (rev gl, [], [], [])
		      in
			{ baseEvts = bevs' @ baseEvts,
			  nacks = nacks,
			  allFlgs = flg::allFlgs
			}
		      end
		in
		  W_NACK f'
		end
	    | f ([], [], gl, false) =
		GUARD(fn () => choose(map force (rev gl)))
	    | f ([], el, gl, false) =
		GUARD(fn () => choose(EVT el :: (map force (rev gl))))
	    | f (EVT[] :: r, el, gl, hasNack) =
		f (r, el, gl, hasNack)
	    | f (EVT[bev] :: r, el, gl, hasNack) =
		f (r, bev::el, gl, hasNack)
	    | f (EVT bevs :: r, el, gl, hasNack) =
		f (r, bevs @ el, gl, hasNack)
	    | f (GUARD g :: r, el, gl, hasNack) =
		f (r, el, (GUARD g)::gl, hasNack)
	    | f (W_NACK n :: r, el, gl, hasNack) =
		f (r, el, (W_NACK n)::gl, true)
	  in
	    f (el, [], [], false)
	  end

    fun wrap (evt, wfn) = let
	  fun wrapBaseEvt (BASE_EVT{pollFn, doFn, blockFn}) = BASE_EVT{
		  pollFn = pollFn,
		  doFn = wfn o doFn,
		  blockFn = wfn o blockFn
		}
	  in
	    case evt
	     of (EVT[bev]) => EVT[wrapBaseEvt bev]
	      | (EVT bevs) => EVT(map wrapBaseEvt bevs)
	      | (GUARD g) => GUARD(fn () => wrap(g(), wfn))
	      | (W_NACK f) => let
		  fun f' () = let val {baseEvts, nacks, allFlgs} = f()
			in
			  { baseEvts =
			      map (fn (bev, flg) => (wrapBaseEvt bev, flg))
				baseEvts,
			    nacks = nacks,
			    allFlgs = allFlgs
			  }
			end
		  in
		    W_NACK f'
		  end
	  end

    fun wrapHandler (evt, h) = raise Fail "wrapHandler unimplemented"

(****
    fun syncOnEvts [] = ?
      | syncOnEvts [BASE_EVT{pollFn, doFn, blockFn}] = (
	  atomicBegin ();
	  if (pollFn ())
	    then doFn()
	    else blockFn(ref false, atomicDispatch))
      | syncOnEvts bevs = let
	  fun ext ([], blockFns) = capture (fn k => let
		val escape = escape k
		val dirtyFlg = ref false
		fun log [] = atomicDispatch ()
		  | log (blockFn :: r) =
		      escape (blockFn (dirtyFlg, fn () => log r))
		in
		  log blockFns; error "[log]"
		end
	    | ext (BASE_EVT{pollFn, blockFn, doFn} :: r, blockFns) =
		if (pollFn ())
		  then extRdy (r, [doFn], 1)
		  else ext (r, blockFn::blockFns)
	  and extRdy ([], doFns, n) = selectDoFn (doFns, n)
	    | extRdy (BASE_EVT{pollFn, doFn, ...} :: r, doFns, n) =
		if (pollFn ())
		  then extRdy (r, doFn::doFns, n+1)
		  else extRdy (r, doFns, n)
	  in
	    atomicBegin();
	    ext (bevs, [])
	  end

    fun sync ev = (case (force ev)
	   of (EVT el) => syncOnEvts el
	    | (W_NACK f) => let
		val {baseEvts, nacks, ...} = f()
		in
		end
	  (* end case *))
****)

    fun select evts = raise Fail "select unimplemented"

    fun poll evt = raise Fail "poll unimplemented"

  end;

