#!@SHELL@
#
# .arch-n-opsys [-32 | -64] -- get architecture and system info
#
# Running `eval .arch-n-opsys` will define the following shell variables:
#
#	ARCH		-- one of ppc, sparc, or x86
#	OPSYS		-- one of aix, cygwin, darwin, freebsd, linux, mklinux, netbsd,
#			   sunos, solaris, win32
#	HEAP_SUFFIX	-- usually $ARCH-$OPSYS, but in some cases the OPSYS is replaced
#			   by $HEAP_OPSYS
#
# Note that the size argument must be '-64' (if given)
#

export PATH
PATH="/bin:/usr/bin"

# check for bogus -32 option
#
case x"$1" in
  x-32) exit 1 ;;
  *) ;;
esac

case `uname -s` in
  Darwin)
    case `uname -p` in
      i386)
	ARCH=amd64
        OPSYS=darwin
	case `uname -r` in
	  16*) ;; # macOS 10.12 Sierra
	  17*) ;; # macOS 10.13 High Sierra
	  18*) ;; # macOS 10.14 Mojave
	  19*) REQUIRE_64BIT=yes ;; # macOS 10.15 Catalina
	  20*) REQUIRE_64BIT=yes ;; # macOS 11 Big Sur
	  21*) REQUIRE_64BIT=yes ;; # macOS 12 Monterey
	  22*) REQUIRE_64BIT=yes ;; # macOS 13 Ventura
          *) exit 1 ;;
        esac
      arm)
	# we are going to try to use Rosetta until we have native arm64 support
	ARCH="amd64"
	OPSYS=darwin;
	HEAP_OPSYS=darwin
	;;
    esac
    ;;
  Linux)
    OPSYS=linux
    case `uname -m` in
      x86_64)
	ARCH=amd64
	;;
      *) exit 1;;
    esac
    ;;
  FreeBSD)
    OPSYS=freebsd
    HEAP_OPSYS=bsd
    case `uname -m` in
      x86_64) ARCH=amd64 ;;
      amd64) x86 ARCH=amd64 ;;
      *) exit 1 ;;
    esac
    ;;
  NetBSD)
    case `uname -r` in
      1.*) exit 1 ;;
      2.*) exit 1 ;;
      *) OPSYS=netbsd ;;
    esac
    HEAP_OPSYS=bsd
    case `uname -p` in
      x86_64) ARCH=amd64 ;;
      *) exit 1;;
    esac
    ;;
  OpenBSD)
    OPSYS=openbsd
    HEAP_OPSYS=bsd
    case `uname -p` in
      x86_64) ARCH=amd64 ;;
      *) exit 1;;
    esac
    ;;
  *) exit 1;;
esac

if [ "$HEAP_OPSYS" = "" ]; then
  HEAP_SUFFIX="$ARCH-$OPSYS"
else
  HEAP_SUFFIX="$ARCH-$HEAP_OPSYS"
fi

echo "ARCH=$ARCH; OPSYS=$OPSYS; HEAP_SUFFIX=$HEAP_SUFFIX"
