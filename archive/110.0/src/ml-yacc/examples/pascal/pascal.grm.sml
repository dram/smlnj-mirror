functor PascalLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : Pascal_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct

end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\207\000\006\000\206\000\007\000\188\001\008\000\188\001\
\\009\000\188\001\010\000\188\001\011\000\188\001\022\000\203\000\
\\025\000\188\001\026\000\202\000\035\000\188\001\036\000\188\001\
\\038\000\188\001\043\000\188\001\044\000\188\001\050\000\188\001\
\\051\000\188\001\052\000\188\001\053\000\188\001\056\000\188\001\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\001\000\001\000\207\000\006\000\206\000\007\000\205\000\019\000\204\000\
\\022\000\203\000\026\000\202\000\058\000\201\000\059\000\200\000\
\\060\000\199\000\061\000\198\000\062\000\197\000\063\000\196\000\
\\065\000\195\000\066\000\194\000\067\000\193\000\000\000\
\\001\000\001\000\207\000\006\000\206\000\007\000\045\001\019\000\204\000\
\\022\000\203\000\026\000\202\000\058\000\201\000\059\000\200\000\
\\060\000\199\000\061\000\198\000\062\000\197\000\063\000\196\000\
\\065\000\195\000\066\000\194\000\067\000\193\000\000\000\
\\001\000\001\000\207\000\006\000\206\000\007\000\046\001\019\000\204\000\
\\022\000\203\000\026\000\202\000\058\000\201\000\059\000\200\000\
\\060\000\199\000\061\000\198\000\062\000\197\000\063\000\196\000\
\\065\000\195\000\066\000\194\000\067\000\193\000\000\000\
\\001\000\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\025\000\227\000\026\000\202\000\058\000\201\000\059\000\200\000\
\\060\000\199\000\061\000\198\000\062\000\197\000\063\000\196\000\
\\065\000\195\000\066\000\194\000\067\000\193\000\000\000\
\\001\000\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\035\000\218\000\058\000\201\000\059\000\200\000\
\\060\000\199\000\061\000\198\000\062\000\197\000\063\000\196\000\
\\065\000\195\000\066\000\194\000\067\000\193\000\000\000\
\\001\000\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\050\000\009\001\058\000\201\000\059\000\200\000\
\\060\000\199\000\061\000\198\000\062\000\197\000\063\000\196\000\
\\065\000\195\000\066\000\194\000\067\000\193\000\000\000\
\\001\000\002\000\101\000\012\000\100\000\017\000\099\000\020\000\098\000\
\\024\000\097\000\027\000\096\000\031\000\095\000\033\000\094\000\
\\034\000\093\000\042\000\092\000\049\000\091\000\054\000\090\000\
\\061\000\089\000\062\000\088\000\000\000\
\\001\000\002\000\101\000\012\000\100\000\031\000\095\000\033\000\094\000\000\000\
\\001\000\003\000\038\000\005\000\021\000\015\000\020\000\021\000\019\000\
\\029\000\018\000\037\000\017\000\039\000\016\000\000\000\
\\001\000\007\000\188\000\052\000\187\000\000\000\
\\001\000\008\000\159\000\000\000\
\\001\000\009\000\226\000\036\000\225\000\000\000\
\\001\000\011\000\117\000\051\000\116\000\000\000\
\\001\000\011\000\228\000\051\000\116\000\000\000\
\\001\000\011\000\243\000\000\000\
\\001\000\011\000\048\001\051\000\047\001\000\000\
\\001\000\015\000\080\000\017\000\029\000\029\000\079\000\039\000\078\000\000\000\
\\001\000\017\000\023\000\000\000\
\\001\000\017\000\024\000\000\000\
\\001\000\017\000\029\000\000\000\
\\001\000\017\000\033\000\000\000\
\\001\000\017\000\036\000\000\000\
\\001\000\017\000\099\000\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\049\000\091\000\061\000\089\000\062\000\088\000\000\000\
\\001\000\017\000\102\000\000\000\
\\001\000\017\000\105\000\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\061\000\089\000\062\000\088\000\000\000\
\\001\000\017\000\110\000\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\061\000\089\000\062\000\088\000\000\000\
\\001\000\017\000\120\000\000\000\
\\001\000\017\000\135\000\020\000\134\000\023\000\133\000\024\000\132\000\
\\028\000\131\000\034\000\130\000\042\000\129\000\049\000\128\000\
\\055\000\127\000\056\000\213\000\057\000\126\000\061\000\125\000\
\\062\000\124\000\000\000\
\\001\000\017\000\135\000\020\000\134\000\023\000\133\000\024\000\132\000\
\\028\000\131\000\034\000\130\000\042\000\129\000\049\000\128\000\
\\055\000\127\000\057\000\126\000\061\000\125\000\062\000\124\000\000\000\
\\001\000\017\000\146\000\000\000\
\\001\000\017\000\161\000\020\000\098\000\024\000\097\000\042\000\092\000\000\000\
\\001\000\017\000\163\000\020\000\098\000\024\000\097\000\042\000\092\000\000\000\
\\001\000\017\000\164\000\000\000\
\\001\000\017\000\185\000\000\000\
\\001\000\017\000\236\000\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\061\000\089\000\062\000\088\000\000\000\
\\001\000\017\000\245\000\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\061\000\089\000\062\000\088\000\000\000\
\\001\000\017\000\253\000\000\000\
\\001\000\017\000\035\001\000\000\
\\001\000\017\000\064\001\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\061\000\089\000\062\000\088\000\000\000\
\\001\000\017\000\069\001\000\000\
\\001\000\020\000\035\000\000\000\
\\001\000\020\000\108\000\000\000\
\\001\000\020\000\144\000\000\000\
\\001\000\025\000\166\000\000\000\
\\001\000\025\000\173\000\000\000\
\\001\000\025\000\052\001\000\000\
\\001\000\025\000\054\001\000\000\
\\001\000\025\000\074\001\000\000\
\\001\000\038\000\216\000\051\000\116\000\000\000\
\\001\000\048\000\055\000\000\000\
\\001\000\048\000\143\000\053\000\141\000\054\000\140\000\055\000\139\000\000\000\
\\001\000\049\000\040\000\051\000\039\000\000\000\
\\001\000\049\000\076\001\000\000\
\\001\000\050\000\149\000\052\000\047\000\000\000\
\\001\000\050\000\154\000\051\000\153\000\000\000\
\\001\000\050\000\237\000\052\000\047\000\000\000\
\\001\000\050\000\016\001\052\000\015\001\000\000\
\\001\000\050\000\041\001\052\000\015\001\000\000\
\\001\000\050\000\079\001\000\000\
\\001\000\051\000\043\000\000\000\
\\001\000\051\000\044\000\000\000\
\\001\000\051\000\053\000\052\000\052\000\000\000\
\\001\000\051\000\081\000\000\000\
\\001\000\051\000\150\000\000\000\
\\001\000\051\000\158\000\000\000\
\\001\000\051\000\175\000\000\000\
\\001\000\051\000\176\000\000\000\
\\001\000\051\000\177\000\000\000\
\\001\000\051\000\178\000\000\000\
\\001\000\051\000\179\000\000\000\
\\001\000\051\000\180\000\000\000\
\\001\000\051\000\181\000\000\000\
\\001\000\051\000\229\000\000\000\
\\001\000\052\000\047\000\053\000\046\000\000\000\
\\001\000\052\000\047\000\053\000\050\000\000\000\
\\001\000\052\000\047\000\053\000\152\000\000\000\
\\001\000\052\000\047\000\053\000\232\000\000\000\
\\001\000\052\000\047\000\053\000\239\000\000\000\
\\001\000\052\000\250\000\056\000\249\000\000\000\
\\001\000\052\000\250\000\056\000\013\001\000\000\
\\001\000\052\000\007\001\056\000\006\001\000\000\
\\001\000\052\000\037\001\056\000\036\001\000\000\
\\001\000\052\000\050\001\053\000\049\001\000\000\
\\001\000\052\000\050\001\053\000\073\001\000\000\
\\001\000\053\000\114\000\000\000\
\\001\000\053\000\137\000\000\000\
\\001\000\055\000\174\000\000\000\
\\001\000\059\000\048\000\000\000\
\\001\000\059\000\049\000\000\000\
\\001\000\059\000\051\000\000\000\
\\001\000\059\000\054\000\000\000\
\\001\000\059\000\186\000\000\000\
\\001\000\059\000\220\000\000\000\
\\001\000\068\000\000\000\000\000\
\\081\001\000\000\
\\082\001\000\000\
\\083\001\005\000\021\000\015\000\020\000\021\000\019\000\029\000\018\000\
\\037\000\017\000\039\000\016\000\000\000\
\\084\001\000\000\
\\085\001\000\000\
\\086\001\000\000\
\\087\001\000\000\
\\088\001\000\000\
\\088\001\030\000\006\000\000\000\
\\089\001\000\000\
\\090\001\017\000\031\000\000\000\
\\091\001\017\000\030\000\000\000\
\\092\001\017\000\029\000\000\000\
\\093\001\000\000\
\\094\001\000\000\
\\095\001\000\000\
\\096\001\000\000\
\\097\001\000\000\
\\098\001\000\000\
\\099\001\000\000\
\\100\001\000\000\
\\101\001\000\000\
\\102\001\000\000\
\\103\001\000\000\
\\104\001\000\000\
\\105\001\000\000\
\\106\001\000\000\
\\107\001\000\000\
\\108\001\014\000\026\000\047\000\025\000\000\000\
\\109\001\000\000\
\\110\001\000\000\
\\111\001\000\000\
\\112\001\000\000\
\\113\001\049\000\042\000\000\000\
\\113\001\049\000\042\000\052\000\047\000\000\000\
\\114\001\000\000\
\\115\001\000\000\
\\116\001\000\000\
\\117\001\000\000\
\\118\001\000\000\
\\119\001\053\000\074\000\000\000\
\\120\001\000\000\
\\121\001\000\000\
\\122\001\000\000\
\\123\001\000\000\
\\124\001\000\000\
\\125\001\000\000\
\\126\001\000\000\
\\127\001\000\000\
\\128\001\000\000\
\\129\001\000\000\
\\130\001\000\000\
\\131\001\000\000\
\\132\001\000\000\
\\133\001\000\000\
\\134\001\000\000\
\\135\001\000\000\
\\136\001\000\000\
\\137\001\000\000\
\\138\001\000\000\
\\139\001\000\000\
\\140\001\000\000\
\\141\001\000\000\
\\142\001\000\000\
\\143\001\000\000\
\\144\001\000\000\
\\145\001\000\000\
\\146\001\000\000\
\\147\001\000\000\
\\148\001\000\000\
\\149\001\000\000\
\\150\001\000\000\
\\151\001\000\000\
\\152\001\000\000\
\\153\001\000\000\
\\154\001\017\000\029\000\000\000\
\\155\001\000\000\
\\156\001\004\000\242\000\051\000\241\000\000\000\
\\157\001\051\000\072\001\000\000\
\\158\001\051\000\072\001\000\000\
\\159\001\000\000\
\\160\001\000\000\
\\161\001\017\000\028\001\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\061\000\089\000\062\000\088\000\000\000\
\\162\001\000\000\
\\163\001\000\000\
\\164\001\000\000\
\\165\001\000\000\
\\166\001\000\000\
\\167\001\000\000\
\\168\001\000\000\
\\169\001\000\000\
\\170\001\017\000\028\001\020\000\098\000\024\000\097\000\034\000\093\000\
\\042\000\092\000\045\000\027\001\061\000\089\000\062\000\088\000\000\000\
\\171\001\003\000\071\000\004\000\070\000\013\000\069\000\016\000\068\000\
\\017\000\067\000\018\000\066\000\020\000\065\000\032\000\064\000\
\\040\000\063\000\041\000\062\000\000\000\
\\172\001\000\000\
\\173\001\048\000\143\000\049\000\142\000\053\000\141\000\054\000\140\000\
\\055\000\139\000\000\000\
\\174\001\000\000\
\\175\001\000\000\
\\176\001\000\000\
\\177\001\000\000\
\\178\001\000\000\
\\179\001\000\000\
\\180\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\058\000\201\000\059\000\200\000\060\000\199\000\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\181\001\000\000\
\\182\001\000\000\
\\183\001\000\000\
\\184\001\010\000\042\001\000\000\
\\185\001\000\000\
\\186\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\058\000\201\000\059\000\200\000\060\000\199\000\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\187\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\058\000\201\000\059\000\200\000\060\000\199\000\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\189\001\001\000\207\000\006\000\206\000\022\000\203\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\190\001\001\000\207\000\006\000\206\000\022\000\203\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\191\001\001\000\207\000\006\000\206\000\022\000\203\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\192\001\000\000\
\\193\001\000\000\
\\194\001\000\000\
\\195\001\000\000\
\\196\001\000\000\
\\197\001\000\000\
\\198\001\000\000\
\\199\001\048\000\143\000\049\000\215\000\054\000\140\000\055\000\139\000\000\000\
\\200\001\000\000\
\\201\001\000\000\
\\202\001\000\000\
\\203\001\000\000\
\\204\001\000\000\
\\205\001\000\000\
\\206\001\000\000\
\\207\001\001\000\207\000\006\000\206\000\008\000\008\001\019\000\204\000\
\\022\000\203\000\026\000\202\000\058\000\201\000\059\000\200\000\
\\060\000\199\000\061\000\198\000\062\000\197\000\063\000\196\000\
\\065\000\195\000\066\000\194\000\067\000\193\000\000\000\
\\208\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\058\000\201\000\059\000\200\000\060\000\199\000\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\209\001\048\000\113\000\054\000\112\000\055\000\111\000\000\000\
\\210\001\000\000\
\\211\001\000\000\
\\212\001\000\000\
\\213\001\000\000\
\\214\001\000\000\
\\215\001\000\000\
\\216\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\043\000\020\001\044\000\019\001\053\000\018\001\
\\058\000\201\000\059\000\200\000\060\000\199\000\061\000\198\000\
\\062\000\197\000\063\000\196\000\065\000\195\000\066\000\194\000\
\\067\000\193\000\000\000\
\\217\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\043\000\020\001\044\000\019\001\053\000\058\001\
\\058\000\201\000\059\000\200\000\060\000\199\000\061\000\198\000\
\\062\000\197\000\063\000\196\000\065\000\195\000\066\000\194\000\
\\067\000\193\000\000\000\
\\218\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\058\000\201\000\059\000\200\000\060\000\199\000\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\219\001\000\000\
\\220\001\000\000\
\\221\001\000\000\
\\222\001\000\000\
\\223\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\058\000\201\000\059\000\200\000\060\000\199\000\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\224\001\001\000\207\000\006\000\206\000\019\000\204\000\022\000\203\000\
\\026\000\202\000\058\000\201\000\059\000\200\000\060\000\199\000\
\\061\000\198\000\062\000\197\000\063\000\196\000\065\000\195\000\
\\066\000\194\000\067\000\193\000\000\000\
\\225\001\000\000\
\\226\001\000\000\
\\227\001\000\000\
\\228\001\059\000\004\001\060\000\003\001\000\000\
\\229\001\059\000\002\001\000\000\
\\230\001\000\000\
\\231\001\000\000\
\\232\001\000\000\
\\233\001\000\000\
\\234\001\000\000\
\\235\001\000\000\
\\236\001\000\000\
\\237\001\000\000\
\\238\001\000\000\
\\239\001\000\000\
\\240\001\000\000\
\\241\001\000\000\
\\242\001\000\000\
\\243\001\000\000\
\\244\001\000\000\
\\245\001\000\000\
\\246\001\000\000\
\\247\001\000\000\
\\248\001\048\000\143\000\054\000\140\000\055\000\139\000\000\000\
\\249\001\048\000\143\000\054\000\140\000\055\000\139\000\000\000\
\\250\001\000\000\
\\251\001\000\000\
\\253\001\000\000\
\\253\001\008\000\172\000\000\000\
\\253\001\053\000\053\001\000\000\
\\002\002\000\000\
\"
val actionRowNumbers =
"\103\000\097\000\102\000\095\000\
\\018\000\019\000\123\000\102\000\
\\108\000\107\000\106\000\105\000\
\\104\000\101\000\020\000\021\000\
\\126\000\041\000\125\000\022\000\
\\009\000\052\000\128\000\060\000\
\\061\000\009\000\074\000\009\001\
\\088\000\089\000\075\000\090\000\
\\062\000\110\000\091\000\050\000\
\\187\000\099\000\020\000\135\000\
\\017\000\121\000\120\000\063\000\
\\007\000\024\000\007\000\025\000\
\\007\000\007\000\042\000\109\000\
\\026\000\096\000\224\000\085\000\
\\191\000\179\000\187\000\013\000\
\\027\000\029\000\187\000\086\000\
\\029\000\189\000\043\000\030\000\
\\029\000\187\000\054\000\064\000\
\\007\000\076\000\055\000\136\000\
\\020\000\020\000\020\000\122\000\
\\155\000\153\000\151\000\065\000\
\\139\000\011\000\031\000\032\000\
\\033\000\020\000\145\000\138\000\
\\044\000\170\000\008\000\146\000\
\\144\000\012\001\045\000\087\000\
\\010\001\066\000\067\000\068\000\
\\069\000\070\000\111\000\071\000\
\\072\000\029\000\230\000\034\000\
\\092\000\180\000\181\000\100\000\
\\010\000\005\001\007\001\029\000\
\\213\000\001\000\029\000\029\000\
\\004\001\028\000\029\000\211\000\
\\209\000\208\000\212\000\003\001\
\\210\000\214\000\049\000\187\000\
\\005\000\029\000\229\000\093\000\
\\029\000\034\000\199\000\012\000\
\\051\000\004\000\014\000\073\000\
\\124\000\134\000\007\000\017\000\
\\127\000\077\000\129\000\129\000\
\\119\000\035\000\141\000\143\000\
\\140\000\142\000\152\000\056\000\
\\023\000\078\000\168\000\172\000\
\\015\000\154\000\036\000\007\000\
\\023\000\117\000\113\000\115\000\
\\118\000\116\000\112\000\114\000\
\\079\000\238\000\228\000\014\001\
\\029\000\037\000\187\000\217\000\
\\029\000\029\000\029\000\002\001\
\\254\000\253\000\252\000\250\000\
\\249\000\244\000\242\000\243\000\
\\251\000\000\001\248\000\187\000\
\\255\000\001\001\205\000\204\000\
\\220\000\081\000\222\000\219\000\
\\006\000\029\000\029\000\188\000\
\\187\000\080\000\029\000\057\000\
\\240\000\231\000\227\000\029\000\
\\029\000\186\000\192\000\098\000\
\\130\000\137\000\007\000\135\000\
\\135\000\157\000\159\000\156\000\
\\163\000\007\000\167\000\170\000\
\\038\000\164\000\158\000\160\000\
\\162\000\082\000\165\000\226\000\
\\029\000\202\000\006\001\008\001\
\\194\000\207\000\206\000\000\000\
\\247\000\245\000\246\000\195\000\
\\218\000\029\000\029\000\216\000\
\\058\000\196\000\200\000\225\000\
\\203\000\029\000\190\000\234\000\
\\029\000\237\000\236\000\002\000\
\\003\000\182\000\016\000\083\000\
\\147\000\187\000\149\000\131\000\
\\132\000\133\000\171\000\169\000\
\\046\000\013\001\047\000\023\000\
\\239\000\221\000\223\000\215\000\
\\187\000\241\000\232\000\187\000\
\\187\000\186\000\193\000\187\000\
\\039\000\185\000\177\000\040\000\
\\007\000\166\000\201\000\235\000\
\\029\000\198\000\197\000\183\000\
\\184\000\148\000\150\000\175\000\
\\173\000\084\000\048\000\011\001\
\\161\000\233\000\177\000\053\000\
\\177\000\176\000\170\000\174\000\
\\059\000\178\000\094\000"
val gotoT =
"\
\\001\000\003\000\002\000\002\000\004\000\001\000\061\000\078\001\000\000\
\\005\000\013\000\006\000\012\000\008\000\011\000\009\000\010\000\
\\010\000\009\000\011\000\008\000\012\000\007\000\013\000\006\000\
\\014\000\005\000\000\000\
\\004\000\020\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\004\000\025\000\000\000\
\\000\000\
\\052\000\026\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\030\000\000\000\
\\000\000\
\\000\000\
\\007\000\032\000\000\000\
\\000\000\
\\000\000\
\\003\000\035\000\005\000\013\000\006\000\012\000\008\000\011\000\
\\009\000\010\000\010\000\009\000\011\000\008\000\012\000\007\000\
\\013\000\006\000\014\000\005\000\000\000\
\\000\000\
\\015\000\039\000\000\000\
\\000\000\
\\000\000\
\\003\000\043\000\005\000\013\000\006\000\012\000\008\000\011\000\
\\009\000\010\000\010\000\009\000\011\000\008\000\012\000\007\000\
\\013\000\006\000\014\000\005\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\032\000\059\000\033\000\058\000\036\000\057\000\037\000\056\000\
\\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\052\000\070\000\000\000\
\\017\000\071\000\000\000\
\\016\000\075\000\018\000\074\000\052\000\073\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\022\000\083\000\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\022\000\101\000\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\019\000\102\000\020\000\084\000\000\000\
\\019\000\085\000\020\000\084\000\022\000\104\000\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\019\000\085\000\020\000\084\000\022\000\105\000\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\000\000\
\\000\000\
\\019\000\107\000\020\000\084\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\113\000\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\041\000\117\000\042\000\054\000\051\000\116\000\000\000\
\\038\000\121\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\032\000\134\000\033\000\058\000\036\000\057\000\037\000\056\000\
\\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\038\000\136\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\037\000\143\000\041\000\055\000\042\000\054\000\000\000\
\\038\000\145\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\032\000\146\000\033\000\058\000\036\000\057\000\037\000\056\000\
\\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\022\000\149\000\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\052\000\153\000\000\000\
\\052\000\154\000\000\000\
\\052\000\155\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\020\000\158\000\000\000\
\\020\000\160\000\000\000\
\\000\000\
\\052\000\163\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\026\000\168\000\027\000\167\000\028\000\166\000\052\000\165\000\000\000\
\\024\000\169\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\181\000\041\000\120\000\042\000\054\000\045\000\180\000\
\\050\000\119\000\000\000\
\\000\000\
\\059\000\182\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\187\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\038\000\206\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\038\000\207\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\038\000\210\000\039\000\209\000\040\000\208\000\041\000\120\000\
\\042\000\054\000\050\000\119\000\000\000\
\\038\000\212\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\215\000\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\038\000\181\000\041\000\120\000\042\000\054\000\045\000\217\000\
\\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\038\000\221\000\041\000\120\000\042\000\054\000\043\000\220\000\
\\046\000\219\000\050\000\119\000\000\000\
\\059\000\222\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\022\000\228\000\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\016\000\229\000\052\000\073\000\000\000\
\\000\000\
\\000\000\
\\015\000\231\000\000\000\
\\015\000\232\000\000\000\
\\000\000\
\\019\000\233\000\020\000\084\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\023\000\236\000\054\000\080\000\000\000\
\\000\000\
\\000\000\
\\029\000\238\000\000\000\
\\000\000\
\\000\000\
\\019\000\242\000\020\000\084\000\000\000\
\\019\000\085\000\020\000\084\000\022\000\244\000\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\019\000\085\000\020\000\084\000\023\000\246\000\025\000\245\000\
\\054\000\080\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\000\000\
\\038\000\249\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\041\000\250\000\042\000\054\000\000\000\
\\036\000\252\000\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\038\000\253\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\038\000\254\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\038\000\255\000\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\003\001\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\038\000\221\000\041\000\120\000\042\000\054\000\043\000\220\000\
\\046\000\008\001\050\000\119\000\000\000\
\\038\000\009\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\036\000\010\001\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\038\000\012\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\044\000\015\001\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\038\000\019\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\038\000\020\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\019\000\024\001\020\000\084\000\021\000\023\001\034\000\022\001\
\\035\000\021\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\022\000\027\001\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\017\000\028\001\000\000\
\\017\000\029\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\022\000\030\001\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\000\000\
\\028\000\031\001\052\000\165\000\000\000\
\\054\000\032\001\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\036\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\210\000\040\000\037\001\041\000\120\000\042\000\054\000\
\\050\000\119\000\000\000\
\\038\000\038\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\038\000\221\000\041\000\120\000\042\000\054\000\043\000\041\001\
\\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\038\000\042\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\036\000\049\001\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\019\000\085\000\020\000\084\000\023\000\053\001\054\000\080\000\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\000\000\
\\036\000\054\001\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\000\000\
\\044\000\055\001\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\036\000\057\001\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\036\000\058\001\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\019\000\024\001\020\000\084\000\021\000\023\001\035\000\059\001\000\000\
\\000\000\
\\036\000\060\001\037\000\056\000\041\000\055\000\042\000\054\000\000\000\
\\019\000\061\001\020\000\084\000\000\000\
\\000\000\
\\019\000\024\001\020\000\084\000\021\000\065\001\030\000\064\001\
\\031\000\063\001\000\000\
\\054\000\066\001\000\000\
\\019\000\085\000\020\000\084\000\022\000\068\001\023\000\082\000\
\\024\000\081\000\054\000\080\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\038\000\069\001\041\000\120\000\042\000\054\000\050\000\119\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\047\000\190\000\048\000\189\000\049\000\188\000\000\000\
\\019\000\024\001\020\000\084\000\021\000\065\001\031\000\073\001\000\000\
\\000\000\
\\019\000\024\001\020\000\084\000\021\000\065\001\030\000\075\001\
\\031\000\063\001\000\000\
\\000\000\
\\026\000\076\001\027\000\167\000\028\000\166\000\052\000\165\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 335
val numrules = 179
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit
end
type svalue = MlyValue.svalue
type result = unit
end
structure EC=
struct
open LrTable
val is_keyword =
fn (T 0) => true | (T 1) => true | (T 2) => true | (T 3) => true | (T 
4) => true | (T 5) => true | (T 6) => true | (T 8) => true | (T 9)
 => true | (T 10) => true | (T 11) => true | (T 12) => true | (T 13)
 => true | (T 14) => true | (T 15) => true | (T 17) => true | (T 18)
 => true | (T 20) => true | (T 21) => true | (T 22) => true | (T 24)
 => true | (T 25) => true | (T 26) => true | (T 27) => true | (T 28)
 => true | (T 29) => true | (T 30) => true | (T 31) => true | (T 32)
 => true | (T 33) => true | (T 34) => true | (T 35) => true | (T 36)
 => true | (T 37) => true | (T 38) => true | (T 39) => true | (T 40)
 => true | (T 42) => true | (T 43) => true | (T 46) => true | (T 66)
 => true | _ => false
val preferred_change = 
(nil
,(T 16) :: nil
)::
(nil
,(T 50) :: nil
)::
(nil
,(T 51) :: nil
)::
(nil
,(T 54) :: nil
)::
((T 50) :: nil
,(T 51) :: nil
)::
((T 51) :: nil
,(T 50) :: nil
)::
nil
val noShift = 
fn _ => false
val showTerminal =
fn (T 0) => "YAND"
  | (T 1) => "YARRAY"
  | (T 2) => "YBEGIN"
  | (T 3) => "YCASE"
  | (T 4) => "YCONST"
  | (T 5) => "YDIV"
  | (T 6) => "YDO"
  | (T 7) => "YDOTDOT"
  | (T 8) => "YTO"
  | (T 9) => "YELSE"
  | (T 10) => "YEND"
  | (T 11) => "YFILE"
  | (T 12) => "YFOR"
  | (T 13) => "YFORWARD"
  | (T 14) => "YPROCEDURE"
  | (T 15) => "YGOTO"
  | (T 16) => "YID"
  | (T 17) => "YIF"
  | (T 18) => "YIN"
  | (T 19) => "YINT"
  | (T 20) => "YLABEL"
  | (T 21) => "YMOD"
  | (T 22) => "YNOT"
  | (T 23) => "YNUMB"
  | (T 24) => "YOF"
  | (T 25) => "YOR"
  | (T 26) => "YPACKED"
  | (T 27) => "YNIL"
  | (T 28) => "YFUNCTION"
  | (T 29) => "YPROG"
  | (T 30) => "YRECORD"
  | (T 31) => "YREPEAT"
  | (T 32) => "YSET"
  | (T 33) => "YSTRING"
  | (T 34) => "YTHEN"
  | (T 35) => "YDOWNTO"
  | (T 36) => "YTYPE"
  | (T 37) => "YUNTIL"
  | (T 38) => "YVAR"
  | (T 39) => "YWHILE"
  | (T 40) => "YWITH"
  | (T 41) => "YBINT"
  | (T 42) => "YOCT"
  | (T 43) => "YHEX"
  | (T 44) => "YCASELAB"
  | (T 45) => "YILLCH"
  | (T 46) => "YEXTERN"
  | (T 47) => "YDOT"
  | (T 48) => "YLPAR"
  | (T 49) => "YRPAR"
  | (T 50) => "YSEMI"
  | (T 51) => "YCOMMA"
  | (T 52) => "YCOLON"
  | (T 53) => "YCARET"
  | (T 54) => "YLBRA"
  | (T 55) => "YRBRA"
  | (T 56) => "YTILDE"
  | (T 57) => "YLESS"
  | (T 58) => "YEQUAL"
  | (T 59) => "YGREATER"
  | (T 60) => "YPLUS"
  | (T 61) => "YMINUS"
  | (T 62) => "YBAR"
  | (T 63) => "UNARYSIGN"
  | (T 64) => "YSTAR"
  | (T 65) => "YSLASH"
  | (T 66) => "YAMP"
  | (T 67) => "EOF"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms = (T 0) :: (T 1) :: (T 2) :: (T 3) :: (T 4) :: (T 5) :: (T 6
) :: (T 7) :: (T 8) :: (T 9) :: (T 10) :: (T 11) :: (T 12) :: (T 13)
 :: (T 14) :: (T 15) :: (T 16) :: (T 17) :: (T 18) :: (T 19) :: (T 20)
 :: (T 21) :: (T 22) :: (T 23) :: (T 24) :: (T 25) :: (T 26) :: (T 27)
 :: (T 28) :: (T 29) :: (T 30) :: (T 31) :: (T 32) :: (T 33) :: (T 34)
 :: (T 35) :: (T 36) :: (T 37) :: (T 38) :: (T 39) :: (T 40) :: (T 41)
 :: (T 42) :: (T 43) :: (T 44) :: (T 45) :: (T 46) :: (T 47) :: (T 48)
 :: (T 49) :: (T 50) :: (T 51) :: (T 52) :: (T 53) :: (T 54) :: (T 55)
 :: (T 56) :: (T 57) :: (T 58) :: (T 59) :: (T 60) :: (T 61) :: (T 62)
 :: (T 63) :: (T 64) :: (T 65) :: (T 66) :: (T 67) :: nil
end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of (0,(_,(_,goal1left,goal1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 60,(result,goal1left,goal1right),rest671) end
| (1,(_,(_,_,YDOT1right))::_::_::(_,(_,prog_hedr1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 0,(result,prog_hedr1left,YDOT1right),rest671) end
| (2,(_,(_,decls1left,decls1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 0,(result,decls1left,decls1right),rest671) end
| (3,(_,(_,_,YSEMI1right))::_::_::_::_::(_,(_,YPROG1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 1,(result,YPROG1left,YSEMI1right),rest671) end
| (4,(_,(_,_,YSEMI1right))::_::(_,(_,YPROG1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 1,(result,YPROG1left,YSEMI1right),rest671) end
| (5,(_,(_,_,YEND1right))::_::(_,(_,YBEGIN1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 2,(result,YBEGIN1left,YEND1right),rest671) end
| (6,(_,(_,_,decl1right))::(_,(_,decls1left,_))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 3,(result,decls1left,decl1right),rest671) end
| (7,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 3,(result,defaultPos,defaultPos),rest671) end
| (8,(_,(_,labels1left,labels1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 4,(result,labels1left,labels1right),rest671) end
| (9,(_,(_,const_decl1left,const_decl1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 4,(result,const_decl1left,const_decl1right),rest671)
 end
| (10,(_,(_,type_decl1left,type_decl1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 4,(result,type_decl1left,type_decl1right),rest671) end
| (11,(_,(_,var_decl1left,var_decl1right))::rest671) => let val result
=MlyValue.ntVOID(())
 in (LrTable.NT 4,(result,var_decl1left,var_decl1right),rest671) end
| (12,(_,(_,proc_decl1left,proc_decl1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 4,(result,proc_decl1left,proc_decl1right),rest671) end
| (13,(_,(_,_,YSEMI1right))::_::(_,(_,YLABEL1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 5,(result,YLABEL1left,YSEMI1right),rest671) end
| (14,(_,(_,YINT1left,YINT1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 6,(result,YINT1left,YINT1right),rest671) end
| (15,(_,(_,_,YINT1right))::_::(_,(_,label_decl1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 6,(result,label_decl1left,YINT1right),rest671) end
| (16,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,YCONST1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 7,(result,YCONST1left,YSEMI1right),rest671) end
| (17,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,const_decl1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 7,(result,const_decl1left,YSEMI1right),rest671) end
| (18,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,YCONST1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 7,(result,YCONST1left,YSEMI1right),rest671) end
| (19,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,const_decl1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 7,(result,const_decl1left,YSEMI1right),rest671) end
| (20,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,YTYPE1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 8,(result,YTYPE1left,YSEMI1right),rest671) end
| (21,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,type_decl1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 8,(result,type_decl1left,YSEMI1right),rest671) end
| (22,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,YVAR1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 9,(result,YVAR1left,YSEMI1right),rest671) end
| (23,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,var_decl1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 9,(result,var_decl1left,YSEMI1right),rest671) end
| (24,(_,(_,_,YSEMI1right))::_::(_,(_,phead1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 10,(result,phead1left,YSEMI1right),rest671) end
| (25,(_,(_,_,YSEMI1right))::_::(_,(_,phead1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 10,(result,phead1left,YSEMI1right),rest671) end
| (26,(_,(_,_,YSEMI1right))::_::_::(_,(_,pheadres1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 10,(result,pheadres1left,YSEMI1right),rest671) end
| (27,(_,(_,phead1left,phead1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 11,(result,phead1left,phead1right),rest671) end
| (28,(_,(_,_,YSEMI1right))::_::_::_::(_,(_,porf1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 12,(result,porf1left,YSEMI1right),rest671) end
| (29,(_,(_,YPROCEDURE1left,YPROCEDURE1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 13,(result,YPROCEDURE1left,YPROCEDURE1right),rest671)
 end
| (30,(_,(_,YFUNCTION1left,YFUNCTION1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 13,(result,YFUNCTION1left,YFUNCTION1right),rest671)
 end
| (31,(_,(_,_,YRPAR1right))::_::(_,(_,YLPAR1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 14,(result,YLPAR1left,YRPAR1right),rest671) end
| (32,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 14,(result,defaultPos,defaultPos),rest671) end
| (33,(_,(_,_,type'1right))::_::(_,(_,id_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 15,(result,id_list1left,type'1right),rest671) end
| (34,(_,(_,_,type'1right))::_::_::(_,(_,YVAR1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 15,(result,YVAR1left,type'1right),rest671) end
| (35,(_,(_,_,ftype1right))::_::_::(_,(_,YFUNCTION1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 15,(result,YFUNCTION1left,ftype1right),rest671) end
| (36,(_,(_,_,ftype1right))::_::_::(_,(_,YPROCEDURE1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 15,(result,YPROCEDURE1left,ftype1right),rest671) end
| (37,(_,(_,_,type'1right))::(_,(_,YCOLON1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 16,(result,YCOLON1left,type'1right),rest671) end
| (38,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 16,(result,defaultPos,defaultPos),rest671) end
| (39,(_,(_,param1left,param1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 17,(result,param1left,param1right),rest671) end
| (40,(_,(_,_,param1right))::_::(_,(_,param_list1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 17,(result,param_list1left,param1right),rest671) end
| (41,(_,(_,YSTRING1left,YSTRING1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 18,(result,YSTRING1left,YSTRING1right),rest671) end
| (42,(_,(_,number1left,number1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 18,(result,number1left,number1right),rest671) end
| (43,(_,(_,_,number1right))::(_,(_,YPLUS1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 18,(result,YPLUS1left,number1right),rest671) end
| (44,(_,(_,_,number1right))::(_,(_,YMINUS1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 18,(result,YMINUS1left,number1right),rest671) end
| (45,(_,(_,_,YID1right))::(_,(_,YPLUS1left,_))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 18,(result,YPLUS1left,YID1right),rest671) end
| (46,(_,(_,_,YID1right))::(_,(_,YMINUS1left,_))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 18,(result,YMINUS1left,YID1right),rest671) end
| (47,(_,(_,YINT1left,YINT1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 19,(result,YINT1left,YINT1right),rest671) end
| (48,(_,(_,YBINT1left,YBINT1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 19,(result,YBINT1left,YBINT1right),rest671) end
| (49,(_,(_,YNUMB1left,YNUMB1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 19,(result,YNUMB1left,YNUMB1right),rest671) end
| (50,(_,(_,const1left,const1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 20,(result,const1left,const1right),rest671) end
| (51,(_,(_,_,const1right))::_::(_,(_,const_list1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 20,(result,const_list1left,const1right),rest671) end
| (52,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 20,(result,YID1left,YID1right),rest671) end
| (53,(_,(_,_,YID1right))::_::(_,(_,const_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 20,(result,const_list1left,YID1right),rest671) end
| (54,(_,(_,simple_type1left,simple_type1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 21,(result,simple_type1left,simple_type1right),rest671
) end
| (55,(_,(_,_,YID1right))::(_,(_,YCARET1left,_))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 21,(result,YCARET1left,YID1right),rest671) end
| (56,(_,(_,struct_type1left,struct_type1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 21,(result,struct_type1left,struct_type1right),rest671
) end
| (57,(_,(_,_,struct_type1right))::(_,(_,YPACKED1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 21,(result,YPACKED1left,struct_type1right),rest671)
 end
| (58,(_,(_,type_id1left,type_id1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 22,(result,type_id1left,type_id1right),rest671) end
| (59,(_,(_,_,YRPAR1right))::_::(_,(_,YLPAR1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 22,(result,YLPAR1left,YRPAR1right),rest671) end
| (60,(_,(_,_,const2right))::_::(_,(_,const1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 22,(result,const1left,const2right),rest671) end
| (61,(_,(_,_,const1right))::_::(_,(_,YID1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 22,(result,YID1left,const1right),rest671) end
| (62,(_,(_,_,YID1right))::_::(_,(_,const1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 22,(result,const1left,YID1right),rest671) end
| (63,(_,(_,_,YID2right))::_::(_,(_,YID1left,_))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 22,(result,YID1left,YID2right),rest671) end
| (64,(_,(_,_,type'1right))::_::_::_::_::(_,(_,YARRAY1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YARRAY1left,type'1right),rest671) end
| (65,(_,(_,_,type'1right))::_::(_,(_,YFILE1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YFILE1left,type'1right),rest671) end
| (66,(_,(_,_,simple_type1right))::_::(_,(_,YSET1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YSET1left,simple_type1right),rest671) end
| (67,(_,(_,_,YEND1right))::_::(_,(_,YRECORD1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 23,(result,YRECORD1left,YEND1right),rest671) end
| (68,(_,(_,simple_type1left,simple_type1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 24,(result,simple_type1left,simple_type1right),rest671
) end
| (69,(_,(_,_,simple_type1right))::_::(_,(_,simple_type_list1left,_))
::rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 24,(result,simple_type_list1left,simple_type1right),
rest671) end
| (70,(_,(_,_,variant_part1right))::(_,(_,fixed_part1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 25,(result,fixed_part1left,variant_part1right),rest671
) end
| (71,(_,(_,field1left,field1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 26,(result,field1left,field1right),rest671) end
| (72,(_,(_,_,field1right))::_::(_,(_,fixed_part1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 26,(result,fixed_part1left,field1right),rest671) end
| (73,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 27,(result,defaultPos,defaultPos),rest671) end
| (74,(_,(_,_,type'1right))::_::(_,(_,id_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 27,(result,id_list1left,type'1right),rest671) end
| (75,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 28,(result,defaultPos,defaultPos),rest671) end
| (76,(_,(_,_,variant_list1right))::_::_::(_,(_,YCASE1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 28,(result,YCASE1left,variant_list1right),rest671) end
| (77,(_,(_,_,variant_list1right))::_::_::_::_::(_,(_,YCASE1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 28,(result,YCASE1left,variant_list1right),rest671) end
| (78,(_,(_,variant1left,variant1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 29,(result,variant1left,variant1right),rest671) end
| (79,(_,(_,_,variant1right))::_::(_,(_,variant_list1left,_))::rest671
) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 29,(result,variant_list1left,variant1right),rest671)
 end
| (80,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 30,(result,defaultPos,defaultPos),rest671) end
| (81,(_,(_,_,YRPAR1right))::_::_::_::(_,(_,const_list1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 30,(result,const_list1left,YRPAR1right),rest671) end
| (82,(_,(_,stat1left,stat1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 31,(result,stat1left,stat1right),rest671) end
| (83,(_,(_,_,stat1right))::(_,(_,stat_lsth1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 31,(result,stat_lsth1left,stat1right),rest671) end
| (84,(_,(_,_,YSEMI1right))::(_,(_,stat_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 32,(result,stat_list1left,YSEMI1right),rest671) end
| (85,(_,(_,cstat1left,cstat1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 33,(result,cstat1left,cstat1right),rest671) end
| (86,(_,(_,_,cstat1right))::_::(_,(_,cstat_list1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 33,(result,cstat_list1left,cstat1right),rest671) end
| (87,(_,(_,_,stat1right))::_::(_,(_,const_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 34,(result,const_list1left,stat1right),rest671) end
| (88,(_,(_,_,stat1right))::(_,(_,YCASELAB1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 34,(result,YCASELAB1left,stat1right),rest671) end
| (89,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 34,(result,defaultPos,defaultPos),rest671) end
| (90,rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,defaultPos,defaultPos),rest671) end
| (91,(_,(_,_,stat1right))::_::(_,(_,YINT1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YINT1left,stat1right),rest671) end
| (92,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YID1left,YID1right),rest671) end
| (93,(_,(_,_,YRPAR1right))::_::_::(_,(_,YID1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YID1left,YRPAR1right),rest671) end
| (94,(_,(_,assign1left,assign1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,assign1left,assign1right),rest671) end
| (95,(_,(_,_,YEND1right))::_::(_,(_,YBEGIN1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YBEGIN1left,YEND1right),rest671) end
| (96,(_,(_,_,YEND1right))::_::_::_::(_,(_,YCASE1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YCASE1left,YEND1right),rest671) end
| (97,(_,(_,_,stat1right))::_::_::(_,(_,YWITH1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YWITH1left,stat1right),rest671) end
| (98,(_,(_,_,stat1right))::_::_::(_,(_,YWHILE1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YWHILE1left,stat1right),rest671) end
| (99,(_,(_,_,expr1right))::_::_::(_,(_,YREPEAT1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YREPEAT1left,expr1right),rest671) end
| (100,(_,(_,_,stat1right))::_::_::_::_::(_,(_,YFOR1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YFOR1left,stat1right),rest671) end
| (101,(_,(_,_,stat1right))::_::_::_::_::(_,(_,YFOR1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YFOR1left,stat1right),rest671) end
| (102,(_,(_,_,YINT1right))::(_,(_,YGOTO1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YGOTO1left,YINT1right),rest671) end
| (103,(_,(_,_,stat1right))::_::_::(_,(_,YIF1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YIF1left,stat1right),rest671) end
| (104,(_,(_,_,stat2right))::_::_::_::_::(_,(_,YIF1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 35,(result,YIF1left,stat2right),rest671) end
| (105,(_,(_,_,expr1right))::_::_::(_,(_,variable1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 36,(result,variable1left,expr1right),rest671) end
| (106,(_,(_,_,expr1right))::_::_::(_,(_,YID1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 36,(result,YID1left,expr1right),rest671) end
| (107,(_,(_,_,expr2right))::_::(_,(_,expr1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,expr1left,expr2right),rest671) end
| (108,(_,(_,_,expr1right))::(_,(_,YPLUS1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YPLUS1left,expr1right),rest671) end
| (109,(_,(_,_,expr1right))::(_,(_,YMINUS1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YMINUS1left,expr1right),rest671) end
| (110,(_,(_,_,expr2right))::_::(_,(_,expr1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,expr1left,expr2right),rest671) end
| (111,(_,(_,_,expr2right))::_::(_,(_,expr1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,expr1left,expr2right),rest671) end
| (112,(_,(_,YNIL1left,YNIL1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YNIL1left,YNIL1right),rest671) end
| (113,(_,(_,YSTRING1left,YSTRING1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YSTRING1left,YSTRING1right),rest671) end
| (114,(_,(_,YINT1left,YINT1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YINT1left,YINT1right),rest671) end
| (115,(_,(_,YBINT1left,YBINT1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YBINT1left,YBINT1right),rest671) end
| (116,(_,(_,YNUMB1left,YNUMB1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YNUMB1left,YNUMB1right),rest671) end
| (117,(_,(_,variable1left,variable1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,variable1left,variable1right),rest671) end
| (118,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YID1left,YID1right),rest671) end
| (119,(_,(_,_,YRPAR1right))::_::_::(_,(_,YID1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YID1left,YRPAR1right),rest671) end
| (120,(_,(_,_,YRPAR1right))::_::(_,(_,YLPAR1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YLPAR1left,YRPAR1right),rest671) end
| (121,(_,(_,_,expr1right))::(_,(_,negop1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,negop1left,expr1right),rest671) end
| (122,(_,(_,_,YRBRA1right))::_::(_,(_,YLBRA1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YLBRA1left,YRBRA1right),rest671) end
| (123,(_,(_,_,YRBRA1right))::(_,(_,YLBRA1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 37,(result,YLBRA1left,YRBRA1right),rest671) end
| (124,(_,(_,element1left,element1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 38,(result,element1left,element1right),rest671) end
| (125,(_,(_,_,element1right))::_::(_,(_,element_list1left,_))::
rest671) => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 38,(result,element_list1left,element1right),rest671)
 end
| (126,(_,(_,expr1left,expr1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 39,(result,expr1left,expr1right),rest671) end
| (127,(_,(_,_,expr2right))::_::(_,(_,expr1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 39,(result,expr1left,expr2right),rest671) end
| (128,(_,(_,qual_var1left,qual_var1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 40,(result,qual_var1left,qual_var1right),rest671) end
| (129,(_,(_,_,YRBRA1right))::_::_::(_,(_,YID1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 41,(result,YID1left,YRBRA1right),rest671) end
| (130,(_,(_,_,YRBRA1right))::_::_::(_,(_,qual_var1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 41,(result,qual_var1left,YRBRA1right),rest671) end
| (131,(_,(_,_,field_id1right))::_::(_,(_,YID1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 41,(result,YID1left,field_id1right),rest671) end
| (132,(_,(_,_,field_id1right))::_::(_,(_,qual_var1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 41,(result,qual_var1left,field_id1right),rest671) end
| (133,(_,(_,_,YCARET1right))::(_,(_,YID1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 41,(result,YID1left,YCARET1right),rest671) end
| (134,(_,(_,_,YCARET1right))::(_,(_,qual_var1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 41,(result,qual_var1left,YCARET1right),rest671) end
| (135,(_,(_,expr1left,expr1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 42,(result,expr1left,expr1right),rest671) end
| (136,(_,(_,_,expr2right))::_::(_,(_,expr1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 42,(result,expr1left,expr2right),rest671) end
| (137,(_,(_,_,expr3right))::_::_::_::(_,(_,expr1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 42,(result,expr1left,expr3right),rest671) end
| (138,(_,(_,_,octhex1right))::(_,(_,expr1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 42,(result,expr1left,octhex1right),rest671) end
| (139,(_,(_,_,octhex1right))::_::_::(_,(_,expr1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 42,(result,expr1left,octhex1right),rest671) end
| (140,(_,(_,YOCT1left,YOCT1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 43,(result,YOCT1left,YOCT1right),rest671) end
| (141,(_,(_,YHEX1left,YHEX1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 43,(result,YHEX1left,YHEX1right),rest671) end
| (142,(_,(_,expr1left,expr1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 44,(result,expr1left,expr1right),rest671) end
| (143,(_,(_,_,expr1right))::_::(_,(_,expr_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 44,(result,expr_list1left,expr1right),rest671) end
| (144,(_,(_,wexpr1left,wexpr1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 45,(result,wexpr1left,wexpr1right),rest671) end
| (145,(_,(_,_,wexpr1right))::_::(_,(_,wexpr_list1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 45,(result,wexpr_list1left,wexpr1right),rest671) end
| (146,(_,(_,YEQUAL1left,YEQUAL1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,YEQUAL1left,YEQUAL1right),rest671) end
| (147,(_,(_,YLESS1left,YLESS1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,YLESS1left,YLESS1right),rest671) end
| (148,(_,(_,YGREATER1left,YGREATER1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,YGREATER1left,YGREATER1right),rest671) end
| (149,(_,(_,_,YGREATER1right))::(_,(_,YLESS1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,YLESS1left,YGREATER1right),rest671) end
| (150,(_,(_,_,YEQUAL1right))::(_,(_,YLESS1left,_))::rest671) => let 
val result=MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,YLESS1left,YEQUAL1right),rest671) end
| (151,(_,(_,_,YEQUAL1right))::(_,(_,YGREATER1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,YGREATER1left,YEQUAL1right),rest671) end
| (152,(_,(_,YIN1left,YIN1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 46,(result,YIN1left,YIN1right),rest671) end
| (153,(_,(_,YPLUS1left,YPLUS1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 47,(result,YPLUS1left,YPLUS1right),rest671) end
| (154,(_,(_,YMINUS1left,YMINUS1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 47,(result,YMINUS1left,YMINUS1right),rest671) end
| (155,(_,(_,YOR1left,YOR1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 47,(result,YOR1left,YOR1right),rest671) end
| (156,(_,(_,YBAR1left,YBAR1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 47,(result,YBAR1left,YBAR1right),rest671) end
| (157,(_,(_,YSTAR1left,YSTAR1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,YSTAR1left,YSTAR1right),rest671) end
| (158,(_,(_,YSLASH1left,YSLASH1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,YSLASH1left,YSLASH1right),rest671) end
| (159,(_,(_,YDIV1left,YDIV1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,YDIV1left,YDIV1right),rest671) end
| (160,(_,(_,YMOD1left,YMOD1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,YMOD1left,YMOD1right),rest671) end
| (161,(_,(_,YAND1left,YAND1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,YAND1left,YAND1right),rest671) end
| (162,(_,(_,YAMP1left,YAMP1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 48,(result,YAMP1left,YAMP1right),rest671) end
| (163,(_,(_,YNOT1left,YNOT1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 49,(result,YNOT1left,YNOT1right),rest671) end
| (164,(_,(_,YTILDE1left,YTILDE1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 49,(result,YTILDE1left,YTILDE1right),rest671) end
| (165,(_,(_,variable1left,variable1right))::rest671) => let val 
result=MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,variable1left,variable1right),rest671) end
| (166,(_,(_,_,variable1right))::_::(_,(_,var_list1left,_))::rest671)
 => let val result=MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,var_list1left,variable1right),rest671) end
| (167,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,YID1left,YID1right),rest671) end
| (168,(_,(_,_,YID1right))::_::(_,(_,var_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 50,(result,var_list1left,YID1right),rest671) end
| (169,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 51,(result,YID1left,YID1right),rest671) end
| (170,(_,(_,_,YID1right))::_::(_,(_,id_list1left,_))::rest671) => 
let val result=MlyValue.ntVOID(())
 in (LrTable.NT 51,(result,id_list1left,YID1right),rest671) end
| (171,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 52,(result,YID1left,YID1right),rest671) end
| (172,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 53,(result,YID1left,YID1right),rest671) end
| (173,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 54,(result,YID1left,YID1right),rest671) end
| (174,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 55,(result,YID1left,YID1right),rest671) end
| (175,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 56,(result,YID1left,YID1right),rest671) end
| (176,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 57,(result,YID1left,YID1right),rest671) end
| (177,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 58,(result,YID1left,YID1right),rest671) end
| (178,(_,(_,YID1left,YID1right))::rest671) => let val result=
MlyValue.ntVOID(())
 in (LrTable.NT 59,(result,YID1left,YID1right),rest671) end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.ntVOID x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a 
end
end
structure Tokens : Pascal_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun YAND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.VOID,p1,p2))
fun YARRAY (p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.VOID,p1,p2))
fun YBEGIN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun YCASE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun YCONST (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun YDIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun YDO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun YDOTDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun YTO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun YELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun YEND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun YFILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun YFOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun YFORWARD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun YPROCEDURE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun YGOTO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun YID (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun YIF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun YIN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun YINT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun YLABEL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun YMOD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun YNOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun YNUMB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun YOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun YOR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun YPACKED (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun YNIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun YFUNCTION (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun YPROG (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun YRECORD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun YREPEAT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun YSET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun YSTRING (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun YTHEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun YDOWNTO (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun YTYPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun YUNTIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun YVAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun YWHILE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun YWITH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun YBINT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun YOCT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun YHEX (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun YCASELAB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun YILLCH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
fun YEXTERN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 46,(
ParserData.MlyValue.VOID,p1,p2))
fun YDOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 47,(
ParserData.MlyValue.VOID,p1,p2))
fun YLPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 48,(
ParserData.MlyValue.VOID,p1,p2))
fun YRPAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 49,(
ParserData.MlyValue.VOID,p1,p2))
fun YSEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 50,(
ParserData.MlyValue.VOID,p1,p2))
fun YCOMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 51,(
ParserData.MlyValue.VOID,p1,p2))
fun YCOLON (p1,p2) = Token.TOKEN (ParserData.LrTable.T 52,(
ParserData.MlyValue.VOID,p1,p2))
fun YCARET (p1,p2) = Token.TOKEN (ParserData.LrTable.T 53,(
ParserData.MlyValue.VOID,p1,p2))
fun YLBRA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 54,(
ParserData.MlyValue.VOID,p1,p2))
fun YRBRA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 55,(
ParserData.MlyValue.VOID,p1,p2))
fun YTILDE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 56,(
ParserData.MlyValue.VOID,p1,p2))
fun YLESS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 57,(
ParserData.MlyValue.VOID,p1,p2))
fun YEQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 58,(
ParserData.MlyValue.VOID,p1,p2))
fun YGREATER (p1,p2) = Token.TOKEN (ParserData.LrTable.T 59,(
ParserData.MlyValue.VOID,p1,p2))
fun YPLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 60,(
ParserData.MlyValue.VOID,p1,p2))
fun YMINUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 61,(
ParserData.MlyValue.VOID,p1,p2))
fun YBAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 62,(
ParserData.MlyValue.VOID,p1,p2))
fun UNARYSIGN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 63,(
ParserData.MlyValue.VOID,p1,p2))
fun YSTAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 64,(
ParserData.MlyValue.VOID,p1,p2))
fun YSLASH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 65,(
ParserData.MlyValue.VOID,p1,p2))
fun YAMP (p1,p2) = Token.TOKEN (ParserData.LrTable.T 66,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 67,(
ParserData.MlyValue.VOID,p1,p2))
end
end
