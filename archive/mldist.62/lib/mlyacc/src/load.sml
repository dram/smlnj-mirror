local

(* load base files; used by all parsers generated by ML-Yacc, included
   ML-Yacc's own parser *)

    val base = ["base.sig","stream.sml","lrtable.sml","join.sml","parser2.sml"]

(* load parser files for ML-Yacc *)

    val parser = ["hdr.sml","yacc.grm.sig","yacc.grm.sml", "yacc.lex.sml",
		  "parse.sml"]

(* rest of ML-Yacc:

	base definitions:
		sigs.sml, grammar.sml

	LR(0) graph generation:
		intgrammar.sml, core.sml, coreutils.sml, graph.sml

	LALR(1) table generation:
		look.sml, lalr.sml, mktable.sml

	modules to print out table structure:
		mkstruct.sml

	and verbose file:
		verbose.sml
	
	module to check specification for errors, create grammar from
	specification, have appropriate files printed out, and print out
	semantic actions for the parser:
		yacc.sml  *)

    val parsegen = ["utils.sig","utils.sml","sigs.sml","grammar.sml","core.sml",
		    "coreutils.sml","graph.sml","look.sml","lalr.sml",
		     "mktable.sml","mkstruct.sml","verbose.sml","yacc.sml"]
in
     val loadBase = fn _ => app use base
     val loadParser = fn _ => app use parser
     val loadPG = fn _ => app use parsegen
     val loadAll = fn _ => (loadBase(); loadParser(); loadPG())
end
