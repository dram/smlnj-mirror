#!/bin/sh
#
#set -x

IMAGE=""
MACHINE=""
ENDIAN=""
OPSYS="BSD"
MODULEKIND="Int"
TARGET=""
SHARE="TRUE"
DEFS=""
CLEAN="TRUE"
MKRUN="TRUE"
RUNTIME="runtime"
NOBOOT=""
ASMBLR="as"
COMMAND=""
IONLY=""
CFL=""
MAKEFILE="Makefile"
WARNPRIM="@:"

#
# gc params
HEAP=2048
RATIO=20
SOFTLIMIT=4096

#
# try to guess the machine type
#
if [ -f /bin/arch ]; then
    case `/bin/arch` in
        sun3)
            set - -sun3 $*
        ;;
        sun4)
            set - -sun4 $*
        ;;
    esac
fi

if [ -f /hp-ux ]; then
        set - -hpux $*
fi

#
# process options
#
while test "$#" != "0"
do
    case $1 in
        -m68|-sun3)
            MACHINE=M68
        ;;
        -mipsel)
            MACHINE=MIPS
            ENDIAN=Little
            MO="../mo.MIPSEL"
            DEFS="$DEFS -DMIPSEL"
            WARNPRIM='@echo Expect exactly one warning about a macro instruction using \$$at'
        ;;
        -mipseb)
            MACHINE=MIPS
            ENDIAN=Big
            MO="../mo.MIPSEB"
            DEFS="$DEFS -DMIPSEB"
            WARNPRIM='@echo Expect exactly one warning about a macro instruction using \$$at'
        ;;
        -sparc|-sun4)
            MACHINE=SPARC
        ;;
        -next|-NeXT)
            MACHINE=M68
            OPSYS=MACH
        ;;
        -encore)
            MACHINE=NS32
            OPSYS=BSD
            ASMBLR="as -j"
        ;;
        -vax)
            MACHINE=VAX
        ;;
        -hpux)
            MACHINE=M68
            OPSYS=HPUX
            SHARE=""
            MAKEFILE="Makefile.hpux"
        ;;
        -bsd)
            OPSYS=BSD
        ;;
        -mach)
            OPSYS=MACH
        ;;
        -sunos)
            OPSYS=SUNOS
        ;;
        -v9)
            OPSYS=V9
        ;;
        -more)
            OPSYS=MORE
        ;;
        -ultrix)
            OPSYS=ULTRIX
        ;;
        -batch)
            MODULEKIND=Comp
        ;;
        -noshare)
            SHARE=""
        ;;
        -oldshare)
            SHARE="OLD"
        ;;
        -run)
            MKRUN="TRUE"
            NOBOOT="TRUE"
        ;;
        -norun)
            MKRUN=""
            CLEAN=""
        ;;
        -noclean)
            CLEAN=""
        ;;
        -target)
            shift
            if test "$#" = "0"
            then
                echo "makeml: must supply machine for -target option"
                exit 1
            fi
            TARGET=$1
            MODULEKIND=Comp
        ;;
        -i)
            COMMAND="System.Control.interp := true;"
            ;;
        -ionly)
            COMMAND="System.Control.interp := true;"
            IONLY="TRUE"
        ;;
        -o)
            shift
            if test "$#" = "0"
            then
                echo "makeml: must supply image name for -o option"
                exit 1
            fi
            IMAGE=$1
        ;;
        -runtime)
            shift
            if test "$#" = "0"
            then
                echo "makeml: must supply runtime directory for -runtime option"
                exit 1
            fi
            RUNTIME=$1
        ;;
        -mo)
            shift
            if test "$#" = "0"
            then
                echo "makeml: must supply mo directory for -mo option"
                exit 1
            elif test ! \( -d "$1" \)
            then
                echo "makeml: mo directory $1 not found"
                exit 1
            fi
            MO=$1
        ;;
        -h)
            shift
            if test "$#" = "0"
            then
                echo "makeml: must supply argument for -h option"
                exit 1
            fi
            HEAP=$1
        ;;
        -r)
            shift
            if test "$#" = "0"
            then
                echo "makeml: must supply argument for -r option"
                exit 1
            fi
            RATIO=$1
        ;;
        -m)
            shift
            if test "$#" = "0"
            then
                echo "makeml: must supply argument for -m option"
                exit 1
            fi
            SOFTLIMIT=$1
        ;;
        -D*)
            DEFS="$DEFS $1"
        ;;
        *)
            echo "makeml: unrecognized option $1"
            exit 1
        ;;
    esac
    shift
done

if test -z "$IMAGE"
then
    if test "$MODULEKIND" = Int
    then
        if test -n "$IONLY"
        then
            IMAGE=smli
        else
            IMAGE=sml
        fi
    else
        IMAGE=smlc
    fi
fi

case $MACHINE in
    M68)
        case $OPSYS in
        MACH)
            OPSYS=BSD
# drt: added -Dsun3 option to make Mach header files perform correctly
            DEFS="$DEFS -Dsun3 -DSUN3"
            CFL="-f68881"
        ;;
        SUNOS)
            OPSYS=BSD
# awa: for gcc, -f68881 should be changed to -m68881 below.
            DEFS="$DEFS -DSUN3"
            CFL="-n -Bstatic -f68881"
        ;;
        NEXT)
            DEFS="$DEFS -DBSD"
        ;;
        HPUX)
            CFL=""
        ;;
        *)
                echo "For m68 don't use -bsd, use -mach or -next or -sunos or -hpux or -more"
                exit 1
        esac
        if test -z "$MO"
        then
            MO="../mo.m68"
        fi
        MODULE="$MODULEKIND"M68
    ;;
    SPARC)
        case $OPSYS in
        MACH)
            OPSYS=BSD
            DEFS="$DEFS -Dsun4"
        ;;
        SUNOS)
            OPSYS=BSD
            DEFS="$DEFS -Dsun4"
            CFL="-n -Bstatic"
        ;;
        *)
                echo "For sparc don't use -bsd, use -mach or -sunos"
                exit 1
        esac
        if test -z "$MO"
        then
            MO="../mo.sparc"
        fi
        MODULE="$MODULEKIND"Sparc
    ;;
    VAX)
        if test "$OPSYS" = ULTRIX
        then
            DEFS="$DEFS -DBSD"
        fi
        if test -z "$MO"
        then
            MO="../mo.vax"
        fi
        MODULE="$MODULEKIND"Vax
    ;;
    MIPS)
        if test "$OPSYS" = ULTRIX
        then
            DEFS="$DEFS -DBSD"
        fi
        MODULE="$MODULEKIND"Mips"$ENDIAN"
    ;;
    NS32)
        if test -z "$MO"
        then
            MO="../mo.ns32"
        fi
        MODULE="$MODULEKIND"NS32
    ;;
    *)
        echo "makeml: must specify machine type"
        exit 1
    ;;
esac

if test -n "$TARGET"
then
    ENDIAN=""
    case $TARGET in
        m68|M68|sun3|next)
            TARGET=M68
        ;;
        sparc|Sparc|SPARC|sun4)
            TARGET=Sparc
        ;;
        mipsel)
            TARGET=Mips
            ENDIAN=Little
        ;;
        mipseb)
            TARGET=Mips
            ENDIAN=Big
        ;;
        vax|Vax|VAX)
            TARGET=Vax
        ;;
        ns32|NS32|encore)
            TARGET=NS32
        ;;
        *)
            echo "makeml: invalid argument to -target option"
            exit 1
    esac
    MODULE="$MODULEKIND"$TARGET"$ENDIAN"
fi

if test -n "$IONLY"
then
    if test -n "$TARGET"
    then
        echo "makeml: -target and -ionly options are incompatible"
        exit 1
    fi
    MODULE="IntNull"
fi

MOFILES="$MODULE.mos"
DEFS="$DEFS -D$OPSYS"


if test -n "$CLEAN"
then
    echo "(cd $RUNTIME; make -f $MAKEFILE clean)"
    (cd $RUNTIME; make -f $MAKEFILE clean)
fi

echo rm -f mo
rm -f mo

echo ln -s $MO mo
ln -s $MO mo

if test -n "$MKRUN"
then

    if test "x$SHARE" = "xOLD"
    then
        echo "(cd $RUNTIME; rm -f run)"
        (cd $RUNTIME; rm -f run)
    else
        echo "(cd $RUNTIME; rm -f run allmo.o)"
        (cd $RUNTIME; rm -f run allmo.o)
    fi

    if test "x$SHARE" = "xTRUE" # if -oldshare, don't rebuild allmo.o --nr
    then
            ARG="MACHINE=$MACHINE 'DEFS=$DEFS' clinkdata"
            echo "(cd $RUNTIME; make -f $MAKEFILE $ARG)"
            (cd $RUNTIME; eval make -f $MAKEFILE $ARG)

            echo "$RUNTIME/clinkdata [$RUNTIME/$MOFILES]"
            $RUNTIME/clinkdata `cat $RUNTIME/$MOFILES`
    fi

    ARG="MACHINE=$MACHINE 'DEFS=$DEFS' 'CFL=$CFL' 'ASMBLR=$ASMBLR' 'WARNPRIM=$WARNPRIM'"
    echo "(cd $RUNTIME; make -f $MAKEFILE $ARG)"
    (cd $RUNTIME; eval make -f $MAKEFILE $ARG)
fi

if test -n "$NOBOOT"
then
    exit 0
fi

if test "$MODULEKIND" = Int
then
    STARTUP='('$COMMAND' exportML "'$IMAGE'"; output std_out System.version; output std_out (chr 10) (* newline *));'
    echo echo $STARTUP '|' $RUNTIME/run -m $SOFTLIMIT -r $RATIO -h $HEAP $MODULE
    echo $STARTUP | $RUNTIME/run -m $SOFTLIMIT -r $RATIO -h $HEAP $MODULE
else
    echo "$RUNTIME/run -m $SOFTLIMIT -r $RATIO -h $HEAP $MODULE"
    $RUNTIME/run -m $SOFTLIMIT -r $RATIO -h $HEAP $MODULE <<XXX
>$IMAGE
XXX
fi
