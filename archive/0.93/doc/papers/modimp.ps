%!PS
%%Version: 3.3
%%DocumentFonts: (atend)
%%Pages: (atend)
%%EndComments
%
% Version 3.3 prologue for troff files.
%

/#copies 1 store
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	/Symbol /S Sdefs cf
	/Times-Roman /S1 S1defs cf
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put} {pop pop} ifelse} forall

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def

%
% A few arrays used to adjust reference points and character widths in some
% of the printer resident fonts. If square roots are too high try changing
% the lines describing /radical and /radicalex to,
%
%	/radical	[0 -75 550 0]
%	/radicalex	[-50 -75 500 0]
%
% Move braceleftbt a bit - default PostScript character is off a bit.
%

/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
%
% Tries to round clipping path dimensions, as stored in array pagebbox, so they
% match one of the known sizes in the papersizes array. Lower left coordinates
% are always set to 0.
%

/roundpagebbox {
    7 dict begin
	/papersizes [8.5 inch 11 inch 14 inch 17 inch] def

	/mappapersize {
		/val exch def
		/slop .5 inch def
		/diff slop def
		/j 0 def
		0 1 papersizes length 1 sub {
			/i exch def
			papersizes i get val sub abs
			dup diff le {/diff exch def /j i def} {pop} ifelse
		} for
		diff slop lt {papersizes j get} {val} ifelse
	} def

	pagebbox 0 0 put
	pagebbox 1 0 put
	pagebbox dup 2 get mappapersize 2 exch put
	pagebbox dup 3 get mappapersize 3 exch put
    end
} bind def

%%EndProlog
%%BeginSetup
mark
/resolution 720 def
setup
2 setdecoding
%%EndSetup
%%Page: 0 1
/saveobj save def
mark
1 pagesetup
12 B f
(An Implementation of Standard ML Modules)5 2340 1 1710 1230 t
10 I f
(David MacQueen)1 706 1 2527 1470 t
10 R f
(AT&T Bell Laboratories)2 993 1 2383 1650 t
(Murray Hill, NJ 07974)3 916 1 2422 1770 t
10 I f
(ABSTRACT)2643 2270 w
10 R f
( programming in the)3 840(Standard ML includes a set of module constructs that support)9 2510 2 1330 2530 t
( by introducing the)3 782( constructs extend ML's basic polymorphic type system)7 2297(large. These)1 521 3 1080 2650 t
( paper discusses the)3 841( This)1 245( Intuitionistic Type Theory.)3 1156( f's)1 110( ")1 -4( Lo)1 153(dependent types of Martin)3 1099 7 1080 2770 t
( in implementing Standard ML's modules and describes a practical,)9 2837(problems involved)1 763 2 1080 2890 t
( this imple-)2 484( representations and algorithms of)4 1411( The)1 218(efficient solution to these problems.)4 1487 4 1080 3010 t
( by)1 138(mentation were inspired by a detailed formal semantics of Standard ML developed)11 3462 2 1080 3130 t
( a new Standard ML compiler)5 1240( implementation is part of)4 1065( The)1 213(Milner, Tofte, and Harper.)3 1082 4 1080 3250 t
(that is written in Standard ML using the module system.)9 2250 1 1080 3370 t
(March 11, 1988)2 635 1 720 3850 t
cleartomark
showpage
saveobj restore
%%EndPage: 0 1
%%Page: 1 2
/saveobj save def
mark
2 pagesetup
12 B f
(An Implementation of Standard ML Modules)5 2340 1 1710 1230 t
10 I f
(David MacQueen)1 706 1 2527 1470 t
10 R f
(AT&T Bell Laboratories)2 993 1 2383 1650 t
(Murray Hill, NJ 07974)3 916 1 2422 1770 t
10 B f
(1. Introduction)1 670 1 720 2130 t
10 R f
( was the inclusion of)4 859(An important part of the revision of ML that led to the Standard ML language)14 3211 2 970 2286 t
( facilities went)2 628( design of these)3 687( The)1 226(module facilities for the support of ``programming in the large.'')9 2779 4 720 2406 t
( [8] and was supported by concurrent investigations of the type theory of ML and)14 3334(through several versions)2 986 2 720 2526 t
( was to support modularity by introducing a stra-)8 1970( central idea behind the design)5 1232( The)1 208(related systems [9,11].)2 910 4 720 2646 t
( late 1985)2 396( In)1 134( Intuitionistic Type Theory [10].)4 1300( f's)1 110( ")1 -4( types as suggested by Martin Lo)6 1327(tified system of dependent)3 1057 7 720 2766 t
(Bob Harper added a prototype implementation of most of the module facilities to the Edinburgh ML com-)16 4320 1 720 2886 t
(piler, which was serving as a test-bed for the evolving Standard ML design.)12 3023 1 720 3006 t
(Starting in the spring of 1986, Andrew Appel, Trevor Jim, and I have implemented a new Standard)16 4070 1 970 3162 t
( over-)1 242( An)1 179( ML, and initially bootstrapped from the Edinburgh compiler.)8 2521(ML compiler, written in Standard)4 1378 4 720 3282 t
( implementation of)2 773( The)1 211( Jersey, is given in [1].)5 937(view of this new compiler, known as Standard ML of New)10 2399 4 720 3402 t
( fall of 1986,)3 531( first version was done in the)6 1190( A)1 128(modules in this new compiler went through two generations.)8 2471 4 720 3522 t
( operational static)2 750(but it was completely rewritten in the summer of 1987 following discussions of the)13 3570 2 720 3642 t
( Harper's prototype)2 795( Like)1 240( Tofte, and Bob Harper [6,7,12].)5 1329(semantics of modules with Robin Milner, Mads)6 1956 4 720 3762 t
(implementation, the new modules implementation was inspired by the static semantics, but it uses a)14 4057 1 720 3882 t
10 I f
(struc-)4807 3882 w
(ture sharing)1 495 1 720 4002 t
10 R f
( naive implementation)2 898(strategy [3,13] to avoid serious performance problems associated with a)9 2899 2 1243 4002 t
( precise comparative measurements are not yet available, our experience)9 2954( Although)1 435(of the static semantics.)3 931 3 720 4122 t
( table size for a large ML program such as the ML compiler is several times smaller)16 3413(shows that the symbol)3 907 2 720 4242 t
(with the new compiler than with the old compiler.)8 2001 1 720 4362 t
( ML module facilities,)3 918(The objective of this paper is to describe our implementation of the Standard)12 3152 2 970 4518 t
( the techniques used to minimize the space consumed by static representations)11 3192(with particular emphasis on)3 1128 2 720 4638 t
(of modules \()2 505 1 720 4758 t
10 I f
(i.e.)1225 4758 w
10 R f
( begin by reviewing the elements of the module language.)9 2313( We)1 188(symbol table structures\).)2 985 3 1372 4758 t
10 B f
( of the module constructs)4 1071(2. Summary)1 547 2 720 4998 t
10 R f
( concerning implementation of Standard ML modules, we need to)9 2693(Before describing the basic issues)4 1377 2 970 5154 t
( are three principal notions:)4 1098( There)1 282(review the main elements of the module language.)7 2013 3 720 5274 t
(\(1\))720 5430 w
10 I f
(signature)970 5430 w
10 R f
(\261 interface specification or ``type'' of modules.)6 1892 1 1373 5430 t
(\(2\))720 5586 w
10 I f
(structure)970 5586 w
10 R f
( exception bindings;)2 895(\261 an environment; a collection of type, structure, value, and)9 2748 2 1397 5586 t
(corresponds to the conventional idea of a module.)7 1991 1 970 5706 t
(\(3\))720 5862 w
10 I f
(functor)970 5862 w
10 R f
(\261 function mapping structures to structures; a form of parametric module.)10 2937 1 1284 5862 t
(Figure 1 below contains simple examples of each of these constructs.)10 2765 1 720 6018 t
cleartomark
showpage
saveobj restore
%%EndPage: 1 2
%%Page: 2 3
/saveobj save def
mark
3 pagesetup
10 R f
(- 2 -)2 166 1 2797 480 t
10 CW f
(signature ORD =)2 900 1 1080 900 t
(sig)1200 1020 w
(type t)1 360 1 1320 1140 t
(val le : t*t -> bool)5 1200 1 1320 1260 t
(end)1200 1380 w
(structure S =)2 780 1 1080 1620 t
(struct)1200 1740 w
(datatype t = A | B of t)7 1380 1 1320 1860 t
(val x = A)3 540 1 1320 1980 t
(fun le\(A,_\) = true)3 1080 1 1320 2100 t
(| le\(_,A\) = false)3 1020 1 1440 2220 t
(| le\(B x, B y\) = le\(x,y\))6 1440 1 1440 2340 t
(end)1200 2460 w
(signature LEXORD =)2 1080 1 1080 2700 t
(sig)1200 2820 w
(structure A : ORD)3 1020 1 1320 2940 t
(val lexord : A.t list * A.t list -> bool)9 2400 1 1320 3060 t
(end)1200 3180 w
(functor LexOrd\(O: ORD\) : LEXORD =)5 1980 1 1080 3420 t
(struct)1200 3540 w
(structure A = O)3 900 1 1320 3660 t
(fun lexord\([],_\) = true)3 1380 1 1320 3780 t
(| lexord\(_,[]\) = false)3 1320 1 1440 3900 t
(| lexord\(x::l,y::m\) = ... O.le\(x,y\) ...)5 2340 1 1440 4020 t
(end)1200 4140 w
(structure LS = LexOrd\(S\))3 1440 1 1080 4380 t
10 I f
(Figure 1)1 347 1 2706 4560 t
10 R f
(This example contains declarations of two signatures,)6 2186 1 970 4716 t
10 CW f
(ORD)3188 4716 w
10 R f
(and)3401 4716 w
10 CW f
(LEXORD)3578 4716 w
10 R f
(, two structures,)2 654 1 3938 4716 t
10 CW f
(S)4625 4716 w
10 R f
(and)4718 4716 w
10 CW f
(LS)4895 4716 w
10 R f
(,)5015 4716 w
(and one functor,)2 663 1 720 4836 t
10 CW f
(LexOrd)1414 4836 w
10 R f
(, mapping a structure of signature)5 1372 1 1774 4836 t
10 CW f
(ORD)3177 4836 w
10 R f
( new structure of signature)4 1084(to a)1 153 2 3388 4836 t
10 CW f
(LEXORD)4655 4836 w
10 R f
(.)5015 4836 w
(The structure)1 533 1 720 4956 t
10 CW f
(LS)1282 4956 w
10 R f
(is defined as the result of applying)6 1400 1 1431 4956 t
10 CW f
(LexOrd)2860 4956 w
10 R f
(to)3250 4956 w
10 CW f
(S)3358 4956 w
10 R f
( refer to components of a structure)6 1404(. We)1 218 2 3418 4956 t
(using qualified names or paths formed with the usual ``dot'' notation:)10 2786 1 720 5076 t
10 I f
(e.g.)3531 5076 w
10 CW f
(S.t)3700 5076 w
10 R f
(,)3880 5076 w
10 CW f
(S.x)3930 5076 w
10 R f
(,)4110 5076 w
10 CW f
(LS.A.le)4160 5076 w
10 R f
(.)4580 5076 w
( ``type'' for structures, or as a schematic representation of a)10 2424(A signature can be regarded as a form of)8 1646 2 970 5232 t
(class of structures, and a structure)5 1357 1 720 5352 t
10 I f
(matches)2103 5352 w
10 R f
( if it satisfies the specifications given in the signature.)9 2148(a signature)1 436 2 2456 5352 t
( in order for it to match the signature; in this)10 1881(A structure does not have to agree exactly with a signature)10 2439 2 720 5472 t
(example the structure)2 861 1 720 5592 t
10 CW f
(S)1607 5592 w
10 R f
( signature)1 391(matches the)1 475 2 1693 5592 t
10 CW f
(ORD)2584 5592 w
10 R f
(, even though)2 541 1 2764 5592 t
10 CW f
(S)3330 5592 w
10 R f
(has an additional value component)4 1387 1 3415 5592 t
10 CW f
(x)4827 5592 w
10 R f
(not)4912 5592 w
(specified in)1 467 1 720 5712 t
10 CW f
(ORD)1216 5712 w
10 R f
( has a coercive effect, producing a ``thinned'' structure)8 2235( such cases signature matching)4 1247(. In)1 162 3 1396 5712 t
(that exactly agrees with the signature in terms of number of components and their types.)14 3525 1 720 5832 t
( constraint is given in a struc-)6 1212(Signature matching is performed in two contexts: \(1\) when a signature)10 2858 2 970 5988 t
(ture declaration, as in:)3 887 1 720 6108 t
10 CW f
(structure R : ORD = S)5 1260 1 1080 6288 t
10 R f
( structure, which must match the signature specified for the)9 2377(and \(2\) when a functor is applied to an argument)9 1943 2 720 6468 t
(formal parameter, as in)3 925 1 720 6588 t
10 CW f
(structure LS = LexOrd\(S\))3 1440 1 1080 6768 t
10 R f
(where)720 6948 w
10 CW f
(S)1002 6948 w
10 R f
(must match)1 478 1 1101 6948 t
10 CW f
(ORD)1618 6948 w
10 R f
( these two contexts are closely related under Landin's principle of)10 2783(. Actually,)1 459 2 1798 6948 t
( the first case,)3 590(correspondence. In)1 795 2 720 7068 t
10 CW f
(R)2142 7068 w
10 R f
(is bound to a thinned version of)6 1338 1 2239 7068 t
10 CW f
(S)3614 7068 w
10 R f
(that does not contain an)4 993 1 3710 7068 t
10 CW f
(x)4739 7068 w
10 R f
(com-)4835 7068 w
(ponent, and in the second case, the formal parameter)8 2100 1 720 7188 t
10 CW f
(O)2845 7188 w
10 R f
( hence the substructure)3 920(, and)1 194 2 2905 7188 t
10 CW f
(LS.A)4045 7188 w
10 R f
(, is also bound to a)5 755 1 4285 7188 t
(thinned version of)2 727 1 720 7308 t
10 CW f
(S)1472 7308 w
10 R f
(.)1532 7308 w
cleartomark
showpage
saveobj restore
%%EndPage: 2 3
%%Page: 3 4
/saveobj save def
mark
4 pagesetup
10 R f
(- 3 -)2 166 1 2797 480 t
(Another kind of specification that may appear in signatures is the)10 2657 1 970 840 t
10 I f
(sharing constraint)1 743 1 3658 840 t
10 R f
(, the purpose of)3 639 1 4401 840 t
( program sketch in Figure 2)5 1162( The)1 216(which is to insure a kind of type coherence among functor parameters.)11 2942 3 720 960 t
(illustrates the use of sharing constraints.)5 1604 1 720 1080 t
10 CW f
(signature SYMBOL = sig type symbol ... end)7 2520 1 1080 1260 t
(signature LEX =)2 900 1 1080 1500 t
(sig)1200 1620 w
(structure Symbol : SYMBOL)3 1500 1 1320 1740 t
(val next : unit -> Symbol.symbol)5 1920 1 1320 1860 t
(...)1320 1980 w
(end)1200 2100 w
(signature SYMBOLTABLE =)2 1380 1 1080 2340 t
(sig)1200 2460 w
(structure Symbol : SYMBOL)3 1500 1 1320 2580 t
(type var)1 480 1 1320 2700 t
(val bind : Symbol.symbol * var -> unit)7 2280 1 1320 2820 t
(...)1320 2940 w
(end)1200 3060 w
(signature PARSE_ARGS =)2 1320 1 1080 3300 t
(sig)1200 3420 w
(structure Lex : LEX)3 1140 1 1320 3540 t
(structure SymTab : SYMBOLTABLE)3 1800 1 1320 3660 t
(sharing Lex.Symbol = SymTab.Symbol)3 2040 1 1320 3780 t
(end)1200 3900 w
(functor Parse\(A: PARSE_ARGS\) =)3 1800 1 1080 4140 t
(struct ... A.SymTab.bind\(A.Lex.next\(\), v\) ... end)5 2940 1 1200 4260 t
10 I f
(Figure 2)1 347 1 2706 4440 t
10 R f
(The functor)1 468 1 970 4596 t
10 CW f
(Parse)1464 4596 w
10 R f
(essentially takes two structure arguments,)4 1671 1 1790 4596 t
10 CW f
(Lex)3487 4596 w
10 R f
(\(implementing a lexical analyzer\))3 1347 1 3693 4596 t
(and)720 4716 w
10 CW f
(SymTab)891 4716 w
10 R f
(\(implementing a symbol table\), which are bundled as components of a single parameter struc-)13 3762 1 1278 4716 t
( sharing specification in)3 969(ture. The)1 389 2 720 4836 t
10 CW f
(PARSE_ARGS)2107 4836 w
10 R f
(requires that the same)3 885 1 2736 4836 t
10 CW f
(Symbol)3650 4836 w
10 R f
( used in both)3 529(structure be)1 472 2 4039 4836 t
10 CW f
(Lex)720 4956 w
10 R f
(and)943 4956 w
10 CW f
(SymTab)1130 4956 w
10 R f
( insures that)2 519(. This)1 271 2 1490 4956 t
10 CW f
(Lex)2323 4956 w
10 R f
(and)2546 4956 w
10 CW f
(SymTab)2733 4956 w
10 R f
( as in the expression)4 878(can consistently interact,)2 1026 2 3136 4956 t
10 CW f
(A.Symtab.bind\(A.Lex.next\(\),v\))720 5076 w
10 R f
(, which is well-typed only if)5 1212 1 2460 5076 t
10 CW f
(A.Lex.Symbol.symbol)3714 5076 w
10 R f
(and)4896 5076 w
10 CW f
(A.Symtab.Symbol.symbol)720 5196 w
10 R f
(are the same type.)3 720 1 2065 5196 t
( are)1 148(An important point about datatype and structure declarations is that they)10 2901 2 970 5352 t
10 I f
(generative)4046 5352 w
10 R f
(, meaning that)2 573 1 4467 5352 t
(each time they are elaborated \()5 1296 1 720 5472 t
10 I f
(e.g.)2016 5472 w
10 R f
( a new, distinct)3 644(in a functor body as a result of functor applications\))9 2197 2 2199 5472 t
( example, in)2 491( For)1 189(structure or type is created.)4 1083 3 720 5592 t
10 CW f
(functor F \(\) =)3 840 1 1080 5772 t
(struct)1200 5892 w
(datatype t = A | B of t)7 1380 1 1320 6012 t
(end)1200 6132 w
(structure S1 = F\(\))3 1080 1 1080 6372 t
(structure S2 = F\(\))3 1080 1 1080 6492 t
(S1)720 6672 w
10 R f
(and)870 6672 w
10 CW f
(S2)1044 6672 w
10 R f
( structures and)2 594(are distinct)1 446 2 1194 6672 t
10 CW f
(S1.t)2265 6672 w
10 R f
(and)2536 6672 w
10 CW f
(S2.t)2711 6672 w
10 R f
(are distinct types, so)3 834 1 2982 6672 t
10 CW f
(S1.B\(S2.A\))3847 6672 w
10 R f
(is an ill-typed)2 562 1 4478 6672 t
(expression.)720 6792 w
( of structures\) are)3 748(On the other hand, simple type definitions \(whether occurring inside or outside)11 3322 2 970 6948 t
10 I f
(transparent)720 7068 w
10 R f
( instance, in)2 480( For)1 189(rather than generative.)2 894 3 1212 7068 t
cleartomark
showpage
saveobj restore
%%EndPage: 3 4
%%Page: 4 5
/saveobj save def
mark
5 pagesetup
10 R f
(- 4 -)2 166 1 2797 480 t
10 CW f
(structure IntOrd =)2 1080 1 1080 900 t
(struct)1200 1020 w
(type t = int)3 720 1 1320 1140 t
(fun le\(x,y\) = x <= y)5 1200 1 1320 1260 t
(end)1200 1380 w
10 R f
(the type)1 324 1 720 1560 t
10 CW f
(S.t)1074 1560 w
10 R f
(is identical to)2 549 1 1284 1560 t
10 CW f
(int)1863 1560 w
10 R f
( words, there is no information hiding or abstraction inherent in)10 2599( other)1 235(. In)1 163 3 2043 1560 t
( is pro-)2 283( applies even to the results of functor applications; type information)10 2718( This)1 229(the formation of structures.)3 1090 4 720 1680 t
(pagated through functor applications, so that after the declaration)8 2603 1 720 1800 t
10 CW f
(structure IntLexOrd = LexOrd \(IntOrd\))4 2220 1 1080 1980 t
(IntLexOrd.le)720 2160 w
10 R f
(has type)1 338 1 1473 2160 t
10 CW f
(int list * int list -> bool)6 1668 1 1844 2160 t
10 R f
( reflects the dependent product)4 1266(. This)1 262 2 3512 2160 t
(nature of functor signatures, and the fact that structures represent a form of)12 3169 1 720 2280 t
10 I f
(strong)3929 2280 w
10 R f
(dependent sum \(see)2 815 1 4225 2280 t
([9,11] for discussion of the relation between ML modules and dependent types\).)11 3203 1 720 2400 t
10 B f
( of modules)2 489(3. Implementation)1 808 2 720 2640 t
10 R f
(The principal tasks that an implementation must deal with are as follows:)11 2928 1 970 2796 t
( of signatures, structures, and functors.)5 1547(\(1\) representation)1 815 2 720 2952 t
( possible thinning of the)4 1039( matching, including instantiation of the signature template and)8 2665(\(2\) signature)1 616 3 720 3108 t
(matched structure.)1 737 1 970 3228 t
( application, including)2 897(\(3\) functor)1 538 2 720 3384 t
( formal signature to actual parameter, with possible thinning of the parameter.)11 3114(\(a\) matching)1 622 2 970 3540 t
( parameter to)2 552( of the result structure, including propagation of type information from)10 2947(\(b\) creation)1 571 3 970 3696 t
(result and generation of new instances of datatypes and structures.)9 2644 1 1220 3816 t
( and checking of sharing constraints.)5 1464(\(4\) representation)1 815 2 720 3972 t
(Most of these tasks have two parts, the)7 1569 1 970 4128 t
10 I f
(static)2568 4128 w
10 R f
(or compile-time task and the)4 1159 1 2814 4128 t
10 I f
(dynamic)4002 4128 w
10 R f
(or run-time task.)2 671 1 4369 4128 t
( main focus will be)4 766( Our)1 205(The run-time problems are straightforward and are discussed in the next subsection.)11 3349 3 720 4248 t
(on the static aspects of the module language, for which our principal implementation goals are:)14 3797 1 720 4368 t
( representation of structures having a given signature)7 2115(\(1\) compact)1 588 2 720 4524 t
( functor application, with minimal duplication of static \()8 2310( signature matching and)3 978(\(2\) efficient)1 582 3 720 4680 t
10 I f
(i.e.)4590 4680 w
10 R f
(symbol)4745 4680 w
(table\) information)1 724 1 970 4800 t
( representation and checking of sharing constraints.)6 2054(\(3\) efficient)1 582 2 720 4956 t
10 B f
( representations and processes.)3 1321(3.1. Dynamic)1 583 2 720 5196 t
10 R f
( and types have no)4 791( Signatures)1 483(The run-time representations of modules are remarkably simple [1].)8 2796 3 970 5352 t
( as a record whose)4 760( structure is represented)3 971( A)1 129(run-time representation \320 they exist only at the static level.)9 2460 4 720 5472 t
(components represent the dynamic structure components \()6 2407 1 720 5592 t
10 I f
(i.e.)3127 5592 w
10 R f
(substructures, values, and exceptions\) in a)5 1753 1 3287 5592 t
( functor is represented as an ordinary function closure, and functor application)11 3489( A)1 155(canonical order.)1 676 3 720 5712 t
( The)1 209( to a record representing the argument structure.)7 1945(corresponds to the normal application of this function)7 2166 3 720 5832 t
( code to construct the thinned)5 1254(thinning coercions associated with signature matching give rise to in-line)9 3066 2 720 5952 t
(record.)720 6072 w
(In the middle-end of the compiler, all module constructs are reduced to the same simple lambda-)15 4070 1 970 6228 t
( that is used for the core ML constructs of value declarations and)12 2781(calculus based intermediate language)3 1539 2 720 6348 t
( of the existence of the module constructs \320)8 1794( effect, the back-end of the compiler is unaware)8 1902(expressions. In)1 624 3 720 6468 t
(they have been reduced to common notions of records and functions.)10 2753 1 720 6588 t
10 B f
( Representations)1 713(3.2. Static)1 444 2 720 6828 t
10 R f
( and structures can be modeled more or less directly on the)11 2557(A naive representation of signatures)4 1513 2 970 6984 t
( a structure is modeled by an)6 1256( There)1 300( [5,6].)1 259(semantic constructs used in the operational static semantics)7 2505 4 720 7104 t
(environment)720 7224 w
10 I f
(E)1263 7224 w
10 R f
( static binding \(type, structure,)4 1277(that maps component identifiers to the appropriate sort of)8 2401 2 1362 7224 t
cleartomark
showpage
saveobj restore
%%EndPage: 4 5
%%Page: 5 6
/saveobj save def
mark
6 pagesetup
10 R f
(- 5 -)2 166 1 2797 480 t
(variable, etc.\), and a)3 814 1 720 840 t
10 I f
(stamp)1561 840 w
10 R f
(,*)1800 840 w
10 I f
(n)1902 840 w
10 R f
( structure:)1 405(, that uniquely identifies the)4 1127 2 1952 840 t
10 I f
(str)3512 840 w
10 S f
(=)3658 840 w
10 R f
(\()3753 840 w
10 I f
(n)3794 840 w
10 R f
(,)3852 840 w
10 I f
(E)3885 840 w
10 R f
( can view a structure)4 837(\). We)1 249 2 3954 840 t
( signature is then a)4 749( A)1 122( labeled by component names.)4 1212(as a tree or dag with nodes labeled by stamps and edges)11 2237 4 720 960 t
( set of)2 288(structure together with a designated)4 1509 2 720 1080 t
10 I f
(bound)2564 1080 w
10 R f
(or)2861 1080 w
10 I f
(schematic)2991 1080 w
10 R f
(stamps occurring within the structure:)4 1603 1 3437 1080 t
10 I f
(sig)720 1200 w
10 S f
(=)877 1200 w
10 R f
(\()972 1200 w
10 I f
(N)1013 1200 w
10 R f
(\) \()1 74 1 1088 1200 t
10 I f
(n)1170 1200 w
10 R f
(,)1228 1200 w
10 I f
(E)1261 1200 w
10 R f
(\).)1330 1200 w
( graphs in Figure 4 \(adapted)5 1153(We illustrate this with the definitions in Figure 3 and the corresponding)11 2917 2 970 1356 t
(from [6]\), in which)3 792 1 720 1476 t
10 I f
(\(a\))1546 1476 w
10 R f
(represents the structure)2 943 1 1696 1476 t
10 CW f
(C)2673 1476 w
10 R f
(and)2767 1476 w
10 I f
(\(b\))2945 1476 w
10 R f
(represents the signature)2 958 1 3094 1476 t
10 CW f
(SIGC)4085 1476 w
10 R f
( convention)1 477(. Our)1 238 2 4325 1476 t
(for distinguishing between constant and bound stamps is that metavariables)9 3053 1 720 1596 t
10 I f
(k)3803 1596 w
7 I f
(i)3858 1616 w
10 R f
(range over constant stamps,)3 1124 1 3916 1596 t
(while metavariables)1 811 1 720 1716 t
10 I f
(x)1566 1716 w
7 I f
(i)1621 1736 w
10 R f
( is a more concise alternative to the)7 1474( This)1 237( stamps in a signature.)4 927(range over bound)2 718 4 1684 1716 t
( emphasize the distinction by using solid)6 1640(separate specification of the graph and the set of bound stamps We)11 2680 2 720 1836 t
( structure will)2 585( A)1 137( with constant stamps and open circles for nodes with bound stamps.)11 2907(circles for nodes)2 691 4 720 1956 t
( The)1 223( only bound stamps.)3 860(always contain only constant stamps, while a signature will typically contain)10 3237 3 720 2076 t
(graphs are simplified by showing only structure components, but type components are dealt with similarly.)14 4274 1 720 2196 t
10 CW f
( SIGA =)2 420( signature)1 1920(structure A =)2 780 3 1080 2496 t
(struct sig)1 2340 1 1200 2616 t
( t)1 120( type)1 1680(type t = int)3 720 3 1320 2736 t
( f : t -> t)5 660( val)1 1440(fun f n = 2 * n)6 900 3 1320 2856 t
(end end)1 2340 1 1200 2976 t
( =)1 180( SIGB)1 300( signature)1 1920(structure B =)2 780 4 1080 3216 t
(struct sig)1 2340 1 1200 3336 t
( BA: SIGA)2 540( structure)1 1740(structure BA = A)3 960 3 1320 3456 t
( g: BA.t -> BA.t)4 960( val)1 1080(fun g x = BA.f\(x\) + 1)6 1260 3 1320 3576 t
(end end)1 2340 1 1200 3696 t
( SIGC =)2 420( signature)1 1920(structure C =)2 780 3 1080 3936 t
(struct sig)1 2340 1 1200 4056 t
( CA : SIGA)3 600( structure)1 1740(structure CA = A)3 960 3 1320 4176 t
( CB : SIGB)3 600( structure)1 1740(structure CB = B)3 960 3 1320 4296 t
( CA.t)1 300( ->)1 240( h: CA.t)2 480( val)1 1020(fun h x = CB.g\(CA.f x\))5 1320 5 1320 4416 t
(end end)1 2340 1 1200 4536 t
10 I f
(Figure 3)1 347 1 2706 4716 t
cleartomark
saveobj restore
%%BeginGlobal
%
% Version 3.3 drawing procedures for dpost. Automatically pulled in, but only
% when needed.
%

/inpath false def
/savematrix matrix def

/Dl {
	inpath
		{pop pop neg lineto}
		{newpath neg moveto neg lineto stroke}
	ifelse
} bind def

/De {
	/y1 exch 2 div def
	/x1 exch 2 div def
	/savematrix savematrix currentmatrix def
	neg exch x1 add exch translate
	x1 y1 scale
	0 0 1 0 360
	inpath
		{1 0 moveto arc savematrix setmatrix}
		{newpath arc savematrix setmatrix stroke}
	ifelse
} bind def

/Da {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arc}
		{newpath arc stroke}
	ifelse
} bind def

/DA {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arcn}
		{newpath arcn stroke}
	ifelse
} bind def

/Ds {
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/y0 exch def
	/x0 exch def
	x0 5 x1 mul add 6 div
	y0 5 y1 mul add -6 div
	x2 5 x1 mul add 6 div
	y2 5 y1 mul add -6 div
	x1 x2 add 2 div
	y1 y2 add -2 div
	inpath
		{curveto}
		{newpath x0 x1 add 2 div y0 y1 add -2 div moveto curveto stroke}
	ifelse
} bind def
%%EndGlobal
/saveobj save def
mark
10 R f
1818 4914 72 72 De
2214 5274 72 72 De
1818 5634 72 72 De
2222 5249 1880 4938 Dl
2222 5249 2157 5214 Dl
2223 5249 2182 5188 Dl
1881 5609 2223 5298 Dl
1880 5609 1921 5548 Dl
1881 5609 1946 5574 Dl
1854 5598 1854 4950 Dl
1854 5598 1836 5526 Dl
1854 5598 1872 5526 Dl
10 I f
(k)1695 4934 w
7 R f
(1)1750 4954 w
10 I f
(k)2311 5294 w
7 R f
(3)2366 5314 w
10 I f
(k)1695 5654 w
7 R f
(2)1750 5674 w
10 R f
(CB)2077 5114 w
(BA)2077 5474 w
(CA)1690 5294 w
10 CW f
(structure C)1 660 1 1524 5870 t
3474 4914 72 72 De
3078 5274 72 72 De
3870 5274 72 72 De
3870 5670 72 72 De
3141 5249 3483 4938 Dl
3140 5249 3181 5188 Dl
3141 5249 3206 5214 Dl
3878 5249 3536 4938 Dl
3878 5249 3813 5214 Dl
3879 5249 3838 5188 Dl
3906 5634 3906 5310 Dl
3906 5634 3888 5562 Dl
3906 5634 3924 5562 Dl
10 I f
(x)3571 4934 w
7 R f
(1)3626 4954 w
10 I f
(x)2955 5294 w
7 R f
(2)3010 5314 w
10 I f
(x)3967 5294 w
7 R f
(3)4022 5314 w
10 I f
(x)3967 5690 w
7 R f
(4)4022 5710 w
10 R f
(CA CB)1 719 1 3148 5114 t
(BA)3931 5492 w
10 CW f
(signature SIGC)1 840 1 3090 5870 t
10 I f
(Figure 4)1 347 1 2706 6048 t
10 R f
(The purpose of a signature matching)5 1481 1 970 6324 t
10 CW f
(S: SIG)1 364 1 2480 6324 t
10 R f
(is to produce a structure)4 979 1 2874 6324 t
10 CW f
(S')3883 6324 w
10 R f
(that has exactly the form)4 1007 1 4033 6324 t
(specified by)1 486 1 720 6444 t
10 CW f
(SIG)1232 6444 w
10 R f
( the identity \()3 536(and yet shares)2 567 2 1438 6444 t
10 I f
(i.e.)2541 6444 w
10 R f
(the stamps\) of)2 566 1 2688 6444 t
10 CW f
(S)3279 6444 w
10 R f
( some cases,)2 496(. In)1 158 2 3339 6444 t
10 CW f
(S)4018 6444 w
10 R f
(and)4103 6444 w
10 CW f
(S')4272 6444 w
10 R f
(are identical, as)2 623 1 4417 6444 t
(when)720 6564 w
10 CW f
(S)966 6564 w
10 R f
(had already matched the signature)4 1387 1 1056 6564 t
10 CW f
(SIG)2474 6564 w
10 R f
( other cases)2 477(. In)1 164 2 2654 6564 t
10 CW f
(S')3326 6564 w
10 R f
(is a thinned version of)4 912 1 3477 6564 t
10 CW f
(S)4420 6564 w
10 R f
(having fewer)1 529 1 4511 6564 t
(components or components whose types are generic instances of their types in)11 3323 1 720 6684 t
10 CW f
(S)4086 6684 w
10 R f
( product of)2 474(. Another)1 420 2 4146 6684 t
(matching is the realization map, whose use in functor applications is explained in Section 3.5.)14 3749 1 720 6804 t
8 S1 f
(__________________)720 6904 w
8 R f
( rather than the term ``name'' used in [6,7], since ``name'' could also refer to)14 2467(*We prefer the term ``stamp'' for this purpose,)7 1493 2 720 7004 t
(the identifier to which a structure is bound or an identifier bound within a structure.)14 2656 1 720 7104 t
cleartomark
showpage
saveobj restore
%%EndPage: 5 6
%%Page: 6 7
/saveobj save def
mark
7 pagesetup
10 R f
(- 6 -)2 166 1 2797 480 t
(We can think of)3 667 1 970 840 t
10 CW f
(SIG)1671 840 w
10 R f
( type scheme or polytype in the core ML)8 1705(as a scheme analogous to a generic)6 1450 2 1885 840 t
( The)1 214( playing the role of generic type variables in a type scheme.)11 2477(type system [4], with the bound stamps)6 1629 3 720 960 t
( the substitution represented by the realization)6 1866(product of matching is then an instance of this scheme under)10 2454 2 720 1080 t
( Mads Tofte, including a version of the principal)8 1955( details of this analogy have been worked out by)9 1960(map. The)1 405 3 720 1200 t
(typing theorem of [4].)3 882 1 720 1320 t
( would make a copy of the signature)7 1471(A naive implementation of matching)4 1479 2 970 1476 t
10 CW f
(SIG)3948 1476 w
10 R f
(, in the process replac-)4 912 1 4128 1476 t
(ing each bound stamp by the corresponding constant stamp from)9 2655 1 720 1596 t
10 CW f
(S)3408 1596 w
10 R f
( involve copying most of)4 1028( would)1 283(. This)1 261 3 3468 1596 t
( since we have to instantiate the type specifications of values and)11 2752(the environment part of the signature,)5 1568 2 720 1716 t
( the environment or)3 815( However,)1 450( substructures themselves.)2 1066(exceptions as well as instantiating the types and)7 1989 4 720 1836 t
( the signature can be regarded as a template relative to its type and substructure com-)15 3500(symbol table part of)3 820 2 720 1956 t
( type)1 213( instance, a)2 480( For)1 206(ponents, which are the only parts that need to change during signature matching.)12 3421 4 720 2076 t
(specification like)1 689 1 720 2196 t
10 CW f
(f: t->t)1 424 1 1438 2196 t
10 R f
( the type component)3 828(can remain fixed if it is interpreted relative to)8 1845 2 1891 2196 t
10 CW f
(t)4594 2196 w
10 R f
( can)1 168(. We)1 218 2 4654 2196 t
( carrying the bound stamps and use the rest of the informa-)11 2420(abstract out the type and structure components)6 1900 2 720 2316 t
( is)1 100( This)1 236( all instances of the signature.)5 1227(tion in a signature as an unchanging template that can be shared by)12 2757 4 720 2436 t
(the familiar)1 467 1 720 2556 t
10 I f
(structure sharing)1 696 1 1216 2556 t
10 R f
(idea first proposed by Boyer and Moore in the context of resolution theorem)12 3099 1 1941 2556 t
( use of structure sharing in the)6 1269( The)1 215( exploited in the implementation of Prolog [13].)7 1986(proving [3] and later)3 850 4 720 2676 t
( a clear advantage)3 725(basic ML type system has been considered, but in that context it does not appear to have)16 3595 2 720 2796 t
( the case of signature matching, however, the)7 1909( In)1 148( copying.)1 387(over the simpler approach of instantiation by)6 1876 4 720 2916 t
( typically of considerable volume, so structure sharing is quite effec-)10 2812(shared information in the template is)5 1508 2 720 3036 t
(tive in saving space relative to copying.)6 1584 1 720 3156 t
( basic datatypes used to represent type constructors, structures and signatures)10 3180(The definitions of the)3 890 2 970 3312 t
( representations of structures and signatures both use the)8 2281( The)1 208( 5.)1 103(are given in Figure)3 769 4 720 3432 t
10 CW f
(Structure)4109 3432 w
10 R f
(datatype,)4677 3432 w
( the value of the)4 647(and differ only in)3 696 2 720 3552 t
10 CW f
(kind)2089 3552 w
10 R f
(field. The)1 414 1 2355 3552 t
10 CW f
(stamp)2795 3552 w
10 R f
(field contains the identifying stamp, the)5 1593 1 3121 3552 t
10 CW f
(table)4740 3552 w
10 R f
( of bind-)2 362(is the environment component represented as a hash table mapping symbols to the various sorts)14 3958 2 720 3672 t
( the)1 155(ings, and)1 368 2 720 3792 t
10 CW f
(env)1276 3792 w
10 R f
( The)1 213(field contains a pair of instance vectors for type and structure components.)11 3065 2 1489 3792 t
10 CW f
(sign)4800 3792 w
10 R f
(field in a signature to identify the signature \(the)8 1919 1 720 3912 t
10 CW f
(stamp)2666 3912 w
10 R f
(field will have a formal value representing a bound)8 2048 1 2992 3912 t
( and con-)2 383( Bound)1 323( it identifies the signature the structure is an instantiation of, if any.)12 2753(stamp\); in a structure)3 861 4 720 4032 t
( value are constant stamps,)4 1125(stant stamps are both represented as integers; stamps greater than some base)11 3195 2 720 4152 t
( a given signature, bound stamps are canonically num-)8 2209( Within)1 331(while stamps less than that value are bound.)7 1780 3 720 4272 t
(bered starting from 0.)3 865 1 720 4392 t
10 CW f
(datatype tycon)1 840 1 1080 4572 t
(= TYCON of {stamp : stamp, ...})6 1860 1 1200 4692 t
(| INDtyc of int list)4 1200 1 1200 4812 t
(datatype Structure)1 1080 1 1080 5052 t
(= STRstr of)2 660 1 1200 5172 t
({stamp : stamp,)2 900 1 1440 5292 t
( stamp option,)2 840(sign :)1 420 2 1500 5412 t
(table : symtable,)2 1020 1 1500 5532 t
( strenv,)1 480(env :)1 420 2 1500 5652 t
( strkind})1 540(kind :)1 420 2 1500 5772 t
(| INDstr of int)3 900 1 1200 5892 t
(and strkind)1 660 1 1080 6132 t
(= STRkind)1 540 1 1200 6252 t
(| SIGkind of)2 720 1 1200 6372 t
({share : sharespec,)2 1140 1 1440 6492 t
(bindings : binding list,)3 1440 1 1500 6612 t
(stampcounts : {s : int, t : int}})7 1980 1 1500 6732 t
10 I f
(Figure 5)1 347 1 2706 6912 t
10 R f
(The)970 7188 w
10 CW f
(INDtyc)1165 7188 w
10 R f
(and)1565 7188 w
10 CW f
(INDstr)1749 7188 w
10 R f
( structures are used within the symbol)6 1611(forms of type constructors and)4 1280 2 2149 7188 t
( term)1 208( The)1 205( stored in the instance vectors.)5 1209(table to refer indirectly to components)5 1533 4 720 7308 t
10 CW f
(INDtyc[)3900 7308 w
10 I f
(i)4320 7308 w
10 CW f
(])4348 7308 w
10 R f
(refers to the ith)3 607 1 4433 7308 t
cleartomark
showpage
saveobj restore
%%EndPage: 6 7
%%Page: 7 8
/saveobj save def
mark
8 pagesetup
10 R f
(- 7 -)2 166 1 2797 480 t
(element of the type instance vector, while)6 1690 1 720 840 t
10 CW f
(INDtyc[)2439 840 w
10 I f
(i)2859 840 w
10 CW f
(,)2887 840 w
10 I f
(j)2947 840 w
10 CW f
(])2975 840 w
10 R f
( element of the type vector of the)7 1357(refers to the jth)3 619 2 3064 840 t
( type specifications)2 771( The)1 205(ith element of the structure vector.)5 1375 3 720 960 t
10 CW f
(f: t -> t)3 540 1 1080 1140 t
(h: CA.t -> CA.t)3 900 1 1080 1260 t
10 R f
(from Figure 3 are represented internally as)6 1701 1 720 1440 t
10 CW f
(f: INDtyc[0] -> INDtyc[0])3 1500 1 1080 1620 t
(h: INDtyc[0,0] -> INDtyc[0,0])3 1740 1 1080 1740 t
10 R f
(The representation of the entire signature SIGC from Figure 3 can be summarized as follows:)14 3732 1 720 1920 t
10 CW f
(SIGC:)1080 2100 w
(stamp: 0)1 540 1 1200 2220 t
( => INDstr 0)3 720(table: CA)1 600 2 1200 2340 t
(CB => INDstr 1)3 840 1 1680 2460 t
( VAR: INDtyc[0,0] -> INDtyc[0,0])4 1920(h =>)1 300 2 1680 2580 t
(strenv: structures = <SIGA',SIGB'>)3 2040 1 1200 2700 t
( <>)1 180(types =)1 720 2 1680 2820 t
(SIGA':)1080 3060 w
(stamp: 1)1 540 1 1200 3180 t
( INDtyc[0])1 600(table: t =>)2 780 2 1200 3300 t
( VAR: INDtyc[0] -> INDtyc[0])4 1680(f =>)1 300 2 1680 3420 t
(strenv: structures = <>)3 1380 1 1200 3540 t
( <DUMMY 0>)2 600(types =)1 720 2 1680 3660 t
(SIGB':)1080 4020 w
(stamp: 2)1 540 1 1200 4140 t
( => INDstr 0)3 720(table: BA)1 600 2 1200 4260 t
( VAR: BA.t -> BA.t)4 1080(g =>)1 300 2 1680 4380 t
(strenv: structures = <SIGA''>)3 1740 1 1200 4500 t
( <>)1 180(types =)1 720 2 1680 4620 t
(SIGA'':)1080 4860 w
(stamp: 3)1 540 1 1200 4980 t
( INDtyc[0])1 600(table: t =>)2 780 2 1200 5100 t
( VAR: INDtyc[0] -> INDtyc[0])4 1680(f =>)1 300 2 1680 5220 t
(strenv: structures = <>)3 1380 1 1200 5340 t
( <DUMMY 1>)2 600(types =)1 720 2 1680 5460 t
10 R f
(Note that there are two copies of the signature)8 1856 1 720 5676 t
10 CW f
(SIGA)2603 5676 w
10 R f
(, identified as)2 545 1 2843 5676 t
10 CW f
(SIGA')3416 5676 w
10 R f
(and)3744 5676 w
10 CW f
(SIGA'')3916 5676 w
10 R f
(, each with its own)4 764 1 4276 5676 t
( duplication is required to get the canonical numbering of stamps for each component of)14 3536(stamp. This)1 493 2 720 5796 t
10 CW f
(SIGC)4775 5796 w
10 R f
(,)5015 5796 w
( table component from)3 910(but each of these copies shares the original symbol)8 2030 2 720 5916 t
10 CW f
(SIGA)3686 5916 w
10 R f
(.)3926 5916 w
10 CW f
(DUMMY 0)1 421 1 4002 5916 t
10 R f
(and)4449 5916 w
10 CW f
(DUMMY 1)1 421 1 4619 5916 t
10 R f
( type constructor components, which have their own separate numbering within the context of)13 3859(are dummy)1 461 2 720 6036 t
10 CW f
(SIGC)720 6156 w
10 R f
(.)960 6156 w
10 B f
( Matching)1 436(3.3. Signature)1 617 2 720 6396 t
10 R f
( signature matching in terms of the representation described above.)9 2759(We now describe the process of)5 1311 2 970 6552 t
(Given a signature)2 704 1 720 6672 t
10 CW f
(sig)1449 6672 w
10 R f
(and structure)1 518 1 1654 6672 t
10 CW f
(str)2197 6672 w
10 R f
(represented as)1 567 1 2402 6672 t
cleartomark
showpage
saveobj restore
%%EndPage: 7 8
%%Page: 8 9
/saveobj save def
mark
9 pagesetup
10 R f
(- 8 -)2 166 1 2797 480 t
10 CW f
(sig = STRstr{stamp = x, sign = n, table = sigtab, env = sigenv,)13 3780 1 1080 900 t
(kind = SIGkind{bindings,stampcounts,sharing}})2 2700 1 1860 1020 t
(str = STRstr{stamp = k, sign = s, table = strtab, env = strenv,)13 3780 1 1080 1260 t
(kind=STRkind})1860 1380 w
10 R f
( whether)1 350(we first check)2 565 2 720 1560 t
10 CW f
(s=n)1664 1560 w
10 R f
(, and if so return)4 673 1 1873 1560 t
10 CW f
(str)2575 1560 w
10 R f
(, because)1 369 1 2755 1560 t
10 CW f
(str)3153 1560 w
10 R f
(is already an instance of)4 980 1 3362 1560 t
10 CW f
(sig)4371 1560 w
10 R f
(. Otherwise)1 489 1 4551 1560 t
(we attempt to construct a new instance of)7 1760 1 720 1680 t
10 CW f
(sig)2520 1680 w
10 R f
( instance vectors,)2 718( start by allocating a new pair of)7 1394(. We)1 228 3 2700 1680 t
10 CW f
(newenv={s=sNew,t=tNew})720 1800 w
10 R f
(, based on the size information in the)7 1609 1 2040 1800 t
10 CW f
(stampcounts)3693 1800 w
10 R f
( we)1 161(field. Then)1 482 2 4397 1800 t
(iterate through the list of all of)6 1263 1 720 1920 t
10 CW f
(sig)2015 1920 w
10 R f
('s bindings \()2 514 1 2195 1920 t
10 I f
(i.e.)2709 1920 w
10 R f
(specifications\), which is available in the field)6 1847 1 2862 1920 t
10 CW f
(bind-)4740 1920 w
(ings)720 2040 w
10 R f
( each structure binding)3 921(. For)1 217 2 960 2040 t
10 CW f
(\(id,INDstr i\))1 783 1 2126 2040 t
10 R f
(in)2937 2040 w
10 I f
(sig)3043 2040 w
10 R f
(, we look up a structure named)6 1252 1 3160 2040 t
10 I f
(id)4441 2040 w
10 R f
(in)4548 2040 w
10 CW f
(strtab)4655 2040 w
10 R f
(.)5015 2040 w
( it does exist, we recursively match it against the substructure signa-)11 2790( If)1 122(If it does not exist, matching fails.)6 1408 3 720 2160 t
(ture bound to)2 539 1 720 2280 t
10 CW f
(id)1287 2280 w
10 R f
(in)1435 2280 w
10 CW f
(sig)1541 2280 w
10 R f
( of the structure vector in)5 1026(\(obtained as the ith element)4 1116 2 1749 2280 t
10 CW f
(sigenv)3920 2280 w
10 R f
(\), and if successful)3 760 1 4280 2280 t
( result to define the ith element of)7 1372(use the)1 284 2 720 2400 t
10 CW f
(sNew)2404 2400 w
10 R f
( for type bindings, where we check that the type)9 1945(. Similarly)1 451 2 2644 2400 t
(constructor bound in)2 851 1 720 2520 t
10 CW f
(str)1608 2520 w
10 R f
( specification in sig \()4 890(agrees with the)2 628 2 1825 2520 t
10 I f
(e.g.)3343 2520 w
10 R f
( For)1 202(they must have the same arity\).)5 1313 2 3525 2520 t
(value specifications like)2 971 1 720 2640 t
10 CW f
(x: ty)1 303 1 1719 2640 t
10 R f
(, we interpret indirect type constructors in)6 1690 1 2022 2640 t
10 CW f
(ty)3740 2640 w
10 R f
(with respect to)2 594 1 3888 2640 t
10 CW f
(newenv)4509 2640 w
10 R f
(and)4896 2640 w
(check that we have a generic instance of the type of the corresponding component of)14 3408 1 720 2760 t
10 CW f
(str)4155 2760 w
10 R f
( value)1 244(. Checking)1 461 2 4335 2760 t
( \()1 61(components has no effect on the instance vectors, but if necessary)10 2670 2 720 2880 t
10 I f
(i.e.)3451 2880 w
10 R f
(if)3601 2880 w
10 CW f
(sig)3690 2880 w
10 R f
(has fewer value components)3 1142 1 3898 2880 t
(than)720 3000 w
10 CW f
(str)924 3000 w
10 R f
( translation between the old and new runtime positions of the components and)12 3215(\) we calculate the)3 721 2 1104 3000 t
(collect this information in a thinning specification to be applied at runtime.)11 2998 1 720 3120 t
(When we have successfully matched all the bindings in)8 2213 1 970 3276 t
10 CW f
(sig)3208 3276 w
10 R f
( the result structure)3 771(we build)1 347 2 3413 3276 t
10 CW f
(str\302)4557 3276 w
10 R f
(using)4823 3276 w
10 CW f
(sig)720 3396 w
10 R f
(\302s table and)2 460 1 900 3396 t
10 CW f
(sign)1385 3396 w
10 R f
(,)1625 3396 w
10 CW f
(str)1675 3396 w
10 R f
(\302s stamp , and)3 555 1 1855 3396 t
10 CW f
(newenv)2435 3396 w
(str' = STRstr {stamp=n, sign=SOME k, table=sigtab,)6 3000 1 1080 3576 t
(env=newenv, kind=STRkind})1 1500 1 1980 3696 t
10 R f
(Finally any sharing constraints \(from sharing\) are checked as described in Section 3.5, and we return)15 4052 1 720 3876 t
10 CW f
(str')4800 3876 w
10 R f
( that the bulk of the information in the signature)9 1918( Note)1 244(and a thinning specification as the result of the match.)9 2158 3 720 3996 t
(is in)1 170 1 720 4116 t
10 CW f
(sigtab)915 4116 w
10 R f
(, and this is directly shared with the instantiation)8 1941 1 1275 4116 t
10 CW f
(str\302)3241 4116 w
10 R f
(.)3481 4116 w
(As a shortcut, when elaborating a declaration like)7 1979 1 970 4272 t
10 CW f
(structure S: SIG = struct)4 1500 1 1080 4452 t
10 I f
(declarations)2640 4452 w
10 CW f
(end)3200 4452 w
10 R f
( we elaborate)2 537( Instead)1 341( before doing the signature match.)5 1379(we do not build the structure on the right-hand side)9 2063 4 720 4632 t
( and then do the signature matching using the top-level)9 2258(the body declarations in the top-level environment)6 2062 2 720 4752 t
(environment in the place of the target structure.)7 1896 1 720 4872 t
10 B f
( and functor application)3 1032(3.4. Functors)1 583 2 720 5112 t
10 R f
(In the static semantics a functor)5 1297 1 970 5268 t
10 I f
(F)2298 5268 w
10 R f
( parameter and)2 606(is modeled by a pair of structures representing the)8 2044 2 2390 5268 t
(body of the functor, and two sets of bound stamps.)9 2023 1 720 5388 t
10 I f
(F)1220 5568 w
10 S f
(=)1330 5568 w
10 R f
(\()1434 5568 w
10 I f
(N)1475 5568 w
10 R f
(\) \()1 74 1 1550 5568 t
10 I f
(S)1632 5568 w
7 I f
(p)1693 5588 w
10 R f
(, \()1 90 1 1744 5568 t
10 I f
(N)1842 5568 w
10 S f
(\242)1917 5568 w
10 R f
(\))1950 5568 w
10 I f
(S)1999 5568 w
7 I f
(b)2060 5588 w
10 R f
(\))2111 5568 w
10 I f
(N)720 5748 w
10 R f
(is the set of bound stamps in the parameter structure, which may also occur in the body)16 3577 1 818 5748 t
10 I f
(S)4426 5748 w
7 I f
(b)4487 5768 w
10 R f
(, while)1 279 1 4530 5748 t
10 I f
(N)4841 5748 w
10 S f
(\242)4916 5748 w
10 R f
(is)4973 5748 w
( apply)1 247( To)1 161( generative elements of the functor body.)6 1638(the set of stamps associated with)5 1312 4 720 5868 t
10 I f
(F)4103 5868 w
10 R f
(to an argument struc-)3 851 1 4189 5868 t
(ture)720 5988 w
10 I f
(A)900 5988 w
10 R f
(we perform the following steps)4 1248 1 986 5988 t
10 I f
(r)1220 6168 w
10 S f
(=)1308 6168 w
10 I f
(match)1412 6168 w
10 R f
(\( \()1 74 1 1664 6168 t
10 I f
(N)1746 6168 w
10 R f
(\))1821 6168 w
10 I f
(S)1870 6168 w
7 I f
(p)1931 6188 w
10 R f
(,)1982 6168 w
10 I f
(A)2039 6168 w
10 R f
(\))2108 6168 w
10 I f
(g)1220 6348 w
10 S f
(=)1319 6348 w
10 I f
(generate)1423 6348 w
10 R f
(\()1780 6348 w
10 I f
(N)1821 6348 w
10 S f
(\242)1896 6348 w
10 R f
(\))1929 6348 w
10 I f
(F)1220 6528 w
10 R f
(\()1289 6528 w
10 I f
(A)1330 6528 w
10 R f
(\))1399 6528 w
10 S f
(=)1489 6528 w
10 I f
(g)1593 6528 w
10 R f
(\()1651 6528 w
10 I f
(r)1692 6528 w
10 R f
(\()1739 6528 w
10 I f
(S)1780 6528 w
7 I f
(b)1841 6548 w
10 R f
(\) \))1 74 1 1892 6528 t
( the parameter signature and the argument to produce a realization map)11 2928(That is, we match)3 731 2 720 6708 t
10 I f
(r)4412 6708 w
10 R f
(, then we gen-)3 589 1 4451 6708 t
(erate a realization map)3 911 1 720 6828 t
10 I f
(g)1658 6828 w
10 R f
( bound stamp in)3 645(that maps each)2 597 2 1735 6828 t
10 I f
(N)3003 6828 w
10 S f
(\242)3078 6828 w
10 R f
(to a unique, new constant stamp, and finally we)8 1911 1 3129 6828 t
(produce the result structure by using)5 1456 1 720 6948 t
10 I f
(r)2201 6948 w
10 R f
(and)2265 6948 w
10 I f
(g)2434 6948 w
10 R f
(to instantiate the body structure.)4 1285 1 2509 6948 t
( to represent functors)3 854( datatype used)2 575( The)1 207(The implementation of functors follows this scheme closely.)7 2434 4 970 7104 t
(is defined by)2 516 1 720 7224 t
cleartomark
showpage
saveobj restore
%%EndPage: 8 9
%%Page: 9 10
/saveobj save def
mark
10 pagesetup
10 R f
(- 9 -)2 166 1 2797 480 t
10 CW f
(datatype Functor = FUNCTOR of)4 1740 1 1080 900 t
({param : Structure,)2 1140 1 2340 1020 t
( Structure,)1 660(body :)1 420 2 2400 1140 t
(tycCount : int})2 900 1 2400 1260 t
10 R f
(The bound stamps in the)4 991 1 720 1440 t
10 CW f
(param)1738 1440 w
10 R f
( numbered from 0 to)4 833(structure are)1 497 2 2065 1440 t
10 I f
(n)3423 1440 w
10 R f
(and these may also occur in the)6 1271 1 3501 1440 t
10 CW f
(body)4800 1440 w
10 R f
( stamps in the body are numbered from)7 1763(structure. Generative)1 889 2 720 1560 t
10 I f
(n)3425 1560 w
10 S f
(+)3499 1560 w
10 R f
(1 to)1 181 1 3570 1560 t
10 I f
(n)3804 1560 w
10 S f
(+)3878 1560 w
10 I f
(m)3949 1560 w
10 R f
( the value of)3 577(, which is)2 442 2 4021 1560 t
10 CW f
(tycCount)720 1680 w
10 R f
(.)1200 1680 w
(If the functor declaration provides an explicit result signature, as in)10 2681 1 970 1836 t
10 CW f
(functor F\(X : SIGP\) : SIGR = struct ... end)9 2580 1 1080 2016 t
10 R f
( in instance vectors\))3 822(the body will naturally be schematic \(i.e. the parts with bound stamps will be isolated)14 3498 2 720 2196 t
( if there is no)4 571( However,)1 451( matching between the body and the result signature.)8 2193(as a result of the signature)5 1105 4 720 2316 t
( of the body structure to get an instantiable)8 1813(result signature, we explicitly abstract these ``volatile'' parts)7 2507 2 720 2436 t
(scheme so that the body's symbol table may be shared by all structures produced by the functor.)16 3841 1 720 2556 t
( matching is performed between the parameter signature and the argu-)10 2828(To apply the functor, signature)4 1242 2 970 2712 t
( the body is instantiated using)5 1207( Then)1 258( in the parameter.)3 707(ment to build a realization map for the bound stamps)9 2148 4 720 2832 t
( bound stamps as required.)4 1100(this realization map and introducing new constant stamps to replace generative)10 3220 2 720 2952 t
( within the body)3 671(The actual algorithm is more complicated than this because functor application can occur)12 3649 2 720 3072 t
(of functor declaration, as in)4 1100 1 720 3192 t
10 CW f
(functor F\(X : SIGP\) =)4 1260 1 1080 3372 t
(struct)1200 3492 w
(structure A = G\(X\))3 1080 1 1320 3612 t
(structure B = H\(A\))3 1080 1 1320 3732 t
(...)1320 3852 w
(end)1200 3972 w
10 R f
( like the applications of)4 942(In cases)1 318 2 720 4152 t
10 CW f
(G)2006 4152 w
10 R f
(and)2092 4152 w
10 CW f
(H)2262 4152 w
10 R f
(in this example, the actual parameter may contain parameter bound)9 2692 1 2348 4152 t
(and even generatively bound stamps, and the realization of the generative stamps in the body of)15 3956 1 720 4272 t
10 CW f
(G)4710 4272 w
10 R f
(and)4803 4272 w
10 CW f
(H)4980 4272 w
10 R f
(will themselves be generatively bound stamps.)5 1865 1 720 4392 t
10 B f
(3.5. Sharing)1 540 1 720 4632 t
10 R f
( between several parameter)3 1132(The purpose of sharing constraints is to insure a kind of compatibility)11 2938 2 970 4788 t
( equations)1 410( sharing constraints are expressed as sets of)7 1753( The)1 208(structures of a functor, as illustrated in Figure 2.)8 1949 4 720 4908 t
( kinds of sharing specifications: structure shar-)6 1899(between paths designating structures or types \(there are two)8 2421 2 720 5028 t
( signature.)1 418(ing and type sharing\) and they determine an equivalence relation amongst the components of the)14 3902 2 720 5148 t
( constraints in the representation of a signature is to force all com-)12 2765(The strategy for incorporating sharing)4 1555 2 720 5268 t
(ponents of an equivalence class to have the same stamp.)9 2240 1 720 5388 t
( they are directly equated in a sharing)7 1632(Two components may be required to share either because)8 2438 2 970 5544 t
( Thus)1 255( that are required to share.)5 1066(specification, or because they are corresponding components of structures)8 2999 3 720 5664 t
(if)720 5784 w
10 CW f
(X : sig)2 420 1 1080 5964 t
(structure C1 : SIGC)3 1140 1 1440 6084 t
(structure C2 : SIGC)3 1140 1 1440 6204 t
(sharing C1.CB = C2.CB)3 1260 1 1440 6324 t
(end)1320 6444 w
10 R f
(then)720 6624 w
10 CW f
(X.C1.CB = X.C2.CB)2 1042 1 928 6624 t
10 R f
(is directly specified, and)3 1009 1 2006 6624 t
10 CW f
(X.C1.CB.BA = X.C2.CB.BA)2 1402 1 3051 6624 t
10 R f
(is an inferred)2 550 1 4490 6624 t
( simply says that the complete sharing relation must be a congruence with respect to the)15 3554(consequence. This)1 766 2 720 6744 t
(operation of selecting a named substructure or type.)7 2068 1 720 6864 t
( must be)2 353( They)1 262( structures be constrained to share?)5 1434(Under what circumstances may two)4 1454 4 970 7020 t
10 I f
(consistent)4505 7020 w
10 R f
(, in)1 135 1 4905 7020 t
( particular,)1 436( In)1 137( possible to find a structure that could simultaneously match both of them.)12 3016(the sense that it is)4 731 4 720 7140 t
( forced to share do not necessarily have to share the same signature, and the fact that)16 3452(the structures that are)3 868 2 720 7260 t
cleartomark
showpage
saveobj restore
%%EndPage: 9 10
%%Page: 10 11
/saveobj save def
mark
11 pagesetup
10 R f
(- 10 -)2 216 1 2772 480 t
( idea is that various thinned versions of a given)9 1920( The)1 209( effect on their signature.)4 1016(they share does not have any)5 1175 4 720 840 t
( but they can still share because they are actually restricted views of)12 2734(structure may have different signatures,)4 1586 2 720 960 t
( matching, the)2 593( approach is supported by the fact that in signature)9 2133( This)1 241(their common ancestor structure.)3 1353 4 720 1080 t
( that this is not the approach)6 1169( Note)1 251( by the resultant structure.)4 1068(stamps of the matched structure are inherited)6 1832 4 720 1200 t
( structures are forced to agree by formation of a kind of union)12 2514(described in [6], where signatures of sharing)6 1806 2 720 1320 t
( verify that signatures that are specified to share are consistent, but if they are)14 3118( do not actually)3 622(signature. We)1 580 3 720 1440 t
(not, the signature containing the sharing specification can never be successfully matched.)11 3568 1 720 1560 t
( is)1 96( a union-find algorithm)3 939( First,)1 262(The processing of the sharing constraints is performed in two stages.)10 2773 4 970 1716 t
( direct and inferred, and to construct the equivalence classes for the)11 2742(used to determine all sharing relations,)5 1578 2 720 1836 t
( stage it is also possible to detect certain pathological sharing specifications, such)12 3333( this)1 176( At)1 156(sharing relation.)1 655 4 720 1956 t
( the signature is copied and each ele-)7 1499( Second,)1 373( identify a structure with one of its substructures.)8 1988(as trying to)2 460 4 720 2076 t
(ment of a given equivalence class is given the same representative stamp.)11 2933 1 720 2196 t
( con-)1 213( When a signature with sharing)5 1295( \(1\))1 176(There are two ways in which sharing information is used.)9 2386 4 970 2352 t
( used as a functor parameter, the identification of stamps in the signature will automatically insure)15 3937(straints is)1 383 2 720 2472 t
( checking,)1 421(that the sharing has the desired effect during type)8 2048 2 720 2592 t
10 I f
(i.e.)3225 2592 w
10 R f
(types that are specified to share will be)7 1632 1 3408 2592 t
( sharing relations specified in)4 1196( During signature matching, any)4 1314( \(2\))1 172(seen to be identical by the type checker.)7 1638 4 720 2712 t
( way to check this would be to make sure that)10 1905( One)1 224( structure.)1 407(the signature must also hold in the matched)7 1784 4 720 2832 t
( structure would cause a sin-)5 1154(the realization map was well defined, because a failure of sharing in the target)13 3166 2 720 2952 t
( expli-)1 263( the realization map is only)5 1105( However,)1 444(gle bound stamp to be mapped to more than one target stamp.)11 2508 4 720 3072 t
( the functor)2 478(citly constructed in the matching of functor parameters, where it is needed to help instantiate)14 3842 2 720 3192 t
( save the original sharing constraints as equations in the signa-)10 2517( it is more convenient to simply)6 1273(body. Hence)1 530 3 720 3312 t
(ture and check them explicitly in the target structure as part of signature matching.)13 3294 1 720 3432 t
10 B f
( with type checking)3 825(3.6. Relation)1 561 2 720 3672 t
10 R f
( checking)1 391(What is the relationship between the structures and signatures and the underlying ML type)13 3679 2 970 3828 t
( their)1 220( signatures and structures are carriers of type information \320 that is one of)13 3121(mechanism? Obviously)1 979 3 720 3948 t
( structure we get the same sort of bindings as)9 1827( we look up a value component of a)8 1441( When)1 290(principle purposes.)1 762 4 720 4068 t
(in the top-level environment, except that in some circumstances the type has been relativized to the)15 4320 1 720 4188 t
( vectors and it contains)4 929(structure's instance)1 774 2 720 4308 t
10 CW f
(INDtyc)2450 4308 w
10 R f
( basic variable lookup functions)4 1284( The)1 207(type constructors.)1 712 3 2837 4308 t
( by replacing them with the referenced type constructors)8 2314(have been defined to eliminate these indirections)6 2006 2 720 4428 t
( would appear to undo some of)6 1255( This)1 231( vectors, at the expense of partially copying the type.)9 2137(from the instance)2 697 4 720 4548 t
( copies tend to be)4 779(the savings achieved by the structure sharing representation of structures, but these)11 3541 2 720 4668 t
( type information in structures and)5 1419( The)1 213(ephemeral, and they are quickly and efficiently garbage-collected.)7 2688 3 720 4788 t
(signatures is, on the other hand, long-lived, so it is more critical to minimize their space requirements.)16 4079 1 720 4908 t
10 B f
(4. Conclusions)1 643 1 720 5148 t
10 R f
( implementing the Standard ML module features is to perform the compile-time)11 3370(The challenge of)2 700 2 970 5304 t
( dupli-)1 268(matchings and instantiations necessary to propagate and check type information with a minimum of)13 4052 2 720 5424 t
( has shown that a naive approach leads to an explosion in the size of)14 2765( Experience)1 500(cation of that information.)3 1055 3 720 5544 t
(the static representations.)2 1012 1 720 5664 t
( paper uses a structure sharing instantiation technique)7 2201(The implementation strategy described in this)5 1869 2 970 5820 t
( It)1 119( in its space requirements.)4 1072(instead of instantiation by copying, and has proved to be reasonably modest)11 3129 3 720 5940 t
(also has the advantage that it remains quite close in spirit to the formal static semantics.)15 3502 1 720 6060 t
( continues, and current topics of interest include explicit)8 2292(Work on the Standard ML module facilities)6 1778 2 970 6216 t
(functor signatures and the relation of the module constructs to separate compilation.)11 3356 1 720 6336 t
10 B f
(Acknowledgements)720 6576 w
10 R f
( inspired directly by the work done on the operational semantics of Standard)12 3135(This implementation is)2 935 2 970 6732 t
(ML by Robin Milner, Mads Tofte, and Bob Harper, and I have benefited from many discussions with them.)17 4320 1 720 6852 t
( Rothwell helped)2 697( Nick)1 251( prototype implementation of modules.)4 1586(Bob Harper passed on useful ideas from his)7 1786 4 720 6972 t
( valuable advice)2 702( Appel provided)2 705( Andrew)1 399(me explore the use of structure sharing in type checking.)9 2514 4 720 7092 t
( has been an equal)4 747(throughout and had a direct hand in the implementation of sharing specifications, and he)13 3573 2 720 7212 t
cleartomark
showpage
saveobj restore
%%EndPage: 10 11
%%Page: 11 12
/saveobj save def
mark
12 pagesetup
10 R f
(- 11 -)2 216 1 2772 480 t
(partner in the creation of Standard ML of New Jersey.)9 2161 1 720 840 t
10 B f
(References)720 1080 w
10 R f
( Appel and D. MacQueen,)4 1059(1. A.)1 347 2 720 1236 t
10 I f
( compiler)1 384(A Standard ML)2 623 2 2154 1236 t
10 R f
(, Proceedings of the Conference on Functional)6 1879 1 3161 1236 t
( Computer Architecture, Portland, September 1987, G. Kahn, ed., LNCS Vol. 274,)11 3346(Programming and)1 724 2 970 1356 t
(Springer-Verlag, 1987.)1 923 1 970 1476 t
( Boehm and A. Demers,)4 1021(2. H.-J.)1 444 2 720 1632 t
10 I f
(Implementing Russell)1 878 1 2225 1632 t
10 R f
(, Proceedings of SIGPLAN 86 Symposium on)6 1937 1 3103 1632 t
(Compiler Construction, Palo Alto, 1986, 186-195.)5 2009 1 970 1752 t
( Moore,)1 327( S. Boyer and J)4 648(3. R.)1 342 3 720 1908 t
10 I f
(The sharing of structure in theorem-proving programs)6 2249 1 2073 1908 t
10 R f
(, Machine Intelli-)2 718 1 4322 1908 t
(gence 7, B. Meltzer and D. Michie, eds., Edinburgh University Press, 1972, 101-116.)12 3404 1 970 2028 t
( Damas and R. Milner,)4 934(4. L.)1 336 2 720 2184 t
10 I f
(Principal type schemes for functional programs)5 1943 1 2021 2184 t
10 R f
(, Proceedings of 9th ACM)4 1076 1 3964 2184 t
(Symposium on Principles of Programming Languages, Albuquerque, 1982, 207-212.)8 3398 1 970 2304 t
( Harper, D. MacQueen, and R. Milner,)6 1543(5. R.)1 342 2 720 2460 t
10 I f
(Standard ML)1 531 1 2630 2460 t
10 R f
(, Laboratory for Foundations of Computer Sci-)6 1879 1 3161 2460 t
( Polymor-)1 409(ence, Dept. of Computer Science, University of Edinburgh, ECS-LFCS-86-2, 1986. \(Also)10 3661 2 970 2580 t
(phism II, 2, October 1985.\))4 1090 1 970 2700 t
( Harper, R. Milner, and M. Tofte,)6 1369(6. R.)1 342 2 720 2856 t
10 I f
( discipline for program modules)4 1313(A type)1 257 2 2461 2856 t
10 R f
(, Proceedings TAPSOFT)2 1009 1 4031 2856 t
(87, LNCS Vol. 250, Springer-Verlag, New York, 1987, 308-319.)8 2605 1 970 2976 t
( Harper, R. Milner, and M. Tofte,)6 1363(7. R.)1 342 2 720 3132 t
10 I f
( Version I)2 404(The semantics of Standard ML,)4 1269 2 2454 3132 t
10 R f
(, Laboratory for Foun-)3 913 1 4127 3132 t
( ECS-LFCS-87-)1 654(dations of Computer Science, Dept. of Computer Science, University of Edinburgh,)10 3416 2 970 3252 t
(36, 1986.)1 375 1 970 3372 t
( MacQueen,)1 491(8. D.)1 347 2 720 3528 t
10 I f
(Modules for Standard ML)3 1057 1 1588 3528 t
10 R f
( earlier version appeared in Proceedings ACM)6 1881( \(An)1 210(, in [5].)2 304 3 2645 3528 t
(Symposium on Lisp and Functional Programming, Austin, 1984.\))7 2629 1 970 3648 t
( MacQueen,)1 490(9. D.)1 347 2 720 3804 t
10 I f
( to express modular structure)4 1193(Using dependent types)2 910 2 1585 3804 t
10 R f
(, Proceedings 13th ACM Sympo-)4 1352 1 3688 3804 t
( Beach, 1986, 277-286.)3 932( Petersburg)1 477(sium on Principles of Programming Languages, St.)6 2044 3 970 3924 t
( f,)1 63( ")1 -4( Martin-Lo)1 449(10. P.)1 331 4 720 4080 t
10 I f
( computer programming)2 995(Constructive mathematics and)2 1232 2 1592 4080 t
10 R f
(, Sixth International Congress)3 1221 1 3819 4080 t
(for Logic, Methodology, and Philosophy of Science, North Holland, Amsterdam, 1982, 153-175.)11 3880 1 970 4200 t
( C. Mitchell and R. Harper,)5 1123(11. J.)1 314 2 720 4356 t
10 I f
(The essence of ML)3 764 1 2188 4356 t
10 R f
( ACM Symposium on Principles)4 1335(, Proceedings 15th)2 753 2 2952 4356 t
(of Programming Languages, San Diego, 1988, 28-46.)6 2142 1 970 4476 t
( Dept. of)2 394( Dissertation,)1 579( Semantics and Polymorphic Type Inference, Ph.D.)6 2181( Tofte, Operational)2 802(12. M.)1 364 5 720 4632 t
(Computer Science, University of Edinburgh, 1987.)5 2037 1 970 4752 t
( H. D. Warren,)3 622(13. D.)1 347 2 720 4908 t
10 I f
(Implementing PROLOG - Compiling Predicate Logic Programs, Vol. I)8 2917 1 1724 4908 t
10 R f
(, Dept. of)2 399 1 4641 4908 t
(Artificial Intelligence Report No. 39, University of Edinburgh, 1977.)8 2758 1 970 5028 t
cleartomark
showpage
saveobj restore
%%EndPage: 11 12
%%Trailer
done
%%Pages: 12
%%DocumentFonts: Times-Bold Times-Italic Courier Times-Roman Symbol Times-Roman
