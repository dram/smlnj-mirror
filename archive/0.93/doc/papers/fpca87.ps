%!PS
%%Version: 3.3
%%DocumentFonts: (atend)
%%Pages: (atend)
%%EndComments
%
% Version 3.3 prologue for troff files.
%

/#copies 1 store
/aspectratio 1 def
/formsperpage 1 def
/landscape false def
/linewidth .3 def
/magnification 1 def
/margin 0 def
/orientation 0 def
/resolution 720 def
/rotation 1 def
/xoffset 0 def
/yoffset 0 def

/roundpage true def
/useclippath true def
/pagebbox [0 0 612 792] def

/R  /Times-Roman def
/I  /Times-Italic def
/B  /Times-Bold def
/BI /Times-BoldItalic def
/H  /Helvetica def
/HI /Helvetica-Oblique def
/HB /Helvetica-Bold def
/HX /Helvetica-BoldOblique def
/CW /Courier def
/CO /Courier def
/CI /Courier-Oblique def
/CB /Courier-Bold def
/CX /Courier-BoldOblique def
/PA /Palatino-Roman def
/PI /Palatino-Italic def
/PB /Palatino-Bold def
/PX /Palatino-BoldItalic def
/Hr /Helvetica-Narrow def
/Hi /Helvetica-Narrow-Oblique def
/Hb /Helvetica-Narrow-Bold def
/Hx /Helvetica-Narrow-BoldOblique def
/KR /Bookman-Light def
/KI /Bookman-LightItalic def
/KB /Bookman-Demi def
/KX /Bookman-DemiItalic def
/AR /AvantGarde-Book def
/AI /AvantGarde-BookOblique def
/AB /AvantGarde-Demi def
/AX /AvantGarde-DemiOblique def
/NR /NewCenturySchlbk-Roman def
/NI /NewCenturySchlbk-Italic def
/NB /NewCenturySchlbk-Bold def
/NX /NewCenturySchlbk-BoldItalic def
/ZD /ZapfDingbats def
/ZI /ZapfChancery-MediumItalic def
/S  /S def
/S1 /S1 def
/GR /Symbol def

/inch {72 mul} bind def
/min {2 copy gt {exch} if pop} bind def

/setup {
	counttomark 2 idiv {def} repeat pop

	landscape {/orientation 90 orientation add def} if
	/scaling 72 resolution div def
	linewidth setlinewidth
	1 setlinecap

	pagedimensions
	xcenter ycenter translate
	orientation rotation mul rotate
	width 2 div neg height 2 div translate
	xoffset inch yoffset inch neg translate
	margin 2 div dup neg translate
	magnification dup aspectratio mul scale
	scaling scaling scale

	/Symbol /S Sdefs cf
	/Times-Roman /S1 S1defs cf
	0 0 moveto
} def

/pagedimensions {
	useclippath userdict /gotpagebbox known not and {
		/pagebbox [clippath pathbbox newpath] def
		roundpage currentdict /roundpagebbox known and {roundpagebbox} if
	} if
	pagebbox aload pop
	4 -1 roll exch 4 1 roll 4 copy
	landscape {4 2 roll} if
	sub /width exch def
	sub /height exch def
	add 2 div /xcenter exch def
	add 2 div /ycenter exch def
	userdict /gotpagebbox true put
} def

/pagesetup {
	/page exch def
	currentdict /pagedict known currentdict page known and {
		page load pagedict exch get cvx exec
	} if
} def

/decodingdefs [
	{counttomark 2 idiv {y moveto show} repeat}
	{neg /y exch def counttomark 2 idiv {y moveto show} repeat}
	{neg moveto {2 index stringwidth pop sub exch div 0 32 4 -1 roll widthshow} repeat}
	{neg moveto {spacewidth sub 0.0 32 4 -1 roll widthshow} repeat}
	{counttomark 2 idiv {y moveto show} repeat}
	{neg setfunnytext}
] def

/setdecoding {/t decodingdefs 3 -1 roll get bind def} bind def

/w {neg moveto show} bind def
/m {neg dup /y exch def moveto} bind def
/done {/lastpage where {pop lastpage} if} def

/f {
	dup /font exch def findfont exch
	dup /ptsize exch def scaling div dup /size exch def scalefont setfont
	linewidth ptsize mul scaling 10 mul div setlinewidth
	/spacewidth ( ) stringwidth pop def
} bind def

/changefont {
	/fontheight exch def
	/fontslant exch def
	currentfont [
		1 0
		fontheight ptsize div fontslant sin mul fontslant cos div
		fontheight ptsize div
		0 0
	] makefont setfont
} bind def

/sf {f} bind def

/cf {
	dup length 2 idiv
	/entries exch def
	/chtab exch def
	/newfont exch def

	findfont dup length 1 add dict
	/newdict exch def
	{1 index /FID ne {newdict 3 1 roll put} {pop pop} ifelse} forall

	newdict /Metrics entries dict put
	newdict /Metrics get
	begin
		chtab aload pop
		1 1 entries {pop def} for
		newfont newdict definefont pop
	end
} bind def

%
% A few arrays used to adjust reference points and character widths in some
% of the printer resident fonts. If square roots are too high try changing
% the lines describing /radical and /radicalex to,
%
%	/radical	[0 -75 550 0]
%	/radicalex	[-50 -75 500 0]
%
% Move braceleftbt a bit - default PostScript character is off a bit.
%

/Sdefs [
	/bracketlefttp		[201 500]
	/bracketleftbt		[201 500]
	/bracketrighttp		[-81 380]
	/bracketrightbt		[-83 380]
	/braceleftbt		[203 490]
	/bracketrightex		[220 -125 500 0]
	/radical		[0 0 550 0]
	/radicalex		[-50 0 500 0]
	/parenleftex		[-20 -170 0 0]
	/integral		[100 -50 500 0]
	/infinity		[10 -75 730 0]
] def

/S1defs [
	/underscore		[0 80 500 0]
	/endash			[7 90 650 0]
] def
%
% Tries to round clipping path dimensions, as stored in array pagebbox, so they
% match one of the known sizes in the papersizes array. Lower left coordinates
% are always set to 0.
%

/roundpagebbox {
    7 dict begin
	/papersizes [8.5 inch 11 inch 14 inch 17 inch] def

	/mappapersize {
		/val exch def
		/slop .5 inch def
		/diff slop def
		/j 0 def
		0 1 papersizes length 1 sub {
			/i exch def
			papersizes i get val sub abs
			dup diff le {/diff exch def /j i def} {pop} ifelse
		} for
		diff slop lt {papersizes j get} {val} ifelse
	} def

	pagebbox 0 0 put
	pagebbox 1 0 put
	pagebbox dup 2 get mappapersize 2 exch put
	pagebbox dup 3 get mappapersize 3 exch put
    end
} bind def

%%EndProlog
%%BeginSetup
mark
/resolution 720 def
setup
2 setdecoding
%%EndSetup
%%Page: 1 1
/saveobj save def
mark
1 pagesetup
13 B f
(A Standard ML Compiler)3 1450 1 2155 1230 t
11 I f
(Andrew W. Appel)2 773 1 2452 1570 t
11 R f
(*)3253 1570 w
(Dept. of Computer Science)3 1196 1 2282 1825 t
(Princeton University)1 913 1 2423 1995 t
(Princeton, NJ 08544)2 902 1 2429 2165 t
11 I f
(David B. MacQueen)2 898 1 2389 2505 t
11 R f
(\262)3315 2505 w
(AT&T Bell Laboratories)2 1092 1 2334 2760 t
(Murray Hill, NJ 07974)3 1009 1 2375 2930 t
11 I f
(ABSTRACT)2619 3420 w
11 R f
( of the functional language)4 1249(Standard ML is a major revision of earlier dialects)8 2351 2 1080 3736 t
( in Standard ML.)3 792( describe the first compiler written for Standard ML)8 2394(ML. We)1 414 3 1080 3866 t
( incorporates a number of novel features and techniques, and is)10 2991(The compiler)1 609 2 1080 3996 t
(probably the largest system written to date in Standard ML.)9 2622 1 1080 4126 t
( lead-)1 254(Great attention was paid to modularity in the construction of the compiler,)11 3346 2 1080 4292 t
( of the modular capabilities of Standard ML.)7 2045(ing to a successful large-scale test)5 1555 2 1080 4422 t
( is useful for purposes other than compilation, and the back end is)12 2989(The front end)2 611 2 1080 4552 t
( The)1 237( for the VAX and MC68020\).)5 1362(easily retargetable \(we have code generators)5 2001 3 1080 4682 t
( design of)2 452(module facilities of Standard ML were taken into account early in the)11 3148 2 1080 4812 t
( com-)1 253(the compiler, and they particularly influenced the environment management)8 3347 2 1080 4942 t
( example, the symbol table structure is designed for)8 2325( For)1 216(ponent of the front end.)4 1059 3 1080 5072 t
(fast access to opened structures.)4 1404 1 1080 5202 t
( integrates parsing, environ-)3 1265(The front end of the compiler is a single phase that)10 2335 2 1080 5368 t
( middle end uses a sophisticated deci-)6 1673( The)1 228( and type checking.)3 860(ment management,)1 839 4 1080 5498 t
( code for functions and)4 1088(sion tree scheme to produce efficient pattern matching)7 2512 2 1080 5628 t
( translated into)2 660(case expressions. The abstract syntax produced by the front end is)10 2940 2 1080 5758 t
(a simple lambda-calculus-based intermediate representation that lends itself to)8 3600 1 1080 5888 t
( was taken)2 463( care)1 209( Special)1 380(easy case analysis and optimization in the code generator.)8 2548 4 1080 6018 t
(in designing the runtime data structures for fast allocation and garbage collection.)11 3588 1 1080 6148 t
( compiler and present some of the data)7 1706(We describe the overall organization of the)6 1894 2 1080 6314 t
( conclude with)2 691( We)1 229( in its various phases.)4 1034(representations and algorithms used)3 1646 4 1080 6444 t
( and about compilers for)4 1186(some lessons learned about the ML language itself)7 2414 2 1080 6574 t
(modern functional languages.)2 1302 1 1080 6704 t
8 S1 f
(__________________)720 6830 w
8 R f
(* Supported by NSF Grant DCR-8603453 and by a Digital Equipment Corporation Faculty Incentive Grant.)14 3450 1 720 6930 t
(\262 Part of this author's work was done while an SERC Senior Visiting Fellow at the University of Edinburgh.)18 3466 1 720 7030 t
cleartomark
showpage
saveobj restore
%%EndPage: 1 1
%%Page: 1 2
/saveobj save def
mark
2 pagesetup
11 B f
(1. Introduction)1 739 1 720 890 t
11 R f
( was)1 206( It)1 131( is a typed functional language roughly based on Landin's ISWIM [1].)11 3183(The ML language)2 800 4 720 1096 t
( machine-assisted)1 781(originally designed in the mid-1970s as the metalanguage of Edinburgh LCF, a)11 3539 2 720 1266 t
( were in part motivated by its intended use to express proof tac-)12 2832(reasoning system, and its features)4 1488 2 720 1436 t
( an attractive vehicle for general purpose symbolic program-)8 2664( these features made it)4 989(tics. However,)1 667 3 720 1606 t
( com-)1 259(ming, and it wasn't long before free-standing implementations appeared, such as Cardelli's)11 4061 2 720 1776 t
( on an)2 295( 1983 a group of interested parties began work)8 2155( In)1 161(piler[2], which was written in Pascal.)5 1709 4 720 1946 t
( ML)1 213( Standard)1 466( 4, 5, 6].)3 339( Standard ML [3,)3 818(extensive revision of the language design that lead to)8 2484 5 720 2116 t
( Hope[7], another)2 830(extended the earlier versions in certain ways and incorporated ideas from)10 3490 2 720 2286 t
( also included a module facility that signifi-)7 1930( It)1 124( in Edinburgh in the late 1970s.)6 1393(language developed)1 873 4 720 2456 t
( ML versions and supports large-scale)5 1684(cantly extends the basic polymorphic type system of earlier)8 2636 2 720 2626 t
(program development.)1 994 1 720 2796 t
( in recent years. Luca)4 1016(Several implementations of Standard ML have been under development)8 3304 2 720 3136 t
( Meanwhile,)1 599( ML.)1 243(Cardelli's compiler was modified to be partially compatible with Standard)9 3478 3 720 3306 t
( its own variant of ML by Kevin Mitchell)8 1861(Cardelli's original compiler had been reimplemented in)6 2459 2 720 3476 t
( of Robert)2 476(and Alan Mycroft at Edinburgh, and this compiler was also modified with the help)13 3844 2 720 3646 t
( new compiler was)3 871( A)1 150(Harper to make it conform fairly closely to the Standard ML definition.)11 3299 3 720 3816 t
( as the implementa-)3 891( 9])1 109( by David Matthews, using his Poly language [8,)8 2220(developed in Cambridge)2 1100 4 720 3986 t
( INRIA, a group headed by Gerard Huet and)8 2056( At)1 179(tion language, and sharing the Poly back end.)7 2085 3 720 4156 t
( called CAML[10] that is intermediate)5 1763(Guy Cousineau have been implementing an ML variant)7 2557 2 720 4326 t
(between the LCF version and Standard ML.)6 1933 1 720 4496 t
( motivations)1 556( of the main)3 547( One)1 244(Yet there was still justification for another Standard ML compiler.)9 2973 4 720 4836 t
( a compiler)2 532( Such)1 295( a compiler that would itself be implemented in Standard ML.)10 2914(was to build)2 579 4 720 5006 t
( be a good basis for building meta-level tools \(pretty-)9 2451( would)1 314( It)1 134(would have several advantages.)3 1421 4 720 5176 t
( could share data types and code with the com-)9 2113( that)1 227( analyzers, debuggers, etc.\))3 1211(printers, program)1 769 4 720 5346 t
( be used in ML application programs or in an ML programming environ-)12 3363(piler itself and might)3 957 2 720 5516 t
( serve as a large-scale test of the Standard ML design, particularly the module)13 3435( would also)2 512(ment. It)1 373 3 720 5686 t
( a new compiler)3 746( Finally,)1 411(facility, which was the most novel and untested part of the language.)11 3163 3 720 5856 t
( opportunity to try out new implementation strategies \(for code generation, optimiza-)11 3804(provides an)1 516 2 720 6026 t
( simple lambda-calculus intermediate represen-)4 2085( A)1 137( modules, for instance\).)3 1041(tion, type checking, and)3 1057 4 720 6196 t
( for research in evaluation)4 1160(tation makes the compiler much cleaner, and could also provide a base)11 3160 2 720 6366 t
( and others\) for)3 829(algorithms \(call-by-value, normal-order, lazy, combinator-based, parallel,)5 3491 2 720 6536 t
(lambda-calculus.)720 6706 w
( call-by-value, higher-order functional language, many of the conventional compilation tech-)10 4119(As a)1 201 2 720 7046 t
( distinguishing features of ML are its)6 1656( The)1 230(niques for functional languages apply to Standard ML.)7 2434 3 720 7216 t
cleartomark
showpage
saveobj restore
%%EndPage: 1 2
%%Page: 2 3
/saveobj save def
mark
3 pagesetup
11 R f
(- 2 -)2 183 1 2788 490 t
( types for expressing disjoint unions and)6 1876(polymorphic type system, the notion of concrete data)7 2444 2 720 890 t
( of pattern matching based on the constructor-functions associated with data)10 3513(recursion, the use)2 807 2 720 1060 t
( updateable variables are intro-)4 1381(types, the use of typed, value-carrying exceptions, the fact that all)10 2939 2 720 1230 t
( application of the)3 809(duced explicitly by)2 853 2 720 1400 t
11 B f
(ref)2414 1400 w
11 R f
(constructor, and modular programming based on signa-)6 2462 1 2578 1400 t
( specifications\), structures \(implementations of interfaces\) and functors \(functions)8 3656(tures \(interface)1 664 2 720 1570 t
( features, singly or in combination, produce novel challenges)8 2696( These)1 319(from structures to structures\).)3 1305 3 720 1740 t
( can be effectively exploited in the writing of a com-)10 2382( also, it turns out,)4 792( They)1 287(in compiler design.)2 859 4 720 1910 t
(piler.)720 2080 w
( then bootstrapped to)3 959(The compiler was written using the Edinburgh Standard ML compiler and)10 3361 2 720 2420 t
( compilers; and the runtime)4 1242( the compiler shares no code with previous)7 1946( However,)1 493(compile itself.)1 639 4 720 2590 t
(system, written in C with the help of Peter Weinberger, is also completely new.)13 3496 1 720 2760 t
11 B f
(2. Architecture)1 733 1 720 3100 t
11 R f
( front end consists of a recursive)6 1481( The)1 235( compiler described here consists of three phases.)7 2233(The ML)1 371 4 720 3306 t
( into which environment management \(determining scopes, associating binding and)9 3695(descent parser)1 625 2 720 3476 t
( output of the front end is)6 1138( The)1 229(applied occurrences of variables\) and type checking are integrated.)8 2953 3 720 3646 t
( front end makes no decisions about runtime locations of)9 2577( The)1 235(a fully typed abstract syntax tree.)5 1508 3 720 3816 t
( deci-)1 251( simply assigns them unique identifiers, and the back end makes representation)11 3519(variables. It)1 550 3 720 3986 t
(sions.)720 4156 w
(The middle end performs a simple translation of this abstract tree into an untyped lambda calculus)15 4320 1 720 4496 t
( of pattern-matching as one-dimensional)4 1791(representation, and produces an optimized representation)5 2529 2 720 4666 t
(switch expressions.)1 855 1 720 4836 t
( target machine code using a largely machine-)7 2153(The back end transforms the lambda form into)7 2167 2 720 5176 t
( expressions given to)3 941( The)1 231( an ``abstract machine'' interface.)4 1499(independent code generator based on)4 1649 4 720 5346 t
( the code generator)3 848(the back end never contain free variables; this simplifies the interface between)11 3472 2 720 5516 t
(and the runtime system.)3 1052 1 720 5686 t
11 B f
( Front End)2 522(3. The)1 323 2 720 6026 t
11 R f
( data-)1 260(The front end of the compiler consists of a conventional lexical analyzer, abstract syntax)13 4060 2 720 6232 t
( a recursive descent parser that)5 1407(types, environment management machinery, a type checker, and)7 2913 2 720 6402 t
(drives the lexical analysis, environment management and type checking.)8 3185 1 720 6572 t
cleartomark
showpage
saveobj restore
%%EndPage: 2 3
%%Page: 3 4
/saveobj save def
mark
4 pagesetup
11 R f
(- 3 -)2 183 1 2788 490 t
11 B f
( syntax)1 334(3.1. Abstract)1 629 2 720 890 t
11 R f
( is a collection of data types defining the)8 1808( There)1 313( implemented in two layers.)4 1238(The abstract syntax is)3 961 4 720 1096 t
( instance, the)2 583( For)1 212(``bare'' abstract syntax that forms a minimal kernel of the language.)10 3026 3 720 1266 t
11 I f
(expression)4571 1266 w
11 R f
(data type is defined as follows:)5 1365 1 720 1436 t
11 CW f
(datatype exp = VARexp of var ref)6 2112 1 1278 1626 t
(| CONexp of datacon)3 1254 1 2136 1756 t
(| INTexp of int)3 990 1 2136 1886 t
(| REALexp of real)3 1122 1 2136 2016 t
(| STRINGexp of string)3 1386 1 2136 2146 t
(| RECORDexp of \(numberedLabel * exp\) list)6 2706 1 2136 2276 t
(| SEQexp of exp list)4 1320 1 2136 2406 t
(| APPexp of exp * exp)5 1386 1 2136 2536 t
(| CONSTRAINTexp of exp * ty)5 1782 1 2136 2666 t
(| HANDLEexp of exp * handler)5 1848 1 2136 2796 t
(| RAISEXexp of exp)3 1188 1 2136 2926 t
(| LETexp of dec * exp)5 1386 1 2136 3056 t
(| CASEexp of exp * rule list)6 1848 1 2136 3186 t
(| FNexp of rule list)4 1320 1 2136 3316 t
11 R f
( bare syntax types augmented with a small number of)9 2465(The full abstract syntax consists of these)6 1855 2 720 3546 t
( derived forms are implemented as)5 1621( These)1 337( such as clausal function definitions.)5 1701(derived forms,)1 661 4 720 3716 t
(functions that generate the appropriate expansion into bare syntax forms.)9 3202 1 720 3886 t
11 B f
( management)1 631(3.2. Environment)1 846 2 720 4226 t
11 R f
( the kinds of bindings found)5 1245(We separate the idea of symbol-table manipulation from the details of)10 3075 2 720 4432 t
( lookup, and scope)3 876( is a generic environment mechanism that performs binding,)8 2791( There)1 328(in ML.)1 325 4 720 4602 t
( takes the binding type as a parameter.)7 1726(management functions; it is implemented as a functor that)8 2594 2 720 4772 t
( union of the specific categories of identifiers \(variables, construc-)9 2985(The binding type is a disjoint)5 1335 2 720 4942 t
(tors, type constructors, etc.\):)3 1252 1 720 5112 t
11 CW f
(datatype binding)1 1056 1 1344 5302 t
(= VARbind of var)3 1056 1 1476 5432 t
11 I f
(\(* variables *\))2 647 1 3192 5432 t
11 CW f
(| CONbind of datacon)3 1320 1 1476 5562 t
11 I f
(\(* data constructors *\))3 1012 1 3192 5562 t
11 CW f
(| EXNbind of datacon)3 1320 1 1476 5692 t
11 I f
(\(* exceptions *\))2 700 1 3192 5692 t
11 CW f
(| TYCbind of tycon ref)4 1452 1 1476 5822 t
11 I f
(\(* type constructors \(patchable\) *\))4 1531 1 3192 5822 t
11 CW f
(| TYVbind of tyvar)3 1188 1 1476 5952 t
11 I f
(\(* type variables *\))3 857 1 3192 5952 t
11 CW f
(| SIGbind of signatureVar)3 1650 1 1476 6082 t
11 I f
(\(* signatures *\))2 697 1 3192 6082 t
11 CW f
(| STRbind of structureVar)3 1650 1 1476 6212 t
11 I f
(\(* structures *\))2 678 1 3192 6212 t
11 CW f
(| FCTbind of functorVar)3 1518 1 1476 6342 t
11 I f
(\(* functors *\))2 599 1 3192 6342 t
11 CW f
(| FIXbind of fixity)3 1254 1 1476 6472 t
11 I f
(\(* infix attributes of variables *\))5 1436 1 3192 6472 t
11 R f
( call binding tables or simply tables, to map)8 1974(The generic environment uses hash tables, which we)7 2346 2 720 6702 t
( to hold the actual)4 841( environment consists roughly of a stack of tables)8 2293( The)1 240(symbols to bindings.)2 946 4 720 6872 t
( the)1 165( Only)1 279( a stack of ``remarks'' that records information about bindings and scopes.)11 3308(bindings and)1 568 4 720 7042 t
(stack of tables is used when looking up symbols, while the remarks are used when entering and)16 4320 1 720 7212 t
cleartomark
showpage
saveobj restore
%%EndPage: 3 4
%%Page: 4 5
/saveobj save def
mark
5 pagesetup
11 R f
(- 4 -)2 183 1 2788 490 t
( the stack of tables:)4 889( are two types of tables in)6 1184( There)1 319(leaving scopes and when binding symbols.)5 1928 4 720 890 t
( bindings in a previously defined structure that has been ``opened'', and)11 3325(those representing the)2 995 2 720 1060 t
( let-bound, and function)3 1144(those representing bindings in currently open scopes \(i.e. top-level,)8 3176 2 720 1230 t
(parameter bindings\).)1 908 1 720 1400 t
( bindings a symbol may)4 1066(As indicated above, the binding type is a union of all the various kinds of)14 3254 2 720 1740 t
( tables therefore hold bindings of all kinds, and the specialized access functions for)13 3844(have. The)1 476 2 720 1910 t
( it is possible for a)5 832( Thus)1 280(variables, constructors, etc. search only for bindings of the desired kind.)10 3208 3 720 2080 t
( as a variable, a type con-)6 1148(symbol to simultaneously have several bindings of different kinds, e.g.)9 3172 2 720 2250 t
( share the same name space, so it)7 1480( variables and constructors)3 1182( However,)1 487(structor, and an exception.)3 1171 4 720 2420 t
( bound as a variable and a constructor, despite)8 2092(is not possible for a symbol to be simultaneously)8 2228 2 720 2590 t
( information associated with a symbol,)5 1736( The)1 232( bindings.)1 442(the fact that these are two disjoint kinds of)8 1910 4 720 2760 t
( is contained in the projected value of)7 1665(such as the type of a variable or the signature of a structure,)12 2655 2 720 2930 t
(its binding \(e.g. the var or structureVar\).)6 1779 1 720 3100 t
11 B f
(3.3. Parsing)1 583 1 720 3440 t
11 R f
( tokens,)1 354(The lexical analyzer is conventional, turning the input character stream into a stream of)13 3966 2 720 3646 t
( reads tokens from)3 835( parser)1 302( The)1 234(recognizing keywords, identifiers, and string and numeric literals.)7 2949 4 720 3816 t
( syntax tree containing type and binding information.)7 2355(the lexical analyzer and produces an abstract)6 1965 2 720 3986 t
( parser for infix operators in expressions.)6 1832(Parsing is done by recursive descent, with a precedence)8 2488 2 720 4156 t
( most compilers for Algol-like languages, management of)7 2561(Unlike previous ML compilers, but like)5 1759 2 720 4326 t
( entered into the)3 714( are)1 162( identifiers)1 503(the compile-time environment is done at the same time as parsing:)10 2941 4 720 4496 t
(environment as they are defined, and looked up in the environment as they are used.)14 3698 1 720 4666 t
( have their)2 481(Two particular problems crop up in parsing ML: identifiers may be declared infix, or)13 3839 2 720 5006 t
( syntactically)1 602(precedence changed, in lexically-scoped declarations; and constructors cannot be)8 3718 2 720 5176 t
( handle the infix-operator problem, the lexical analyzer makes)8 2791( To)1 185(distinguished from identifiers.)2 1344 3 720 5346 t
( as infix operators.)3 872(no distinction between ordinary identifiers and identifiers that are declared)9 3448 2 720 5516 t
( the symbol table to)4 890(Instead, the operator-precedence expression-parser looks up each identifier in)8 3430 2 720 5686 t
( construc-)1 440( Recognizing)1 616( precedence is.)2 657(determine if it has a fixity binding, and if it does, what its)12 2607 4 720 5856 t
( scheme works)2 692( This)1 272( be done similarly by looking up identifiers in the environment.)10 2993(tors can)1 363 4 720 6026 t
(nicely in the presence of modules and)6 1749 1 720 6196 t
11 B f
(open)2512 6196 w
11 R f
( a module)2 464(declarations: if)1 698 2 2782 6196 t
11 I f
(A)3987 6196 w
11 R f
( a scope)2 381(is opened in)2 562 2 4097 6196 t
(\(even a local scope\), and an infix identifier)7 1904 1 720 6366 t
11 I f
(i)2656 6366 w
11 R f
(is used from)2 552 1 2719 6366 t
11 I f
(A)3303 6366 w
11 R f
(, the precedence parser will automati-)5 1670 1 3370 6366 t
(cally find the precedence declaration of)5 1730 1 720 6536 t
11 I f
(i)2478 6536 w
11 R f
(in the environment.)2 859 1 2537 6536 t
( example, in the)3 748( For)1 224( definitions.)1 542(Forward reference to identifiers is legal in mutually recursive)8 2806 4 720 6876 t
(function declaration:)1 911 1 720 7046 t
cleartomark
showpage
saveobj restore
%%EndPage: 4 5
%%Page: 5 6
/saveobj save def
mark
6 pagesetup
11 R f
(- 5 -)2 183 1 2788 490 t
11 CW f
(fun f\(a,b\) = if a=0 then b else g\(a-1\))8 2508 1 1080 910 t
(and g\(x\) = f\(x,x\))3 1122 1 1080 1040 t
11 R f
(the first occurrence of the identifier)5 1615 1 720 1270 t
11 CW f
(g)2413 1270 w
11 R f
(is in the body of)4 765 1 2519 1270 t
11 CW f
(f)3362 1270 w
11 R f
( is before the function)4 1016(, which)1 336 2 3428 1270 t
11 CW f
(g)4859 1270 w
11 R f
(is)4966 1270 w
( problem, all free identifiers found in the body of a recursive function)12 3198( handle this)2 534(declared. To)1 588 3 720 1440 t
( kept on a ``backpatch list;'' when the mutually recursive declarations are com-)12 3714(definition are)1 606 2 720 1610 t
( This)1 280( references to identifiers defined in those declarations are patched.)9 3156(pletely parsed, any)2 884 3 720 1780 t
( that constructors are not)4 1102( Note)1 273(extends straightforwardly to nested mutually recursive definitions.)6 2945 3 720 1950 t
(treated this way; constructors cannot be redefined by)7 2389 1 720 2120 t
11 B f
(fun)3147 2120 w
11 R f
(or)3345 2120 w
11 B f
(val rec)1 322 1 3474 2120 t
11 R f
(definitions, so they are not)4 1207 1 3833 2120 t
( just to)2 330( means, of course, that all identifiers must be looked up)10 2569( This)1 265(put on the backpatch list.)4 1156 4 720 2290 t
(determine if they are constructors.)4 1502 1 720 2460 t
11 B f
( Checking)1 475(3.4. Type)1 461 2 720 2800 t
11 R f
( basis of)2 389( The)1 237( is used at present.)4 854( 12])1 164( algorithm[11,)1 641(The conventional polymorphic type checking)4 2035 6 720 3006 t
( type terms by destructively instantiating type variables so that)9 2808(the algorithm is the unification of)5 1512 2 720 3176 t
( administration of generic or bound type variables is)8 2320( The)1 229( other types.)2 547(they become indirections to)3 1224 4 720 3346 t
( compilers, but generic types are still)6 1628(done more systematically than in the Cardelli and Edinburgh)8 2692 2 720 3516 t
( new type representation and type checking)6 1967( A)1 146( occurrence of a variable.)4 1152(copied for each applied)3 1055 4 720 3686 t
( structure sharing \(in the Boyer-Moore sense [13]\) has been prototyped with)11 3455(algorithm based on)2 865 2 720 3856 t
( scheme, a polymorphic type is represented as a scheme)9 2541( this new)2 416( In)1 156(the help of Nick Rothwell.)4 1207 4 720 4026 t
( instantiations share the)3 1066(whose bound variables are indices into an environment vector; different)9 3254 2 720 4196 t
(scheme but have different environment vectors.)5 2090 1 720 4366 t
( only certain predefined primitives)4 1567( Currently)1 489( limited extent.)2 689(Overloading is accommodated to a)4 1575 4 720 4706 t
( language for defining new)4 1186(such as ``+'' are overloaded, and there are no facilities provided by the)12 3134 2 720 4876 t
( implemented as in the Edinburgh compiler, where a type)9 2603( is)1 110( Overloading)1 612(overloaded identifiers.)1 995 4 720 5046 t
( a type that)3 495(scheme is associated with the overloaded identifier and each overloading \(variant\) has)11 3825 2 720 5216 t
( type of an occurrence of the identifier is matched)9 2265( contextual)1 493( The)1 234(is an instance of that scheme.)5 1328 4 720 5386 t
(against the scheme and the resulting instantiations of the scheme type variables is used to choose)15 4320 1 720 5556 t
( though more restrictive than the technique used in)8 2453( is simpler)2 514( This)1 279(the appropriate variant.)2 1074 4 720 5726 t
( as they were incomparable \(i.e. one)6 1638(Hope[7], where variants could have arbitrary types, as long)8 2682 2 720 5896 t
(was not an instance of another\).)5 1396 1 720 6066 t
11 B f
( and exception types)3 952(3.5. Reference)1 687 2 720 6406 t
11 R f
( new, and is based on the fact)7 1371(The treatment of references and exceptions with ``open'' types is)9 2949 2 720 6612 t
( be con-)2 355(that the contents of a reference cell cannot be constrained to be polymorphic, and so must)15 3965 2 720 6782 t
( following example illustrates the problem.)5 1895( The)1 226(sidered to be monomorphic.)3 1234 3 720 6952 t
cleartomark
showpage
saveobj restore
%%EndPage: 5 6
%%Page: 6 7
/saveobj save def
mark
7 pagesetup
11 R f
(- 6 -)2 183 1 2788 490 t
11 CW f
(let val s = ref \(fn x => x\))8 1782 1 1080 910 t
(in s := \(fn x => x+1\); \(!s\) true)8 2112 1 1146 1040 t
(end)1080 1170 w
11 R f
(If s were given the polymorphic type ALL)7 1892 1 720 1400 t
11 S f
(a)2648 1400 w
11 I f
(.)2726 1400 w
11 R f
(\()2763 1400 w
11 S f
(a \256 a)2 265 1 2808 1400 t
11 R f
( then this expression would type check,)6 1756(\) ref,)1 202 2 3082 1400 t
( insist that the type of an applied occurrence)8 1948( prevent this, we)3 733( To)1 180(permitting an obvious type error.)4 1459 4 720 1570 t
( type \(one with no locally-bound type)6 1710(of the ref constructor should always be given a ``ground'')9 2610 2 720 1740 t
(variables\).)720 1910 w
( still have polymorphic)3 1052(However, functions whose application can create reference variables can)8 3268 2 720 2250 t
( the declaration)2 676( Consider)1 453(types of a restricted kind.)4 1114 3 720 2420 t
11 CW f
(val F = fn x => let val r = ref x)11 2178 1 1080 2610 t
(in !r)1 330 1 2202 2740 t
(end)2136 2870 w
11 R f
( can be given polymorphic type ALL)6 1660(Here the function F)3 869 2 720 3100 t
11 S f
(a)3285 3100 w
8 R f
(1)3360 3056 w
11 R f
(.)3418 3100 w
11 S f
(a)3455 3100 w
8 R f
(1)3530 3056 w
11 S f
(\256 a)1 187 1 3588 3100 t
8 R f
(1)3781 3056 w
11 R f
(where)3863 3100 w
11 S f
(a)4162 3100 w
8 R f
(1)4237 3056 w
11 R f
(is a special kind)3 721 1 4319 3100 t
(of type variable called a)4 1145 1 720 3270 t
11 I f
(weak)1916 3270 w
11 R f
( superscript ``1'' indicates that there is one)7 2035(type variable \(the)2 813 2 2192 3270 t
( F is applied to an argument, a)7 1376( When)1 323( creation of the ref cell\).)5 1089(lambda abstraction suspending the)3 1532 4 720 3440 t
(reference value of type)3 1019 1 720 3610 t
11 S f
(a)1772 3610 w
8 R f
(1)1847 3566 w
11 R f
( instantiated to a)3 737(is created, and hence this weak type variable must be)9 2374 2 1929 3610 t
( contrast,)1 405( In)1 149( means that an expression like \(F nil\) would not be properly typed.)12 2955( This)1 254(ground type.)1 557 5 720 3780 t
(the type)1 358 1 720 3950 t
11 S f
(a)1113 3950 w
8 R f
(1)1188 3906 w
11 R f
(ref assigned to r is permissible because)6 1756 1 1246 3950 t
11 S f
(a)3037 3950 w
8 R f
(1)3112 3906 w
11 R f
( and)1 192(is implicitly bound in an outer scope)6 1652 2 3196 3950 t
(within the scope of its binding is treated as a constant type.)11 2599 1 720 4120 t
( an analogous use of weak)5 1220(Exception declarations raise similar problems, which are handled by)8 3100 2 720 4460 t
(type variables.)1 640 1 720 4630 t
( proposed by)2 632(The Cardelli and Edinburgh compilers used an earlier form of this treatment)11 3688 2 720 4970 t
( was looser in one respect \(it allowed unbound weak type vari-)11 2864( earlier version)2 679(Damas[14]. This)1 777 3 720 5140 t
( more restrictive in another \(multiple levels of lambda abstraction were not)11 3457(ables in types\) and)3 863 2 720 5310 t
(allowed\), and it had some rather counterintuitive effects.)7 2485 1 720 5480 t
11 B f
(3.6. Modules)1 626 1 720 5820 t
11 R f
( an)1 133( is most simply defined as)5 1154( It)1 124(The simplest kind of module in Standard ML is called a structure.)11 2909 4 720 6026 t
(encapsulated set of declarations, as in)5 1652 1 720 6196 t
11 CW f
(structure S =)2 858 1 1278 6386 t
(struct)1410 6516 w
(type t = int * int)5 1188 1 1608 6646 t
(val x = \(13, 18\))4 1056 1 1608 6776 t
(end)1410 6906 w
11 R f
( such a structure is a binding table containing a)9 2140(The compile-time symbol table representation of)5 2180 2 720 7136 t
( is also an abstract syntax tree for the)8 1685( There)1 318(binding for each identifier declared in the structure.)7 2317 3 720 7306 t
cleartomark
showpage
saveobj restore
%%EndPage: 6 7
%%Page: 7 8
/saveobj save def
mark
8 pagesetup
11 R f
(- 7 -)2 183 1 2788 490 t
(structure, from which code is generated.)5 1764 1 720 890 t
( will)1 217( instance, the structure above)4 1341( For)1 225(A signature is an interface specification for a structure.)8 2537 4 720 1230 t
(match the following signature:)3 1347 1 720 1400 t
11 CW f
(signature SS =)2 924 1 1278 1590 t
(sig)1410 1720 w
(type t)1 396 1 1608 1850 t
(val x : t)3 594 1 1608 1980 t
(end)1410 2110 w
11 R f
( tree is not needed since)5 1092(Signatures are also represented by binding tables, but an abstract syntax)10 3228 2 720 2340 t
(there is no code generated for signatures.)6 1800 1 720 2510 t
( one or more structure parameters, which are)7 2058(A functor is a structure abstracted with respect to)8 2262 2 720 2850 t
( of a structure)3 624( follows that the representation of a functor consists)8 2333( It)1 130(characterized by signatures.)2 1233 4 720 3020 t
( part of the parameter specification)5 1601( As)1 192( body\) and a parameter specification.)5 1696(representation \(the)1 831 4 720 3190 t
( impose sharing constraints among the parameters; these constraints are represented by)11 3968(one can)1 352 2 720 3360 t
(transforming the parameter specification into a directed acyclic graph of parameter structures.)11 4116 1 720 3530 t
( structures, namely formal parameter structures and)6 2317(Functors introduce some additional forms of)5 2003 2 720 3870 t
( formal parameters, the parameter signature serves)6 2236( For)1 213(structures defined by functor applications.)4 1871 3 720 4040 t
( the case of functor applications,)5 1437( In)1 149( the structure.)2 605(as a virtual template defining the components of)7 2129 4 720 4210 t
(the functor body \(which may itself be a functor application\) is closed with respect to the environ-)16 4320 1 720 4380 t
(ment formed by binding actual parameters to the formals.)8 2530 1 720 4550 t
( structure parameters)2 922(Functor application in principle involves a beta-reduction in which the actual)10 3398 2 720 4890 t
( This)1 261( to create the result structure.)5 1319(are substituted for the formal parameters in the functor body)9 2740 3 720 5060 t
( of the structures)3 789(beta-reduction acts at two levels\320the static level, involving the type aspects)10 3531 2 720 5230 t
( dynamic)1 418( The)1 238( level, involving the value and exception components.)7 2458(involved, and the dynamic)3 1206 4 720 5400 t
( is realized by generating code that performs an ordinary function applica-)11 3312(aspect of the reduction)3 1008 2 720 5570 t
( is performed at compile time, producing a static representation of the)11 3273( static aspect)2 601(tion. The)1 446 3 720 5740 t
( the body of the functor using the formal/actual parameter bind-)10 2810(result structure by ``instantiating'')3 1510 2 720 5910 t
(ing environment.)1 752 1 720 6080 t
11 B f
( copying)1 396(3.6.1. Naive)1 573 2 720 6590 t
11 R f
( simplest and)2 592( The)1 231( several ways.)2 628(This static instantiation of functor bodies can be implemented in)9 2869 4 720 6796 t
( a straightforward nondestructive substitution, copying the representation)7 3224(most direct is to perform)4 1096 2 720 6966 t
( is roughly the approach followed by Harper and)8 2366( This)1 281(of the functor body in the process.)6 1673 3 720 7136 t
(Matthews in their implementations, but the space consumed has been found to be excessive.)13 4052 1 720 7306 t
cleartomark
showpage
saveobj restore
%%EndPage: 7 8
%%Page: 8 9
/saveobj save def
mark
9 pagesetup
11 R f
(- 8 -)2 183 1 2788 490 t
11 B f
( application closures)2 962(3.6.2. Functor)1 683 2 720 890 t
11 R f
( in our compiler was to represent structures formed by)9 2526(A second alternative initially employed)4 1794 2 720 1096 t
( unmodified functor body structure together with)6 2149(functor applications as closures, consisting of the)6 2171 2 720 1266 t
( approach saves some copying, but it turns out to be)10 2434( This)1 267(the parameter binding environment.)3 1619 3 720 1436 t
( of a functor definition,)4 1055(rather unwieldy because functor applications can appear within the body)9 3265 2 720 1606 t
( to other formal)3 708(and consequently the actual parameters may be expressions that themselves refer)10 3612 2 720 1776 t
( instance, consider)2 814( For)1 209(parameter variables.)1 887 3 720 1946 t
11 CW f
(functor F\(X:sigX\) = bodyF)3 1650 1 1080 2136 t
(functor G\(Y:sigY\) =)2 1254 1 1080 2396 t
(struct)1212 2526 w
(structure S = F\(Y\))3 1188 1 1344 2656 t
(...)1344 2786 w
(end)1212 2916 w
(structure B = G\(A\))3 1188 1 1080 3176 t
11 R f
(In this example, the interpretation of)5 1636 1 720 3406 t
11 CW f
(B.S)2428 3406 w
11 R f
( closure of)2 477(is given in terms of the)5 1043 2 2660 3406 t
11 CW f
(F\(X\))4253 3406 w
11 R f
(, which is a)3 523 1 4517 3406 t
(pair)720 3576 w
11 S f
(<)933 3576 w
11 I f
(bodyF)1012 3576 w
11 R f
(, {)1 127 1 1301 3576 t
11 I f
(X)1437 3576 w
8 S f
(\357)1504 3579 w
11 S f
(\256)1526 3576 w
11 I f
(Y)1644 3576 w
11 R f
(})1715 3576 w
11 S f
(>)1786 3576 w
11 R f
( the binding of)3 691(. Since)1 343 2 1847 3576 t
11 CW f
(X)2961 3576 w
11 R f
(involves)3069 3576 w
11 CW f
(Y)3522 3576 w
11 R f
(, this must be interpreted in the)6 1452 1 3588 3576 t
(additional context of the binding environment {)6 2161 1 720 3746 t
11 I f
(Y)2890 3746 w
8 S f
(\357)2952 3749 w
11 S f
(\256)2974 3746 w
11 I f
(A)3092 3746 w
11 R f
( application)1 527(} produced by the)3 818 2 3168 3746 t
11 CW f
(G\(A\))4590 3746 w
11 R f
(. In)1 186 1 4854 3746 t
( may need several layers of such contexts to be properly)10 2623(general, a functor application closure)4 1697 2 720 3916 t
(defined.)720 4086 w
( inherent in the naive)4 932(Another drawback of this approach is that it still performs the copying that is)13 3388 2 720 4426 t
(implementation of signature matching, where a declaration such as)8 2937 1 720 4596 t
11 CW f
(structure S': sig1 = S)4 1452 1 1080 4786 t
11 R f
(may cause a partial copy of)5 1203 1 720 5016 t
11 CW f
(S)1989 5016 w
11 R f
(to be constructed and bound to)5 1353 1 2083 5016 t
11 CW f
(S')3502 5016 w
11 R f
(.)3634 5016 w
11 B f
(3.6.3. Structure-sharing)1 1147 1 720 5356 t
11 R f
( prototype implementation, by the semantic model)6 2301(The final approach is inspired, like Harper's)6 2019 2 720 5562 t
( idea of actually)3 743( return to the straightforward)4 1324( We)1 221(developed by Harper, Milner, and Tofte[15].)5 2032 4 720 5732 t
( to obtain instantiated copies of the functor body, but a structure-)11 2908(performing the static reductions)3 1412 2 720 5902 t
( this representation, which is)4 1262( In)1 147( used to minimize the amount of copying.)7 1836(sharing representation is)2 1075 4 720 6072 t
( representation of polytypes alluded to above, the stati-)8 2431(similar in principle to the structure-sharing)5 1889 2 720 6242 t
( of each structure \(i.e. types and substructures\) are represented by)10 2904(cally ``interesting'' components)2 1416 2 720 6412 t
( binding table in another, simpler)5 1527(indices into an environment vector that is associated with the)9 2793 2 720 6582 t
( application and signature)3 1162( copying of structures that is entailed by functor)8 2195( The)1 237(form of closure.)2 726 4 720 6752 t
( then be reduced to copying the closure objects and their associated environment)12 3718(matching can)1 602 2 720 6922 t
(vectors, leaving the binding tables themselves unaffected.)6 2538 1 720 7092 t
cleartomark
showpage
saveobj restore
%%EndPage: 8 9
%%Page: 9 10
/saveobj save def
mark
10 pagesetup
11 R f
(- 9 -)2 183 1 2788 490 t
( identifying ``name'', which is basically just a)7 2182(Each type or structure component also has an)7 2138 2 720 890 t
( a couple of purposes: representing sharing con-)7 2106( names serve)2 568( These)1 318(unique number or time stamp.)4 1328 4 720 1060 t
( capture sharing specifications in)4 1469( To)1 184(straints, and identifying two sorts of ``bound'' components.)7 2667 3 720 1230 t
( ``share'' \(i.e. represent views of the same structure\))8 2374(signatures, components that are required to)5 1946 2 720 1400 t
( bound components: those incorporated in func-)6 2124( are two forms of)4 764( There)1 312(are given the same name.)4 1120 4 720 1570 t
( components of a functor body that are created)8 2057(tor parameter structures, and those representing the)6 2263 2 720 1740 t
( The)1 237( are free, and represent actual structures.)6 1835( other names)2 581( All)1 207(each time the functor is applied.)5 1460 5 720 1910 t
( to components by the process of signature matching)8 2523(first sort of bound names are mapped)6 1797 2 720 2080 t
( second sort are replaced by new unique)7 1918( The)1 249(between formal and actual functor parameters.)5 2153 3 720 2250 t
(names during the static elaboration of functor applications.)7 2588 1 720 2420 t
( currently under development and will eventually replace the implementa-)9 3334(This third approach is)3 986 2 720 2760 t
(tion based on functor application closures.)5 1862 1 720 2930 t
11 B f
( abstract syntax into lambda calculus)5 1749(4. Translating)1 691 2 720 3270 t
11 R f
( syntax trees into lambda-calculus)4 1503(The middle end of the compiler translates type-checked abstract)8 2817 2 720 3476 t
( of the environment and scope manipulation has been done by the front end, and)14 3526( all)1 139(trees. Because)1 655 3 720 3646 t
( the translator is simple,)4 1104(all of the abstract-machine manipulation will be done by the back end,)11 3216 2 720 3816 t
(small, and fast.)2 667 1 720 3986 t
( the back end, some simplification is done in the)9 2210(Though most optimization is purposely left for)6 2110 2 720 4326 t
( recursive)1 437( Formally)1 469(middle end.)1 529 3 720 4496 t
11 B f
(fun)2192 4496 w
11 R f
( they really contain refer-)4 1145(definitions are examined to see if)5 1506 2 2389 4496 t
( composi-)1 437( The)1 226( themselves; if not they are replaced by \(simpler\) nonrecursive definitions.)10 3273(ences to)1 384 4 720 4666 t
( is evaluated at compile-time rather than run-time.)7 2217(tion of structure-creation and structure-thinning)4 2103 2 720 4836 t
( can be applied to any concrete data type \(one)9 2034(The ML equality predicate is a special function that)8 2286 2 720 5006 t
( The)1 238( from primitive types and reference types using record and datatype constructors\).)11 3728(built up)1 354 3 720 5176 t
( in its details for each type to)7 1310(algorithm for testing equality is a recursive tree traversal that varies)10 3010 2 720 5346 t
( such occurrence, the translator builds an equality predicate appropri-)9 3040( each)1 228( For)1 210(which it is applied.)3 842 4 720 5516 t
(ate to the instance.)3 818 1 720 5686 t
( ML will require the use of an ``equality interpreter'' which traverses)11 3092(Recent changes to Standard)3 1228 2 720 6026 t
(arbitrary structures in the runtime system, distinguishing certain kinds of cells \(like)11 3738 1 720 6196 t
11 B f
(ref)4493 6196 w
11 R f
(cells\) by)1 381 1 4659 6196 t
( present implementation can still be used as an optimized version in)11 3068( The)1 234( tags.)1 241(special descriptor)1 777 4 720 6366 t
(those cases where enough is known about the type at compile time.)11 2956 1 720 6536 t
cleartomark
showpage
saveobj restore
%%EndPage: 9 10
%%Page: 10 11
/saveobj save def
mark
11 pagesetup
11 R f
(- 10 -)2 238 1 2761 490 t
11 B f
( of pattern-matching)2 970(4.1. Translation)1 774 2 720 890 t
11 R f
( for)1 159(One important and nontrivial job of the middle end is to select optimal comparison sequences)14 4161 2 720 1096 t
( A)1 146(the compilation of pattern-matching.)3 1645 2 720 1266 t
11 I f
(match)2550 1266 w
11 R f
( sequence of pattern-expression pairs,)4 1693(in ML is a)3 490 2 2857 1266 t
(called)720 1436 w
11 I f
(rules)1016 1436 w
11 R f
( to an argument, the argument is matched against the pat-)10 2599( a match is applied)4 853(. When)1 352 3 1236 1436 t
( pat-)1 201( A)1 138(terns, and the first rule with a matching pattern is selected and its expression is evaluated.)15 3981 3 720 1606 t
( any)1 194(tern is either a constant, which must match the argument exactly; a variable, which matches)14 4126 2 720 1776 t
( it for the purposes of evaluating the expression\); a tuple of patterns,)12 3121(argument \(and is bound to)4 1199 2 720 1946 t
( whose components match the components of the)7 2214(which matches a corresponding tuple argument)5 2106 2 720 2116 t
( built using that)3 724(pattern-tuple; or a constructor applied to a pattern, which matches an argument)11 3596 2 720 2286 t
(constructor if the rest of the pattern matches.)7 1964 1 720 2456 t
(As an example, consider the case statement:)6 1936 1 720 2796 t
11 CW f
(case a)1 396 1 1080 2986 t
( nil)1 330( =>)1 330(of \(false, nil\))2 990 3 1146 3116 t
( W)1 264( =>)1 396(| \(true, W\))2 726 3 1212 3246 t
( cons\(X, nil\)\))2 924( => cons\(X,)2 858(| \(false, cons\(X, nil\)\))3 1518 3 1212 3376 t
( => Z)2 462(| \(false, cons\(Y, Z\)\))3 1386 2 1212 3506 t
11 R f
( while the argument \(true, cons\(4,nil\)\))5 1700(The argument \(false, cons\(4,nil\)\) matches the third pattern,)7 2620 2 720 3736 t
(matches the second pattern.)3 1213 1 720 3906 t
( matches just by testing the rules in turn as called for by)12 2470(One could imagine a naive compilation of)6 1850 2 720 4246 t
( Each)1 276( approach is to transform a sequence of patterns into a decision tree[16].)12 3191( Our)1 228(the semantics.)1 625 4 720 4416 t
( a matching test and each branch is labeled with)9 2165(internal node of the decision tree corresponds to)7 2155 2 720 4586 t
( remain potential)2 747(one of the possible results of the matching test and with a list of the patterns that)16 3573 2 720 4756 t
( into code for pat-)4 819( is then straightforward to translate the decision tree)8 2338( It)1 130(candidates in that case.)3 1033 4 720 4926 t
( the decision tree it is also easy to determine whether)10 2416( the construction of)3 882( During)1 377(tern matching.)1 645 4 720 5096 t
( at least one)3 537(the pattern set is ``exhaustive,'' meaning that every possible argument value matches)11 3783 2 720 5266 t
( are any ``redundant'' patterns that only match arguments covered by)10 3140(pattern; and whether there)3 1180 2 720 5436 t
( patterns result in warning messages by the com-)8 2255( and redundant)2 678( Nonexhaustive)1 727(previous rules.)1 660 4 720 5606 t
(piler.)720 5776 w
( simply to minimize the total number of test-nodes.)8 2336(Our goal in constructing the decision tree is)7 1984 2 720 6116 t
( the generated code and also generally reduces the number of tests per-)12 3142(This minimizes the size of)4 1178 2 720 6286 t
( finding the decision tree with the minimum number of nodes is)11 2816( However,)1 485(formed on value terms.)3 1019 3 720 6456 t
( efficient heuristics is used that in practice produces an)9 2478(an NP-complete problem[16]; so a set of)6 1842 2 720 6626 t
(optimal decision tree in almost all cases.)6 1782 1 720 6796 t
( component of the pair for truth or falsity suffices to distin-)11 2644(In the example above, testing the first)6 1676 2 720 7136 t
( second rule from the others; then testing the second component to see whether it is)15 3902(guish the)1 418 2 720 7306 t
cleartomark
showpage
saveobj restore
%%EndPage: 10 11
%%Page: 11 12
/saveobj save def
mark
12 pagesetup
11 R f
(- 11 -)2 238 1 2761 490 t
11 CW f
(cons)720 890 w
11 R f
(or)1014 890 w
11 CW f
(nil)1173 890 w
11 R f
( first rule from the last two; one more test suffices to separate the)13 2899(distinguishes the)1 740 2 1401 890 t
( be selected; instead of two)5 1198( in just two or three tests, the appropriate rule can)10 2197( Thus,)1 306(last two rules.)2 619 4 720 1060 t
(or three tests)2 561 1 720 1230 t
11 I f
(per rule)1 351 1 1309 1230 t
11 R f
(that the naive algorithm would use.)5 1553 1 1688 1230 t
( by Marianne Baudinet and have been)6 1748(The details of this algorithm were originally worked out)8 2572 2 720 1570 t
(implemented in our compiler by Trevor Jim.)6 1959 1 720 1740 t
11 B f
( Lambda Language)2 921(4.2. The)1 406 2 720 2080 t
11 R f
( source into lambda calculus; the back end translates)8 2354(The front end of the compiler translates ML)7 1966 2 720 2286 t
( significant advantage of having)4 1413( A)1 136(lambda-calculus into machine code for the VAX or MC68020.)8 2771 3 720 2456 t
( intermediate representation is that many compiler optimiza-)7 2686(a very simple lambda-calculus as the)5 1634 2 720 2626 t
( and)1 202( is the approach successfully taken in the Rabbit[17])8 2437( This)1 269(tions can be cleanly described.)4 1412 4 720 2796 t
(Orbit[18] compilers for Scheme.)3 1433 1 720 2966 t
(The ``lambda language'' is simply an ML datatype, as follows:)9 2778 1 720 3306 t
11 CW f
(datatype lexp)1 858 1 1080 3496 t
(= VAR of lvar)3 858 1 1212 3626 t
(| FN of lvar * lexp)5 1254 1 1212 3756 t
(| FIX of lvar list * lexp list * lexp)9 2442 1 1212 3886 t
(| APP of lexp * lexp)5 1320 1 1212 4016 t
(| CON of con * lexp)5 1254 1 1212 4146 t
(| DECON of con * lexp)5 1386 1 1212 4276 t
(| SWITCH of lexp * \(con*lexp\) list * lexp Option)9 3168 1 1212 4406 t
(| RECORD of lexp list)4 1386 1 1212 4536 t
(| SELECT of int * lexp)5 1452 1 1212 4666 t
(| RAISE of lexp)3 990 1 1212 4796 t
(| HANDLE of lexp * lexp)5 1518 1 1212 4926 t
11 R f
(The elements of the lambda language are variables \(VAR\), abstraction \(FN\), simultaneous recur-)12 4320 1 720 5156 t
( \(APP\), constructors \(CON, DECON, and SWITCH\), tuples)7 2797(sive definition \(FIX\), application)3 1523 2 720 5326 t
( names,)1 352( Exception)1 517( \(HANDLE and RAISE\).)3 1158(\(RECORD and SELECT\), and exception handling)5 2293 4 720 5496 t
(and integer, real, and string literals, are represented as constructors.)9 2959 1 720 5666 t
( instead,)1 405( point of view of the compiler;)6 1405(There are no built-in library functions, at least from the)9 2510 3 720 6006 t
( to some variable)3 757(the library module is lambda-bound at top level)7 2107 2 720 6176 t
11 I f
(v)3613 6176 w
11 R f
(, and functions from the library)5 1379 1 3661 6176 t
(are just components of the structure)5 1581 1 720 6346 t
11 I f
(v)2331 6346 w
11 R f
( are compiled in-line are represented)5 1618( functions that)2 634(. Certain)1 409 3 2379 6346 t
(as fields of a special structure bound to a distinguished variable)10 2790 1 720 6516 t
11 I f
(v)3538 6516 w
8 R f
(0)3599 6538 w
11 R f
(.)3648 6516 w
( \()1 45( language using CON)3 1052(Constructor-expressions are explicitly represented in the lambda)6 3027 3 720 6856 t
11 I f
(c)4853 6856 w
11 R f
(,)4910 6856 w
11 I f
(e)4947 6856 w
11 R f
(\))5004 6856 w
(representing the application of the constructor)5 2041 1 720 7026 t
11 I f
(c)2793 7026 w
11 R f
(to the expression)2 753 1 2873 7026 t
11 I f
(e)3658 7026 w
11 R f
( \()1 45(, and DECON)2 626 2 3706 7026 t
11 I f
(c)4386 7026 w
11 R f
(,)4443 7026 w
11 I f
(e)4480 7026 w
11 R f
(\) represent-)1 503 1 4537 7026 t
(ing the removal of)3 812 1 720 7196 t
11 I f
(c)1561 7196 w
11 R f
(from the constructed expression)3 1408 1 1638 7196 t
11 I f
(e)3075 7196 w
11 R f
( lambda language could be simplified)5 1662(. The)1 255 2 3123 7196 t
( of \(tag,value\), and removing the CON and)7 2092(by representing constructor-expressions as pairs)4 2228 2 720 7366 t
cleartomark
showpage
saveobj restore
%%EndPage: 11 12
%%Page: 12 13
/saveobj save def
mark
13 pagesetup
11 R f
(- 12 -)2 238 1 2761 490 t
( language can be)3 736( advantage of using CON and DECON is that the lambda)10 2517( The)1 226(DECON operators.)1 841 4 720 890 t
(a typed lambda calculus; the disadvantage is that the code generator is somewhat more compli-)14 4320 1 720 1060 t
( change)1 345( it's not clear why the low-level representation needs to be typable, we may)13 3410(cated. Since)1 565 3 720 1230 t
(the representation of constructors in the lambda language.)7 2543 1 720 1400 t
( components; in the lambda language, it is treated exactly as a)11 2823(A structure resembles a record of)5 1497 2 720 1740 t
( Func-)1 315( lambda language for structures and functors.)6 2002( are no special forms in the)6 1214(RECORD. There)1 789 4 720 1910 t
( a structure)2 535( Actually,)1 486( from structures \(RECORDs\) to structures.)5 2001(tors are treated as functions)4 1298 4 720 2080 t
(definition is not just a record; it is an expression that)10 2313 1 720 2250 t
11 I f
(evaluates)3061 2250 w
11 R f
(to a record.)2 496 1 3503 2250 t
(Structure)720 2590 w
11 I f
(A)1150 2590 w
11 R f
(may refer to an element of structure)6 1571 1 1245 2590 t
11 I f
(B)2844 2590 w
11 R f
( will mean that)3 661(; in the lambda language this)5 1269 2 2911 2590 t
11 I f
(B)4870 2590 w
11 R f
(is)4966 2590 w
(a free variable of the expression representing)6 2025 1 720 2760 t
11 I f
(A)2782 2760 w
11 R f
( keep things simple, it is important to elim-)8 1976(. To)1 215 2 2849 2760 t
( free variables from an expression before code is generated for it; so the variable)14 3540(inate all)1 351 2 720 2930 t
11 I f
(B)4640 2930 w
11 R f
(will be)1 304 1 4736 2930 t
(lambda-bound at top level in the definition of)7 2107 1 720 3100 t
11 I f
(A)2870 3100 w
11 R f
( be instructed to)3 748(, and the runtime system will)5 1355 2 2937 3100 t
(apply the resulting pseudo-functor to the structure)6 2233 1 720 3270 t
11 I f
(B)2987 3270 w
11 R f
( is a form of automatic,)5 1062( This)1 259(to initialize it.)2 631 3 3088 3270 t
( it is extremely simple; our runtime)6 1603( a link-loading scheme)3 1025( For)1 218(compiler-controlled link-loading.)1 1474 4 720 3440 t
(structure-manager and link-loader is less than a page of ML code.)10 2886 1 720 3610 t
11 B f
( generation)1 528(5. Code)1 383 2 720 3950 t
11 R f
( these functors are most)4 1055(The back end of the compiler is organized as the composition of functors;)12 3265 2 720 4156 t
( is the back-)3 552( last phase)2 472( The)1 233(naturally described starting at the end and working toward the front.)10 3063 4 720 4326 t
( jump)1 269( Relative)1 436( program.)1 441(patching of jumps and other relative addresses in a machine-language)9 3174 4 720 4496 t
(instructions on many machines are of different sizes depending on the distance jumped, and)13 4320 1 720 4666 t
( be required before a fixed point is found[19].)8 2153(several iterations of estimating jump sizes may)6 2167 2 720 4836 t
(This is handled in a machine-independent way by the Backpatch functor:)10 3209 1 720 5006 t
11 CW f
(signature RelativeAddresses =)2 1914 1 1080 5196 t
( JumpKind)1 594(sig type)1 594 2 1212 5326 t
(val sizeJump : JumpKind -> int)5 1980 1 1542 5456 t
(val emitJump : \(int -> unit\) -> JumpKind -> unit)9 3168 1 1542 5586 t
(end)1212 5716 w
cleartomark
showpage
saveobj restore
%%EndPage: 12 13
%%Page: 13 14
/saveobj save def
mark
14 pagesetup
11 R f
(- 13 -)2 238 1 2761 490 t
11 CW f
(signature BackPatch =)2 1386 1 1080 910 t
(sig)1212 1040 w
(type Label)1 660 1 1344 1170 t
(val newlabel : unit -> Label)5 1848 1 1344 1300 t
(type JumpKind)1 858 1 1344 1430 t
(val emitbyte : int -> unit)5 1716 1 1344 1560 t
(val align : unit -> unit)5 1584 1 1344 1690 t
(val define : Label -> unit)5 1716 1 1344 1820 t
(val jump : JumpKind*Label -> unit)5 2178 1 1344 1950 t
(. . .)2 330 1 1410 2080 t
(end)1212 2210 w
(functor Backpatch\( Rel : RelativeAddresses \) : BackPatch)7 3696 1 1080 2470 t
(= struct)1 528 1 1212 2600 t
(. . .)2 330 1 1608 2730 t
(end)1344 2860 w
11 R f
( relative address, one builds a small structure)7 2146(For a given machine with a particular kind of)8 2174 2 720 3090 t
( can reach what distance, and how to emit code for that)11 2531(explaining what size of relative address)5 1789 2 720 3260 t
( example, on the Vax, a short conditional branch takes 2 bytes, but a)13 3071( For)1 213(sort of relative address.)3 1036 3 720 3430 t
( short conditional branch around a longer)6 1938(medium-size conditional branch requires 6 bytes \(a)6 2382 2 720 3600 t
(unconditional jump\), and a longer conditional jump takes 8 bytes.)9 2896 1 720 3770 t
( structure is)2 515(When the Backpatch functor is applied to a structure of type RelativeAddresses, a new)13 3805 2 720 4110 t
( code generator)2 694( A)1 145( particular machine.)2 894(created that understands how to backpatch the code for a)9 2587 4 720 4280 t
(for that machine can make use of the)7 1639 1 720 4450 t
11 I f
(emit)2390 4450 w
11 R f
(and)2610 4450 w
11 I f
(label)2800 4450 w
11 R f
(primitives provided by the specialized Back-)5 1988 1 3052 4450 t
(patch structure.)1 676 1 720 4620 t
( here\) provides an interface to a useful subset of the Vax)11 2686(The signature VaxCode \(not shown)4 1634 2 720 4960 t
( various instructions and addressing modes are defined in this signature.)10 3397( The)1 250(instruction set.)1 673 3 720 5130 t
( that gen-)2 431( one)1 222( ways:)1 292(There are two structures that implement the VaxCode signature in different)10 3375 4 720 5300 t
( code when the instructions in the signature are called for, and one that generates)14 3658(erates machine)1 662 2 720 5470 t
( matches the VaxCode signature, and makes use of the)9 2470( VaxMcode structure)2 939( The)1 233(assembly code.)1 678 4 720 5640 t
(Backpatch functor:)1 837 1 720 5810 t
11 CW f
(structure VaxMcode : VaxCode =)4 1980 1 1080 6000 t
(struct)1080 6130 w
(structure R : RelativeAddresses =)4 2178 1 1278 6260 t
(struct)1344 6390 w
(. . . functions to compile relative jumps, etc.)8 3102 1 1542 6520 t
(end)1344 6650 w
(structure B = Backpatch\(R\))3 1716 1 1278 6780 t
(datatype AddressMode = . . .)5 1848 1 1278 6910 t
(fun movl \(src : AddressMode, dst: AddressMode\) = . . .)10 3564 1 1278 7040 t
(end)1080 7170 w
cleartomark
showpage
saveobj restore
%%EndPage: 13 14
%%Page: 14 15
/saveobj save def
mark
15 pagesetup
11 R f
(- 14 -)2 238 1 2761 490 t
( is imple-)2 433( It)1 131( a peephole optimization module that operates on abstract Vax instructions.)10 3393(There is)1 363 4 720 890 t
(mented as a functor taking any VaxCode structure into an ``optimized'' VaxCode structure:)12 4031 1 720 1060 t
11 CW f
(functor Peephole \( V : VaxCode \) : VaxCode = struct . . . end)14 4026 1 1080 1250 t
(structure OptVaxMcode = Peephole\(VaxMcode\))3 2772 1 1080 1380 t
11 R f
( the module OptVaxMcode to produce a particular instruction)8 2979(If some other structure asks)4 1341 2 720 1610 t
(sequence, it may be that some optimized version of the sequence will be generated instead.)14 3997 1 720 1780 t
( machine code by means of an)6 1353(The code generator translates programs from lambda language into)8 2967 2 720 2120 t
( spirit to Cardelli's[20].)3 1076( abstract machine is similar in)5 1382( The)1 239(abstract machine intermediate form.)3 1623 4 720 2290 t
(The abstract machine interface is written as a signature in ML:)10 2750 1 720 2460 t
11 CW f
(signature machine =)2 1254 1 1080 2650 t
(sig type Label)2 924 1 1212 2780 t
(val select : int -> unit)5 1584 1 1476 2910 t
(val apply : unit -> unit)5 1584 1 1476 3040 t
(val tailrecur : int -> unit)5 1782 1 1476 3170 t
(val startrecord : int -> unit)5 1914 1 1476 3300 t
(val endrecord : unit -> unit)5 1848 1 1476 3430 t
(. . .)2 330 1 1542 3560 t
(end;)1146 3690 w
11 R f
(Each of these functions, when called, generates machine code for the corresponding operation.)12 4152 1 720 3920 t
(There is a functor Vax that transforms a VaxCode structure into a Machine structure:)13 3734 1 720 4260 t
11 CW f
(functor Vax\(C : VaxCode\) : Machine =)6 2376 1 1080 4450 t
(struct)1080 4580 w
(fun select j = C.movl\(Displace\(r0,4*j\),Direct\(r0\)\))4 3300 1 1212 4710 t
(.)1476 4840 w
(.)1476 4970 w
(.)1476 5100 w
(end)1080 5230 w
(structure VaxM = Vax\(OptVaxMcode\))3 2178 1 1080 5490 t
(structure VaxA = Vax\(OptVaxAcode\))3 2178 1 1080 5620 t
11 R f
( functor can be applied to the structure OptVaxMcode, which will result in an abstract)14 3906(This Vax)1 414 2 720 5850 t
( generates machine code for the Vax; or to the structure OptVaxAcode, which gen-)13 3747(machine that)1 573 2 720 6020 t
( structures and functors that generate code for)7 2034( have a similar set of)5 928( We)1 210(erates assembly language.)2 1148 4 720 6190 t
(the Motorola MC68020 architecture.)3 1617 1 720 6360 t
( Codegen functor)2 776(Finally we can take this implementation of the abstract Machine, and apply the)12 3544 2 720 6700 t
(to it:)1 207 1 720 6870 t
cleartomark
showpage
saveobj restore
%%EndPage: 14 15
%%Page: 15 16
/saveobj save def
mark
16 pagesetup
11 R f
(- 15 -)2 238 1 2761 490 t
11 CW f
(functor Codegen\(M : Machine\) =)4 1980 1 1080 910 t
(struct)1080 1040 w
(fun codegen\(APP\(a,b\)\) = \(codegen a; codegen b; M.apply\(\)\))7 3762 1 1278 1170 t
(| codegen\(FN\(v,b\)\) = . . .)5 1716 1 1410 1300 t
11 I f
(\(The codegen function is not quite as simple as this, of course.\))11 2782 1 1344 1430 t
11 CW f
(end)1080 1560 w
(structure VaxMCodegen = Codegen\(VaxM\))3 2442 1 1080 1820 t
(structure M68MCodegen = Codegen\(M68M\))3 2442 1 1080 1950 t
11 R f
( VaxMCodegen.codegen, when given a lambda expression, generates optimized,)8 3551(Now the function)2 769 2 720 2180 t
(backpatched machine code for the Vax.)5 1734 1 720 2350 t
( the details of the Machine signature)6 1623( However,)1 488( functors is quite satisfactory.)4 1314(This arrangement of)2 895 4 720 2690 t
( might improve the generated code,)5 1591( This)1 259( stack machine.)2 694(might be changed to make it less like a)8 1776 4 720 2860 t
( are considering a re-)4 1056( We)1 240( that are not naturally stack-oriented.)5 1781(especially for architectures)2 1243 4 720 3030 t
(implementation of the code generator using continuation-passing style[17] and Orbit[18].)9 3931 1 720 3200 t
11 B f
( in code generation)3 890(5.1. Pattern-matching)1 1050 2 720 3540 t
11 R f
( writ-)1 249( By)1 193( 22].)1 192( code generators are written in the form of tree-pattern matchers[21,)10 3060(Many modern)1 626 5 720 3746 t
( tree data structure as an ML datatype \(with constructors\), the tree pattern)12 3263(ing the lambda-calculus)2 1057 2 720 3916 t
( is one pattern for each constructor,)6 1587( There)1 316( be directly specified as an ML function.)7 1824(matching can)1 593 4 720 4086 t
(e.g.)720 4256 w
11 CW f
(| APP\(f,a\) => \(gen\(f\); gen\(a\); machine.apply\(\)\))5 3102 1 1080 4446 t
11 R f
(but there are also cases that match certain ``idioms;'' like)9 2584 1 720 4676 t
11 B f
(let)3339 4676 w
11 R f
(expressions, which are represented)3 1551 1 3489 4676 t
(as the application of a lambda-function:)5 1748 1 720 4846 t
11 CW f
(| APP\(FN\(w,b\), a\) =>)3 1320 1 1080 5036 t
11 I f
(generate code for)2 774 1 2466 5036 t
11 B f
(let)3268 5036 w
11 I f
(w)3411 5036 w
11 B f
(=)3485 5036 w
11 I f
(a)3548 5036 w
11 B f
(in)3631 5036 w
11 I f
(b)3752 5036 w
11 R f
( dozen simple cases that handle small patterns with just one constructor, and a)13 3537(There are about a)3 783 2 720 5266 t
(dozen more complicated cases that recognize idioms.)6 2338 1 720 5436 t
( example, the pattern)3 1044( For)1 250( applicable in only certain situations.)5 1825(Some of these cases are)4 1201 4 720 5776 t
11 CW f
(APP\(VAR w, a\))2 858 1 720 5946 t
11 R f
(can be compiled without a closure only if)7 1900 1 1617 5946 t
11 I f
(w)3556 5946 w
11 R f
( a ``known'' function.)3 999(refers to)1 372 2 3669 5946 t
(One might like to write the clause for this case as:)10 2199 1 720 6116 t
11 CW f
(| APP\(VAR w, a\) => if knownfunc\(w\) then applyknown\(w,a\) else ???)10 4224 1 1080 6306 t
11 R f
(The problem is that if)4 994 1 720 6536 t
11 I f
(w)1752 6536 w
11 R f
( not useful, and the)4 885(is not a known function, then this pattern-match is)8 2291 2 1864 6536 t
(pattern)720 6706 w
11 CW f
(APP\(f,a\))1091 6706 w
11 R f
( the time the else clause is reached, it is impossible to)11 2355( By)1 185(should be matched.)2 852 3 1648 6706 t
(transfer control to the)3 948 1 720 6876 t
11 CW f
(APP\(f,a\))1734 6876 w
11 R f
(clause.)2290 6876 w
( this problem is to attach boolean conditions to patterns, as is done in)13 3562(One solution to)2 758 2 720 7216 t
cleartomark
showpage
saveobj restore
%%EndPage: 15 16
%%Page: 16 17
/saveobj save def
mark
17 pagesetup
11 R f
(- 16 -)2 238 1 2761 490 t
(Miranda[23]:)720 890 w
11 CW f
(| APP\(VAR w, a\) when knownfunc\(w\) =>)6 2376 1 1080 1080 t
11 R f
( worth considering as a future)5 1353(Though would add some ``syntactic sludge'' to the language, it is)10 2967 2 720 1310 t
(extension.)720 1480 w
11 B f
( versus linked environments)3 1320(5.2. Flat)1 411 2 720 1820 t
11 R f
(An)720 2026 w
11 I f
(environment)882 2026 w
11 R f
( from some sort of)4 817(is a mapping)2 563 2 1458 2026 t
11 I f
(identifiers)2867 2026 w
11 R f
(to some sort of)3 661 1 3343 2026 t
11 I f
(bindings,)4033 2026 w
11 R f
(on which the)2 570 1 4470 2026 t
(fundamental operations are)2 1193 1 720 2196 t
11 I f
(update :)1 418 1 2000 2451 t
11 R f
(Env)2501 2451 w
11 S f
(\264)2724 2451 w
11 R f
(Ide)2831 2451 w
11 S f
(\264)3016 2451 w
11 R f
(Bdg)3123 2451 w
11 S f
(\256)3390 2451 w
11 R f
(Env)3582 2451 w
11 I f
(overlay :)1 447 1 2135 2706 t
11 R f
(Env)2665 2706 w
11 S f
(\264)2888 2706 w
11 R f
(Env)2995 2706 w
11 S f
(\256)3255 2706 w
11 R f
(Env)3447 2706 w
11 I f
(access :)1 404 1 2172 2961 t
11 R f
(Env)2659 2961 w
11 S f
(\264)2882 2961 w
11 R f
(Ide)2989 2961 w
11 S f
(\256)3211 2961 w
11 R f
(Bdg)3403 2961 w
( and binding to an environment; the access function looks)9 2611(The update function adds an identifier)5 1709 2 720 3216 t
( to another.)2 506(up an identifier; and the overlay function adds all of the bindings of one environment)14 3814 2 720 3386 t
(The overlay function might be used to implement the ML)9 2534 1 720 3556 t
11 B f
(open)3282 3556 w
11 R f
(primitive, for example.)2 1014 1 3537 3556 t
( text, and)2 427(Environments occur both in the compiler, where the identifiers are those of the source)13 3893 2 720 3896 t
( A)1 139( and at runtime, in the form of function closures.)9 2172(the bindings are types and other information;)6 2009 3 720 4066 t
( lambda calculus, is a pair consisting of a function-code)9 2547(function closure, in implementations of)4 1773 2 720 4236 t
( these two kinds of environ-)5 1251( Though)1 402(and the values to be associated with all of its free variables.)11 2667 3 720 4406 t
(ments are used in different ways, they share many of the same problems of implementation.)14 4035 1 720 4576 t
( with both a very fast)5 977(We know of no data structure that implements environments)8 2726 2 720 4916 t
11 I f
(access)4488 4916 w
11 R f
(func-)4810 4916 w
( very fast)2 456(tion and a)2 484 2 720 5086 t
11 I f
(overlay)1712 5086 w
11 R f
( compile-time environments, a fast)4 1626(function. For)1 627 2 2092 5086 t
11 I f
(access)4397 5086 w
11 R f
(can be)1 306 1 4734 5086 t
( one hash table onto another takes time propor-)8 2085(achieved by using a hash table; but then to overlay)9 2235 2 720 5256 t
( fast)1 198( A)1 147(tional to the size of the smaller table.)7 1710 3 720 5426 t
11 I f
(overlay)2814 5426 w
11 R f
(can be achieved by representing environ-)5 1859 1 3181 5426 t
(ments as trees of)3 738 1 720 5596 t
11 I f
(overlay)1487 5596 w
11 R f
(operations, but then)2 875 1 1845 5596 t
11 I f
(access)2750 5596 w
11 R f
( the compiled code,)3 867( In)1 149(requires a tree search.)3 959 3 3065 5596 t
( with one)2 416( flat closure[2] is just a vector)6 1336( A)1 139(closures can be represented as flat or linked structures.)8 2429 4 720 5766 t
( linked closure[17] has the)4 1173( A)1 137(slot for each free variable, containing the value to which it is bound.)12 3010 3 720 5936 t
( a pointer to the closure for the)7 1450(binding of one free variable at the innermost level, along with)10 2870 2 720 6106 t
( closures have a fast)4 907( Flat)1 234(enclosing scope.)1 732 3 720 6276 t
11 I f
(access)2627 6276 w
11 R f
( takes time proportional)3 1069(, but to build the vector)5 1059 2 2912 6276 t
( since the)2 435( closures can be built quickly:)5 1372( Linked)1 378(to the number of free variables in the function.)8 2135 4 720 6446 t
(enclosing linked closure has already been built, just one)8 2570 1 720 6616 t
11 I f
(cons)3332 6616 w
11 R f
( However,)1 499(operation is required.)2 966 2 3575 6616 t
(linked closures have a slower)4 1292 1 720 6786 t
11 I f
(access)2040 6786 w
11 R f
(function.)2353 6786 w
( of whether to make)4 906(The question)1 577 2 720 7126 t
11 I f
(access)2238 7126 w
11 R f
(or)2558 7126 w
11 I f
(overlay)2684 7126 w
11 R f
(fast is a difficult one, since examples can be)8 1993 1 3047 7126 t
( mixed)1 334( we have adopted a compromise: a)6 1710( Consequently,)1 721(found to support either decision.)4 1555 4 720 7296 t
cleartomark
showpage
saveobj restore
%%EndPage: 16 17
%%Page: 17 18
/saveobj save def
mark
18 pagesetup
11 R f
(- 17 -)2 238 1 2761 490 t
( a typical sequence of)4 966(representation will be used, so that the time required for)9 2487 2 720 890 t
11 I f
(access)4205 890 w
11 R f
(and)4522 890 w
11 I f
(overlay)4712 890 w
11 R f
( linked \(tree\) representa-)3 1090( or)1 151( the flat \(hash-table\))3 898(operations will probably be smaller than if either)7 2181 4 720 1060 t
(tion were used.)2 668 1 720 1230 t
( operation of)2 591( The)1 241( as linked lists of hash tables.)6 1379(In the front end, environments are represented)6 2109 4 720 1570 t
11 B f
(open)720 1740 w
11 R f
( structure just adds the \(already-built\) hash-table for that structure onto the list, but a)14 3864(ing a)1 229 2 947 1740 t
(typical)720 1910 w
11 I f
(update)1050 1910 w
11 R f
( the generated code, clo-)4 1090( In)1 151(operation just adds a binding to an existing hash table.)9 2419 3 1380 1910 t
( each free)2 449( For)1 222( closures.)1 428(sures are represented as trees\320 a compromise between flat and linked)10 3221 4 720 2080 t
( another slot to the closure)5 1184(variable in a closure, the back end heuristically decides whether to add)11 3136 2 720 2250 t
( The)1 244( through the \(already existing\) linked closure.)6 2113(for this variable, or to access this variable)7 1963 3 720 2420 t
( experience with this)3 930( we have more)3 657( When)1 322(former is more expensive to build, but cheaper to use.)9 2411 4 720 2590 t
(compiler, we hope to measure the relative efficiencies of flat and linked closures in practice.)14 4053 1 720 2760 t
11 B f
( structures in the run-time system)5 1583(5.3. Data)1 447 2 720 3100 t
11 R f
( code are designed to be simple and general.)8 1966(The representations of ML structures in the compiled)7 2354 2 720 3306 t
( or of individual)3 764(We took care to avoid arbitrary restrictions on the size of the address space,)13 3556 2 720 3476 t
( for)1 165(objects. Except)1 709 2 720 3646 t
11 B f
(ref)1632 3646 w
11 R f
(cells, the graph of runtime objects is acyclic\320 even mutually recursive)10 3237 1 1803 3646 t
(closures are represented without cycles.)4 1744 1 720 3816 t
( to)1 116( take this size)3 599( We)1 208(Because of ML's polymorphic type system, all values must be the same size.)12 3397 4 720 4156 t
( on)1 147(be one 32-bit word \(this discussion of runtime data structures is specific to implementations)13 4173 2 720 4326 t
( than one word will be manipu-)6 1387( value that is naturally represented in more)7 1876( Any)1 245(32-bit computers\).)1 812 4 720 4496 t
( \(multi-word\) object; this is known as a)7 1888(lated as a \(one-word\) pointer to a)6 1594 2 720 4666 t
11 I f
(boxed)4252 4666 w
11 R f
(value. An)1 477 1 4563 4666 t
11 I f
(unboxed)720 4836 w
11 R f
( garbage collector must be)4 1182( The)1 231(value is one which fits in one word and is not a pointer.)12 2503 3 1124 4836 t
( use the low-order bit)4 956( We)1 211( words are boxed \(pointers\) and which words are not.)9 2377(able to tell which)3 776 4 720 5006 t
( all of our pointers \(on byte-addressable machines\) point to)9 2714( Since)1 313(of the word as the indicator.)5 1293 3 720 5176 t
( with)1 230( represented)1 565( values are)2 480( Unboxed)1 465(word boundaries, the low-order bit of any pointer is zero.)9 2580 5 720 5346 t
( tags, one-character strings,)3 1248( values include constructor)3 1222( Unboxed)1 472(their low-order bits turned on.)4 1378 4 720 5516 t
(and integers \(the integer)3 1063 1 720 5686 t
11 I f
(k)1811 5686 w
11 R f
(is represented as 2)3 807 1 1887 5686 t
11 I f
(k)2703 5686 w
11 S f
(+)2778 5686 w
11 R f
(1\).)2857 5686 w
( 32-bit words, and are prefaced by)6 1513(All records in the runtime system contain an integral number of)10 2807 2 720 6026 t
( those that contain)3 849( are two types of records:)5 1192( There)1 326(a descriptor describing their size and type.)6 1953 4 720 6196 t
( ML tuples and closures are)5 1222( All)1 198( unboxed values\), and those that contain no pointers.)8 2324(pointers \(and)1 576 4 720 6366 t
( fact)1 201( The)1 236( strings and machine-code fragments are of the latter.)8 2417(of the former variety \(Figure 1\);)5 1466 4 720 6536 t
( fact that the back-end)4 1022(that machine-code fragments contain no pointers is a consequence of the)10 3298 2 720 6706 t
(code generator is never applied to any lambda-expression with free variables.)10 3396 1 720 6876 t
( for constructors, just as in Cardelli's compiler[2].)7 2230(There are several different representations used)5 2090 2 720 7216 t
cleartomark
showpage
saveobj restore
%%EndPage: 17 18
%%Page: 18 19
/saveobj save def
mark
19 pagesetup
11 R f
(- 18 -)2 238 1 2761 490 t
cleartomark
saveobj restore
%%BeginGlobal
%
% Version 3.3 drawing procedures for dpost. Automatically pulled in, but only
% when needed.
%

/inpath false def
/savematrix matrix def

/Dl {
	inpath
		{pop pop neg lineto}
		{newpath neg moveto neg lineto stroke}
	ifelse
} bind def

/De {
	/y1 exch 2 div def
	/x1 exch 2 div def
	/savematrix savematrix currentmatrix def
	neg exch x1 add exch translate
	x1 y1 scale
	0 0 1 0 360
	inpath
		{1 0 moveto arc savematrix setmatrix}
		{newpath arc savematrix setmatrix stroke}
	ifelse
} bind def

/Da {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arc}
		{newpath arc stroke}
	ifelse
} bind def

/DA {
	/dy2 exch def
	/dx2 exch def
	/dy1 exch def
	/dx1 exch def
	dy1 add neg exch dx1 add exch
	dx1 dx1 mul dy1 dy1 mul add sqrt
	dy1 dx1 neg atan
	dy2 neg dx2 atan
	inpath
		{arcn}
		{newpath arcn stroke}
	ifelse
} bind def

/Ds {
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	/y0 exch def
	/x0 exch def
	x0 5 x1 mul add 6 div
	y0 5 y1 mul add -6 div
	x2 5 x1 mul add 6 div
	y2 5 y1 mul add -6 div
	x1 x2 add 2 div
	y1 y2 add -2 div
	inpath
		{curveto}
		{newpath x0 x1 add 2 div y0 y1 add -2 div moveto curveto stroke}
	ifelse
} bind def
%%EndGlobal
/saveobj save def
mark
11 R f
1314 949 1314 1093 Dl
1566 949 1314 949 Dl
1566 1093 1566 949 Dl
1314 1093 1566 1093 Dl
1314 1093 1314 1237 Dl
1566 1093 1314 1093 Dl
1566 1237 1566 1093 Dl
1314 1237 1566 1237 Dl
1314 1237 1314 1381 Dl
1566 1237 1314 1237 Dl
1566 1381 1566 1237 Dl
1314 1381 1566 1381 Dl
1314 1381 1314 1525 Dl
1566 1381 1314 1381 Dl
1566 1525 1566 1381 Dl
1314 1525 1566 1525 Dl
(desc)1343 1043 w
1440 1165 1440 1165 1728 1165 Ds
1440 1165 1728 1165 1728 1021 Ds
1728 1165 1728 1021 2304 1021 Ds
1728 1021 2304 1021 2304 1021 Ds
2304 1021 2232 1039 Dl
2304 1021 2232 1003 Dl
(78)1385 1331 w
1440 1453 1440 1453 1728 1453 Ds
1440 1453 1728 1453 1728 1525 Ds
1728 1453 1728 1525 2016 1525 Ds
1728 1525 2016 1525 2016 1525 Ds
2016 1525 1944 1543 Dl
2016 1525 1944 1507 Dl
1314 1165 1242 1183 Dl
1314 1165 1242 1147 Dl
1026 1165 1314 1165 Dl
( triple of two)3 572( A)1 135(Figure 1.)1 398 3 888 1908 t
(pointers and an integer)3 1003 1 939 2078 t
3744 949 3744 1093 Dl
3996 949 3744 949 Dl
3996 1093 3996 949 Dl
3744 1093 3996 1093 Dl
3744 1093 3744 1237 Dl
3996 1093 3744 1093 Dl
3996 1237 3996 1093 Dl
3744 1237 3996 1237 Dl
3744 1237 3744 1381 Dl
3996 1237 3744 1237 Dl
3996 1381 3996 1237 Dl
3744 1381 3996 1381 Dl
3744 1381 3744 1525 Dl
3996 1381 3744 1381 Dl
3996 1525 3996 1381 Dl
3744 1525 3996 1525 Dl
3744 1525 3744 1669 Dl
3996 1525 3744 1525 Dl
3996 1669 3996 1525 Dl
3744 1669 3996 1669 Dl
(desc)3773 1043 w
3744 1165 3672 1183 Dl
3744 1165 3672 1147 Dl
3456 1165 3744 1165 Dl
3744 1309 3672 1327 Dl
3744 1309 3672 1291 Dl
3456 1309 3744 1309 Dl
3744 1453 3672 1471 Dl
3744 1453 3672 1435 Dl
3456 1453 3744 1453 Dl
3870 1165 3870 1165 4158 1165 Ds
3870 1165 4158 1165 4158 1021 Ds
4158 1165 4158 1021 4734 1021 Ds
4158 1021 4734 1021 4734 1021 Ds
4734 1021 4662 1039 Dl
4734 1021 4662 1003 Dl
3870 1309 3870 1309 4158 1309 Ds
3870 1309 4158 1309 4158 1237 Ds
4158 1309 4158 1237 4446 1237 Ds
4158 1237 4446 1237 4446 1237 Ds
4446 1237 4374 1255 Dl
4446 1237 4374 1219 Dl
3870 1453 3870 1453 4158 1453 Ds
3870 1453 4158 1453 4158 1597 Ds
4158 1453 4158 1597 4734 1597 Ds
4158 1597 4734 1597 4734 1597 Ds
4734 1597 4662 1615 Dl
4734 1597 4662 1579 Dl
(62)3815 1619 w
( mutually recursive)2 848( Three)1 310(Figure 2.)1 398 3 3092 1908 t
(functions with one free variable)4 1395 1 3173 2078 t
( construc-)1 439( Constant)1 452(Constructors that carry values are usually represented as pairs of \(tag, value\).)11 3429 3 720 2251 t
(tors \(link)1 423 1 720 2421 t
11 B f
(nil)1193 2421 w
11 R f
( constructors can be)3 937( Value-carrying)1 738(\) are represented as small unboxed integers.)6 2048 3 1317 2421 t
( there are no other)4 829(represented completely transparently if they carry an always-boxed value, and)9 3491 2 720 2591 t
(value-carrying constructors in the datatype \(like)5 2155 1 720 2761 t
11 B f
(cons)2913 2761 w
11 R f
( one constructor in the)4 1019(\), or if there is only)5 900 2 3121 2761 t
(datatype. Finally,)1 796 1 720 2931 t
11 B f
(ref)1544 2931 w
11 R f
(cells look like one-word records.)4 1442 1 1704 2931 t
( as a set of closures that point)7 1341(Earlier ML compilers[20] represented mutually recursive functions)6 2979 2 720 3271 t
( avoid gratuitous circularity, because many)5 1911( wanted to)2 468( We)1 212(to each other in a cyclic data structure.)7 1729 4 720 3441 t
( represent)1 449( We)1 228( on acyclic data structures[24].)4 1433(garbage collection algorithms are more efficient)5 2210 4 720 3611 t
( entries)1 335(mutually recursive functions with just one closure record that has several function-part)11 3985 2 720 3781 t
( represent function)2 850( To)1 192(\(Figure 2\).)1 484 3 720 3951 t
11 I f
(i)2288 3951 w
11 R f
(, one just uses a pointer to the)7 1408 1 2319 3951 t
11 I f
(i)3769 3951 w
8 R f
(th)3813 3907 w
11 R f
( the)1 176(field. If)1 371 2 3926 3951 t
11 I f
(i)4516 3951 w
8 R f
(th)4560 3907 w
11 R f
(function)4674 3951 w
(wants to refer to the closure for the)7 1588 1 720 4121 t
11 I f
(j)2343 4121 w
8 R f
(th)2387 4077 w
11 R f
(function, it just adds)3 922 1 2493 4121 t
11 I f
(j)3450 4121 w
11 S f
(-)3499 4121 w
11 I f
(i)3578 4121 w
11 R f
( for its own)3 523(to the pointer value)3 873 2 3644 4121 t
( seg-)1 217( creates no cycles of pointers; although there is an implicit cycle because each)13 3501(closure. This)1 602 3 720 4291 t
(ment of machine code can refer to the machine's registers, which in turn point to the closure.)16 4082 1 720 4461 t
( may be)2 370( the record)2 488( Because)1 430(Several machine-code fragments may be stored in the same record.)9 3032 4 720 4801 t
( Many)1 314( must be by relative addresses.)5 1353(moved by the garbage collector, references within the block)8 2653 3 720 4971 t
( facilitate this; for other machines, a pointer to)8 2125(computers have PC-relative addressing modes to)5 2195 2 720 5141 t
( typical record contains all of)5 1294( A)1 137( be kept in a register.)5 932(the currently-executing block would have to)5 1957 4 720 5311 t
( order not to con-)4 775( In)1 149(the function and string-literal fragments for an entire ML structure \(module\).)10 3396 3 720 5481 t
( within the record is a \(relative\))6 1432(fuse the garbage collector, just before the start of each fragment)10 2888 2 720 5651 t
( record, where the record's descriptor may be found; and all)10 2708(pointer back to the beginning of the)6 1612 2 720 5821 t
( so that pointers to fragments within the record)8 2195(fragments must begin on even byte addresses,)6 2125 2 720 5991 t
(won't look like unboxed values.)4 1415 1 720 6161 t
11 B f
( consing)1 384(5.4. Fast)1 423 2 720 6501 t
11 R f
( in Lisp as)3 472(The operation of allocating and initializing a record\320 known)8 2735 2 720 6707 t
11 I f
(cons)3960 6707 w
11 R f
(\320 is a fundamental)3 879 1 4161 6707 t
( creation)1 384( creation of a tuple value, the application of a constructor, and the)12 2946( The)1 231(operation in ML.)2 759 4 720 6877 t
( implementation strives to make this operation)6 2049( Our)1 226(of a function-closure all rely on this operation.)7 2045 3 720 7047 t
(as fast as possible.)3 813 1 720 7217 t
cleartomark
showpage
saveobj restore
%%EndPage: 18 19
%%Page: 19 20
/saveobj save def
mark
20 pagesetup
11 R f
(- 19 -)2 238 1 2761 490 t
( consequence of this is)4 1055( One)1 253( algorithm.)1 499(We use a copying \(and compacting\) garbage collection)7 2513 4 720 890 t
( reserve)1 345( We)1 210( memory.)1 425(that the free space available for storage allocation is a contiguous region of)12 3340 4 720 1060 t
( allocate an)2 539( To)1 198( region.)1 356(a register to point at the lowest address in the free)10 2375 4 720 1230 t
11 I f
(n)4236 1230 w
11 R f
(-word initialized)1 749 1 4291 1230 t
(record, the)1 484 1 720 1400 t
11 I f
(n)1248 1400 w
8 R f
(th)1316 1356 w
11 R f
( the)1 177( Then)1 296( other words and the descriptor.)5 1466(word is stored first, followed by the)6 1670 4 1431 1400 t
(free-space register is incremented by)4 1611 1 720 1570 t
11 I f
(n)2359 1570 w
11 R f
(words.)2442 1570 w
( of the address)3 640( arrange to have an inaccessible page)6 1624( We)1 207(At some point the free space is exhausted.)7 1849 4 720 1910 t
( there is an attempt to allocate a record)8 1789( When)1 328( the free space region.)4 1008(space immediately beyond)2 1195 4 720 2080 t
(that crosses into this page, a page fault occurs; and since the page is marked as inaccessible, the)17 4320 1 720 2250 t
( runtime system instead of handling the page fault)8 2288(operating system transfers control to the ML)6 2032 2 720 2420 t
( the last word of a record is stored first, the creation of any record that crosses the)17 3648(itself. Because)1 672 2 720 2590 t
( easy to patch things)4 919(boundary into the inaccessible region will fault at the beginning \(where it is)12 3401 2 720 2760 t
( special case is required for those)6 1462( \(A)1 172( than halfway through its initialization.)5 1718(up and recover\) rather)3 968 4 720 2930 t
( the creation)2 546( Thus,)1 306( are rare and identifiable at compile-time.\))6 1867(records larger than a page; but these)6 1601 4 720 3100 t
(of an)1 228 1 720 3270 t
11 I f
(n)982 3270 w
11 R f
(-word record takes just)3 1026 1 1037 3270 t
11 I f
(n)2097 3270 w
11 R f
(stores \(plus one for the descriptor\) and an add instruction; the)10 2764 1 2186 3270 t
11 I f
(n)4985 3270 w
11 R f
( an extremely low-overhead)3 1256( is)1 113( This)1 263(stores are required in any case to do the initialization.)9 2449 4 720 3440 t
11 I f
(cons)4839 3440 w
11 R f
(operation.)720 3610 w
(A fast)1 268 1 720 3950 t
11 I f
(cons)1019 3950 w
11 R f
( physical memory is large, then the)6 1567( When)1 321( collection is slow.)3 839(is not helpful if garbage)4 1062 4 1251 3950 t
( amortized over the)3 856(cost of copying garbage collection,)4 1552 2 720 4120 t
11 I f
(cons)3158 4120 w
11 R f
(operations, can come to less than one)6 1651 1 3389 4120 t
(instruction per)1 645 1 720 4290 t
11 I f
(cons)1400 4290 w
11 R f
( 26, 27])2 320( are using a variant of generational garbage collection[24,)8 2595([25]. We)1 424 3 1701 4290 t
(that promises to be very fast even in moderate-size memories.)9 2721 1 720 4460 t
( have eschewed the)3 851(In writing our compiler, we have aimed for clarity and straightforwardness; we)11 3469 2 720 4800 t
( a result,)2 376( As)1 178( allocated memory.)2 845(coding tricks that enable programmers to avoid using dynamically)8 2921 4 720 4970 t
(our compiler probably)2 996 1 720 5140 t
11 I f
(cons)1751 5140 w
11 R f
( compilers; it is fortunate that we have made)8 2018(es a lot more than other)5 1070 2 1952 5140 t
11 I f
(cons)720 5310 w
11 R f
(so fast.)1 312 1 949 5310 t
11 B f
( Handling)1 472(5.5. Exception)1 693 2 720 5650 t
11 R f
( except that they are generatively)5 1472(Exception names in Standard ML behave a bit like constructors,)9 2848 2 720 5856 t
( statements)1 492( The)1 226(\(dynamically\) defined.)1 999 3 720 6026 t
11 CW f
(exception E : int and R : real)7 1980 1 1080 6216 t
11 I f
(and)1080 6346 w
11 CW f
(... handle E with 0 => 10)6 1650 1 1146 6476 t
(| i => 2*i)3 660 1 2202 6606 t
(|| R with 0.0 => 10)5 1254 1 1674 6736 t
(| r => 2*floor\(r\))3 1122 1 2202 6866 t
11 R f
(are, if one considers)3 883 1 720 7096 t
11 I f
(E)1631 7096 w
11 R f
(and)1726 7096 w
11 I f
(R)1912 7096 w
11 R f
(to be constructors, a bit like the \(hypothetical\) statements)8 2520 1 2007 7096 t
cleartomark
showpage
saveobj restore
%%EndPage: 19 20
%%Page: 20 21
/saveobj save def
mark
21 pagesetup
11 R f
(- 20 -)2 238 1 2761 490 t
11 CW f
( . . E of int | R of real . . .)12 2046( .)1 198(datatype exception =)2 1320 3 1080 910 t
11 I f
(and)1080 1040 w
11 CW f
(... handle E\(0\) => 10)4 1386 1 1146 1170 t
(| E\(i\) => 2*i)3 858 1 1740 1300 t
(| R\(0.0\) => 10)3 924 1 1740 1430 t
(| R\(r\) => 2*floor\(r\))3 1320 1 1740 1560 t
11 R f
( The)1 237( cannot be given small integer tags like ordinary constructors.)9 2810(Generative data constructors)2 1273 3 720 1790 t
(tag for the constructor)3 987 1 720 1960 t
11 CW f
(E)1778 1960 w
11 R f
( representation will be that of a)6 1391( Its)1 171(must be constructed at run time.)5 1437 3 1877 1960 t
11 B f
(ref)4908 1960 w
11 R f
(cell:)720 2130 w
11 CW f
(ref\("E"\))1010 2130 w
11 R f
( can compare the address of the ref)7 1586( match applied to the exception type)6 1636(. Any)1 280 3 1538 2130 t
(cell against the tag of the exception object; and if the exception is propagated out of the user pro-)18 4320 1 720 2300 t
( can be determined \(for debugging\))5 1555(gram into the bootstrap system, then the name of the exception)10 2765 2 720 2470 t
(by dereferencing the tag.)3 1089 1 720 2640 t
(The ML statement)2 922 1 720 2980 t
11 CW f
( with v)2 574(raise e)1 517 2 1763 2980 t
11 R f
(is compiled into the lambda language as)6 2102 1 2938 2980 t
11 CW f
(RAISE\(CON\(e,v\)\))720 3150 w
11 R f
( match \(with exceptions as construc-)5 1677(; and the handle statement applies a)6 1653 2 1710 3150 t
( is,)1 137( That)1 264(tors\) to the exception raised.)4 1276 3 720 3320 t
11 CW f
(HANDLE\(e,h\))2470 3320 w
11 R f
(executes expression)1 880 1 3231 3320 t
11 CW f
(e)4184 3320 w
11 R f
(; if any exception)3 790 1 4250 3320 t
(is raised in)2 485 1 720 3490 t
11 CW f
(e)1275 3490 w
11 R f
( the handler)2 524(, then)1 249 2 1341 3490 t
11 CW f
(h)2183 3490 w
11 R f
(\(which is a)2 488 1 2280 3490 t
11 I f
(match)2799 3490 w
11 R f
( If)1 131(as above\) is applied to that exception.)6 1676 2 3098 3490 t
11 CW f
(e)4974 3490 w
11 R f
(has type)1 363 1 720 3660 t
11 I f
(t)1111 3660 w
11 R f
(, then)1 245 1 1142 3660 t
11 CW f
(h)1453 3660 w
11 R f
(must have type)2 666 1 1547 3660 t
11 I f
(exception)2241 3660 w
11 S f
(\256)2696 3660 w
11 I f
(t)2841 3660 w
11 R f
(.)2872 3660 w
(The implementation of)2 1024 1 720 4000 t
11 CW f
(HANDLE\(e,h\))1818 4000 w
11 R f
( exception)1 463( An)1 199( generator is straightforward.)3 1300(in the code)2 498 4 2580 4000 t
( the stack; expression)3 955(handler is pushed on)3 922 2 720 4170 t
11 CW f
(e)2667 4170 w
11 R f
(is executed; if no exception is raised, the exception)8 2275 1 2765 4170 t
( exception handler has two components: the address of the)9 2629( An)1 196(handler is popped from the stack.)5 1495 3 720 4340 t
(machine-code for the match)3 1235 1 720 4510 t
11 CW f
(h)2024 4510 w
11 R f
( \(on the stack\) of the enclosing exception handler.)8 2209(, and the address)3 741 2 2090 4510 t
(Thus, entering the scope of a)5 1269 1 720 4680 t
11 B f
(handle)2017 4680 w
11 R f
(takes about two instructions, as does leaving its scope.)8 2397 1 2365 4680 t
(To raise an exception)3 965 1 720 5020 t
11 CW f
(E\(v\))1759 5020 w
11 R f
(, first the constructor-expression)3 1445 1 2023 5020 t
11 CW f
(E\(v\))3542 5020 w
11 R f
(is evaluated and put into a)5 1197 1 3843 5020 t
( is reset to the position of the current exception handler; the current)12 2978(register; then the stack pointer)4 1342 2 720 5190 t
( The)1 245( and control passes to the text address found in the current handler.)12 3167(handler is removed;)2 908 3 720 5360 t
(match)720 5530 w
11 CW f
(h)1065 5530 w
11 R f
( the exception)2 636(found at this address is thereby applied to)7 1907 2 1170 5530 t
11 CW f
(E\(v\))3789 5530 w
11 R f
(previously evaluated.)1 949 1 4091 5530 t
( that)1 203(Raising an exception therefore takes just three or four instructions, not including the match)13 4117 2 720 5700 t
(may have to be done upon arrival at the handler to determine which exception was raised.)15 3940 1 720 5870 t
( After)1 306( convenience in implementation.)3 1495(The constructor view of exception names is not just a)9 2519 3 720 6210 t
( Standard ML community, exceptions-as-constructors have been incor-)7 3262(some discussion in the)3 1058 2 720 6380 t
( no longer need an awkward notation \(using)7 1938( We)1 208(porated into the language.)3 1144 3 720 6550 t
11 CW f
(|)4077 6550 w
11 R f
(and)4172 6550 w
11 CW f
(||)4397 6550 w
11 R f
(\) for excep-)2 511 1 4529 6550 t
(tion matches; and such things as re-raising an arbitrary expression are now possible:)12 3698 1 720 6720 t
11 CW f
(handle e => \(clean up; raise e\))6 2046 1 1080 6910 t
11 I f
(\(e is a variable of type ``exception''\))6 1614 1 3390 6910 t
cleartomark
showpage
saveobj restore
%%EndPage: 20 21
%%Page: 21 22
/saveobj save def
mark
22 pagesetup
11 R f
(- 21 -)2 238 1 2761 490 t
11 B f
( runtime system)2 750(6. The)1 323 2 720 890 t
11 R f
( library)1 330( The)1 235(The ML standard library is implemented as a single module in the runtime system.)13 3755 3 720 1096 t
( to primitive functions written in assem-)6 1774(functions are mostly written in ML, with some references)8 2546 2 720 1266 t
( of this struc-)3 614( references to library functions are treated as references to fields)10 2899( All)1 206(bly language.)1 601 4 720 1436 t
( one free variable\320 the library structure itself.)7 2104( a typical expression might have only)6 1704(ture. Thus,)1 512 3 720 1606 t
( the code generator is given only closed expressions, this variable is)11 3255(In order to ensure that)4 1065 2 720 1776 t
( as a)2 217(lambda-bound; the machine code resulting from this closed expression can then be treated)12 4103 2 720 1946 t
( structures is han-)3 811( to user-defined)2 708( Access)1 375(function whose argument will be the standard library.)7 2426 4 720 2116 t
(dled similarly.)1 637 1 720 2286 t
( machine code for each)4 1055(This general plan is used both for the ``bootstrap'' system \(in which the)12 3265 2 720 2626 t
( code for each)3 631(structure is written to an external file\), and the ``interactive'' system \(in which the)13 3689 2 720 2796 t
( the interactive system, each expres-)5 1640( In)1 157( expression is put in memory and executed\).)7 2012(structure or)1 511 4 720 2966 t
( is represented as a function whose argument is the current top-level environ-)12 3426(sion when compiled)2 894 2 720 3136 t
( the run-)2 378( the interface between the compiler and)6 1741( Thus,)1 306(ment, and whose result is the new binding.)7 1895 4 720 3306 t
(time system is very narrow and clean.)6 1663 1 720 3476 t
11 B f
(7. Conclusion)1 667 1 720 3816 t
11 R f
( using a sequence of)4 966( manage the complexity by)4 1263( We)1 225(Standard ML is a complicated language.)5 1866 4 720 4022 t
(well-defined intermediate representations: tokens, abstract syntax, lambda-calculus, abstract)7 4320 1 720 4192 t
( and signatures of ML allow these inter-)7 1817( datatypes)1 449( The)1 233(machine, symbolic machine instructions.)3 1821 4 720 4362 t
(faces to be cleanly specified, which is a great help.)9 2228 1 720 4532 t
( translation from source programs to tokens\320 we make as simple as possi-)12 3334(Lexical analysis\320 the)2 986 2 720 4872 t
( complications of recognizing constructors and infix operators are handled in)10 3439( All)1 204(ble \(760 lines\).)2 677 3 720 5042 t
(the parser, which has better access to the environment mechanisms.)9 2967 1 720 5212 t
( the most complicated phase of our)6 1605(The translation from tokens to fully typed abstract syntax is)9 2715 2 720 5552 t
( have some effect on parsing \(con-)6 1606( compile-time environments)2 1272( Because)1 436(compiler \(4500 lines\).)2 1006 4 720 5722 t
( is)1 114( This)1 264(structors and infix operators\), we merged the compilation of syntax, scopes, and types.)12 3942 3 720 5892 t
( functors)1 397( since structures and)3 926( But)1 227(where most of the complexity of the module features appear.)9 2770 4 720 6062 t
( build them into this phase from)6 1427(impinge on scopes and types in fundamental ways, we decided to)10 2893 2 720 6232 t
(the beginning.)1 630 1 720 6402 t
( so well-digested and complete, the next phase\320 translation into)9 3045(Since the abstract syntax is)4 1275 2 720 6742 t
( major task of this phase is the compila-)8 1787( The)1 230(lambda-calculus\320 is relatively simple \(1480 lines\).)5 2303 3 720 6912 t
(tion of patterns into decision trees.)5 1522 1 720 7082 t
cleartomark
showpage
saveobj restore
%%EndPage: 21 22
%%Page: 22 23
/saveobj save def
mark
23 pagesetup
11 R f
(- 22 -)2 238 1 2761 490 t
( of programs allows a simple and consistent code genera-)9 2525(A simple lambda-calculus representation)3 1795 2 720 890 t
( lambda-)1 401( The)1 240( optimize them \(750 lines\).)4 1246(tor that can recognize idioms in lambda calculus and)8 2433 4 720 1060 t
( back)1 240( The)1 232( of analysis, like in-line function expansion.)6 1968(calculus can also be useful for other kinds)7 1880 4 720 1230 t
(end needs to know very little about front-end data structures; thus, we found it simplest to have an)17 4320 1 720 1400 t
( is completely separate from the front-end environment)7 2431(environment manager for the back end that)6 1889 2 720 1570 t
( in the lambda-calculus)3 1052( applied occurrences of variables)4 1485( map)1 256( environments)1 637(manager. Back-end)1 890 5 720 1740 t
(to their bindings, just as the front-end environment does that job for abstract syntax trees.)14 3929 1 720 1910 t
( abstract machine instructions into symbolic \(Vax or)7 2488(The last two phases\320 translation from)5 1832 2 720 2250 t
( are the)2 346(MC68020\) instructions, and the translation of those into backpatched byte sequences\320)10 3974 2 720 2420 t
( phases have a largely straightforward structure \(950 lines)8 2565( These)1 320(only machine-dependent phases.)2 1435 3 720 2590 t
( of)1 129( the current implementation, our code generators do not make adequate use)11 3420( In)1 158(per machine\).)1 613 4 720 2760 t
(registers, and we may redesign the abstract machine interface.)8 2722 1 720 2930 t
( very simple \(450 lines of C, including the garbage collector;)10 2759(Finally, the runtime system is kept)5 1561 2 720 3270 t
( ML by its nature is oriented to)7 1410( a statically-typed language,)3 1253( As)1 185(300 lines of assembly language\).)4 1472 4 720 3440 t
( rather than complicated runtime systems; and we push this as far as possi-)13 3348(compile-time analysis)1 972 2 720 3610 t
( implemented)1 605( standard library is mostly implemented in ML \(750 lines\), and those parts)12 3323(ble. Our)1 392 3 720 3780 t
( pay particular atten-)3 940( We)1 217( Standard ML signature.)3 1099(in assembly language are arranged to match a)7 2064 4 720 3950 t
( allocation of dynamic storage, since the features of ML \(constructors, function clo-)12 3822(tion to fast)2 498 2 720 4120 t
(sures\) necessitate an efficient memory allocator and garbage collector.)8 3089 1 720 4290 t
( should prove to be a useful)6 1276( It)1 133( concise, efficient, and \(we think\) well-designed.)6 2203(Our compiler is)2 708 4 720 4630 t
(tool for the functional programming community.)5 2146 1 720 4800 t
10 R f
( J. Landin, ``The next 700 programming languages,'')7 2124(1. P.)1 331 2 720 5368 t
10 I f
(Comm. ACM)1 522 1 3200 5368 t
10 B f
(9)3747 5368 w
10 R f
(\(3\), pp. 157-166 \(1966\).)3 965 1 3797 5368 t
( functional language,'')2 924( Cardelli, ``Compiling a)3 985(2. Luca)1 449 3 720 5524 t
10 I f
(1984 Symp. on LISP and Functional Program-)6 1928 1 3112 5524 t
(ming)970 5644 w
10 R f
(, pp. 208-217, ACM \(1984\).)4 1127 1 1170 5644 t
( ML,'')1 271( Milner, ``A proposal for Standard)5 1395(3. Robin)1 495 3 720 5800 t
10 I f
(ACM Symposium on LISP and Functional Program-)6 2129 1 2911 5800 t
(ming)970 5920 w
10 R f
(, pp. 184-197, ACM \(1984\).)4 1127 1 1170 5920 t
( Milner, ``The Standard ML Core Language,'')6 1851(4. Robin)1 495 2 720 6076 t
10 I f
(Polymorphism)3091 6076 w
10 B f
(2)3699 6076 w
10 R f
(\(2\) \(October 1985\).)2 778 1 3749 6076 t
( MacQueen, ``Modules for Standard ML,'')5 1780(5. David)1 494 2 720 6232 t
10 I f
( LISP and Functional)3 906(Proc. 1984 ACM Conf. on)4 1102 2 3032 6232 t
(Programming)970 6352 w
10 R f
(, Austin, Texas, pp. 198-207, ACM \(1984\).)6 1732 1 1531 6352 t
( MacQueen, ``Modules for Standard ML,'')5 1715(6. David)1 494 2 720 6508 t
10 I f
(Polymorphism)2954 6508 w
10 B f
(2)3562 6508 w
10 R f
(\(2\) \(October 1985\).)2 778 1 3612 6508 t
( Experimental Applicative Language,'')3 1647( Burstall, D. MacQueen, and D. Sannella, ``Hope: an)8 2331(7. R.)1 342 3 720 6664 t
10 I f
(Proceedings of the 1980 LISP Conference)5 1684 1 970 6784 t
10 R f
(, Stanford, pp. 136-143 \(1980\).)4 1243 1 2654 6784 t
( C. J. Matthews, ``The Poly manual,'')6 1515(8. David)1 494 2 720 6940 t
10 I f
(SIGPLAN Notices)1 725 1 2754 6940 t
10 R f
(\(September 1985\).)1 743 1 3504 6940 t
( C. J. Matthews,)3 650(9. David)1 494 2 720 7096 t
10 I f
(An implementation of Standard ML in Poly)6 1728 1 1889 7096 t
10 R f
(, May 1986.)2 483 1 3617 7096 t
( P. L. Curien, and M. Mauny, ``The Categorical Abstract Machine,'' pp. 50-64 in)13 3484( Cousineau,)1 489(10. G.)1 347 3 720 7252 t
cleartomark
showpage
saveobj restore
%%EndPage: 22 23
%%Page: 23 24
/saveobj save def
mark
24 pagesetup
10 R f
(- 23 -)2 216 1 2772 480 t
10 I f
( LNCS Vol 201)3 646(Functional Programming Languages and Computer Architecture,)5 2713 2 970 840 t
10 R f
(, ed. J. P. Jouan-)4 711 1 4329 840 t
(naud, Springer-Verlag \(1985\).)2 1208 1 970 960 t
( Milner, ``A Theory of Type Polymorphism in Programming,'')8 2520(11. Robin)1 495 2 720 1116 t
10 I f
(J. CSS)1 261 1 3760 1116 t
10 B f
(17)4046 1116 w
10 R f
(, pp. 348-375 \(1978\).)3 849 1 4146 1116 t
( Cardelli, ``Basic polymorphic typechecking,'')4 1869(12. Luca)1 449 2 720 1272 t
10 I f
(Polymorphism)3063 1272 w
10 B f
(2)3671 1272 w
10 R f
(\(1\) \(January 1985\).)2 767 1 3721 1272 t
( S. Boyer and J Moore, ``The sharing of structure in theorem-proving programs,'' in)13 3587(13. R.)1 342 2 720 1428 t
10 I f
(Machine)4691 1428 w
(Intelligence 7)1 546 1 970 1548 t
10 R f
(, ed. D. Michie, Edinburgh University Press \(1972\).)7 2070 1 1516 1548 t
( Com-)1 267( of)1 121( Department)1 534( Damas, ``Type Assignment in Programming Languages,'' PhD Thesis,)8 2970(14. Luis)1 428 5 720 1704 t
(puter Science, University of Edinburgh \(1985\).)5 1883 1 970 1824 t
( modules,'' ECS-)2 733( Harper, Robin Milner, and Mads Tofte, ``A type discipline for program)11 3065(15. Robert)1 522 3 720 1980 t
( of Edinburgh \(1987\).)3 871(LFCS-87-28, Univ.)1 806 2 970 2100 t
( Baudinet and David MacQueen,)4 1311(16. Marianne)1 632 2 720 2256 t
10 I f
(Tree Pattern Matching for ML)4 1222 1 2688 2256 t
10 R f
(, 1986.)1 275 1 3910 2256 t
( \(1978\).)1 316( MIT)1 233( L. Steele, ``Rabbit: a compiler for Scheme,'' AI-TR-474,)8 2312(17. Guy)1 422 4 720 2412 t
( and N. Adams, ``ORBIT: An optimizing compiler)7 2043( Kranz, R. Kelsey, J. Rees, P. Hudak, J. Philbin,)9 1930(18. D.)1 347 3 720 2568 t
(for Scheme,'')1 555 1 970 2688 t
10 I f
(Proc. Sigplan '86 Symp. on Compiler Construction)6 2086 1 1556 2688 t
10 B f
(21 \(Sigplan Notices\))2 862 1 3673 2688 t
10 R f
( 219-)1 208(\(7\), pp.)1 297 2 4535 2688 t
(233 \(July 1986\).)2 658 1 970 2808 t
( Wulf, R. K. Johnsson, C. B. Weinstock, C. B. Hobbs, and C. M. Geschke,)14 3027(19. W.)1 369 2 720 2964 t
10 I f
( Optimiz-)1 379(Design of an)2 517 2 4144 2964 t
(ing Compiler,)1 556 1 970 3084 t
10 R f
(Elsevier North-Holland, New York \(1975\).)4 1724 1 1551 3084 t
( Cardelli, ``The functional abstract machine,'')5 1837(20. Luca)1 449 2 720 3240 t
10 I f
(Polymorphism)3031 3240 w
10 B f
(1)3639 3240 w
10 R f
(\(1\) \(January 1983\).)2 767 1 3689 3240 t
( automatic derivation of code generators,'' Ph.D. Thesis,)7 2461( G. G. Cattell, ``Formalization and)5 1517(21. R.)1 342 3 720 3396 t
( PA \(April 1978\).)3 705( Pittsburgh,)1 487(Carnegie-Mellon University,)1 1154 3 970 3516 t
( Aho, M. Ganapathi, and S. W. K. Tjiang,)8 1737( V.)1 129(22. A.)1 347 3 720 3672 t
10 I f
(Code generation using tree matching and dynamic)6 2074 1 2966 3672 t
(programming)970 3792 w
10 R f
(, 1986.)1 275 1 1520 3792 t
( language with polymorphic types,'' pp. 1-16 in)7 2052( A. Turner, ``Miranda: a non-strict functional)6 1921(23. D.)1 347 3 720 3948 t
10 I f
( LNCS Vol 201)3 646(Functional Programming Languages and Computer Architecture,)5 2713 2 970 4068 t
10 R f
(, ed. J. P. Jouan-)4 711 1 4329 4068 t
(naud, Springer-Verlag \(1985\).)2 1208 1 970 4188 t
( garbage collector based on the lifetimes of objects,'')8 2128( Lieberman and Carl Hewitt, ``A real-time)6 1693(24. Henry)1 499 3 720 4344 t
10 I f
(Communications of the ACM)3 1164 1 970 4464 t
10 B f
(23)2159 4464 w
10 R f
(\(6\), pp. 419-429, ACM \(1983\).)4 1243 1 2259 4464 t
( Appel, ``Garbage collection can be faster than stack allocation,'')9 2795( W.)1 164(25. A.)1 347 3 720 4620 t
10 I f
(Information Processing)1 968 1 4072 4620 t
(Letters)970 4740 w
10 B f
(\(to appear\))1 474 1 1273 4740 t
10 R f
(\(1987\).)1772 4740 w
( ``Garbage collection in a large LISP system,'')7 1889( A. Moon,)2 415(26. David)1 494 3 720 4896 t
10 I f
(ACM Symposium on LISP and Func-)5 1494 1 3546 4896 t
(tional Programming)1 820 1 970 5016 t
10 R f
(, pp. 235-246, ACM \(1984\).)4 1127 1 1790 5016 t
( performance storage reclamation algo-)4 1587( Ungar, ``Generation scavenging: a non-disruptive high)6 2239(27. David)1 494 3 720 5172 t
(rithm,'')970 5292 w
10 I f
( \(Proc. ACM SIGSOFT/SIGPLAN Software Eng. Symp. on Practical)8 2956(SIGPLAN Notices)1 753 2 1331 5292 t
(Software Development Environments\))2 1520 1 970 5412 t
10 B f
(19)2515 5412 w
10 R f
(\(5\), pp. 157-167, ACM \(1984\).)4 1243 1 2615 5412 t
cleartomark
showpage
saveobj restore
%%EndPage: 23 24
%%Trailer
done
%%Pages: 24
%%DocumentFonts: Times-Bold Times-Italic Courier Times-Roman Symbol Times-Roman
