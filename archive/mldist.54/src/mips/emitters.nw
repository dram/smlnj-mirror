\section{Emitters}
We have an odd problem---we need to be able to emit either a 32-bit
integer or a string.
The order in which the bytes of the integer are emitted depends on
whether the target machine is BigEndian or LittleEndian, but the
bytes of the string should be emitted in the same order on both machines.
This means that the two emission functions depend on each other, but
in a machine-dependent way, so we bundle them up.
We also have to be able to emit two words for floating point constants.
The way to do this can be derived from [[emit_word]], and this
code seems to be the sensible place to do that.
So we define a type [[emitter_triple]] 
and pass them around that way.

@ Eventually we want to take all the words and strings that have been
emitted and bundle them up into a single string using [[implode]].
We'll take the following tack with that:
each emitter will squirrel some info away in a reference variable.
A function [[emitted_string: unit -> string]] will take the
squirreled information and return a string that represents
everything emitted so far.
As a side effect, it will reset the emitter system to its initial 
state, where ``everything emitted so far'' is the empty string.

The actual implementation will be a list of strings which is reversed 
and imploded.
<<signature>>=
signature EMITTER = sig val emit: int * int -> unit
			val order_real: string -> string
			val low_order_offset: int
			val emit_string: int -> string -> unit
			val emit_comment: string -> unit
		    end

signature EMITTERS = sig
    structure LittleEndian : EMITTER
    structure BigEndian : EMITTER
    structure MipsAsm: EMITTER
    val emitted_string : unit -> string
    val address : int ref
    val asmstream: outstream ref
end

@ First something that's capable of emitting real code, then
something that can print assembly code.
We emit the assembly code to output right away, without any fooling.
<<*>>=
structure Emitters : EMITTERS = struct
    local 
        <<memory and basic services>>
    in
        <<string emitter>>
        <<little-endian emitter>>
        <<big-endian emitter>>
	fun emitted_string () =
	    let val s = implode (rev (!so_far))
	    in  so_far := nil; s
	    end
    end
    structure LittleEndian = struct
			       val emit = emit_pair_little
			       val order_real = implode o rev o explode
			       val low_order_offset = 0
			       val emit_string = emit_string
			       fun emit_comment _ = ()
			     end
    structure BigEndian    = struct
			       val emit = emit_pair_big
			       fun order_real x = x
			       val low_order_offset = 1
			       val emit_string = emit_string
			       fun emit_comment _ = ()
			     end
    <<assembly-code emitters>>
end


@ Here is a variable to remember what's been emitted so far
<<memory and basic services>>=
val so_far = ref nil : string list ref
fun squirrel s = so_far := s :: !so_far
fun emit_byte n = squirrel (chr n)
<<string emitter>>=
fun emit_string n s = squirrel (substring(s,0,n))
        	handle e =>
        		(print "?exception "; print (System.exn_name e);
        		 print (" in emitters.emit_string "^
				(Integer.makestring n) ^ " \""^s^"\"\n");
        		 raise e)

@ Little-endian means the little (least significant) end first,
like the VAX.
 We parameterize the real emitters by a function that emits a byte.
<<little-endian emitter>>=
fun emit_pair_little(hi,lo) =
    let open Bits
        fun emit_word(n) =
          (emit_byte(andb(n,255));emit_byte(andb(rshift(n,8),255)))
    in  (emit_word(lo);emit_word(hi))
    end

<<big-endian emitter>>=
fun emit_pair_big(hi,lo) =
     let open Bits
        fun emit_word(n) =
          (emit_byte(andb(rshift(n,8),255));emit_byte(andb(n,255)))
    in  (emit_word(hi);emit_word(lo))
    end

@ Now the assembly code.
to make it easier to debug, we print out addresses in the same format
as {\tt dbx}: we use the byte address and we print it in hex.

<<assembly-code emitters>>=
val address = ref 0		(* address of next instruction in words *)
val asmstream = ref std_out
structure MipsAsm : EMITTER = struct
    fun say s = (output (!asmstream) s; flush_out (!asmstream))
    fun printaddr addrref = 
       let val n = !addrref
       in  (if n<10 then "  " else if n < 100 then " " else "") 
            ^ (Integer.makestring n) 
       end
    local 
        open Bits
        fun hexdigit n = 
            let val d = andb(n,15)
            in  if d <= 9 then chr(d+ord("0"))
                          else chr(d-10+ord("a"))
            end
        fun hex1 n = hexdigit(rshift(n,4))^hexdigit(n)
        fun hex2 n = hex1(rshift(n,8))^hex1(n)
        fun hex4 n = hex2(rshift(n,16))^hex2(n)
    in
        fun hex(hi,lo) = hex2(hi) ^ hex2(lo)
        fun printaddr addrref = 
       	let val n = 4 * (!addrref)	(* address in bytes *)
       	in "0x" ^ (hex4 n) 
       end
    end
    fun decode x = (
            say ((printaddr address) ^ ": (" ^ (hex x) ^") " 
             ^ (MipsDecode.decode x));
       address := !address + 1; ()
       )
    fun decode_string n s =
        if n > 0 then
            (say ((printaddr address) 
                        ^ ": \"" ^substring(s,0,4) ^"\"\n");
               address := !address + 1;
               decode_string (n-4) (substring(s,4,String.length(s)-4))
               )
        else ()

    val emit = decode
    fun order_real x = x
    val low_order_offset = 1  (* should this be different for little-endian?*)
    val emit_string = decode_string
    val emit_comment = say
end

