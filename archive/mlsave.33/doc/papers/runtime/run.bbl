\begin{thebibliography}{10}

\bibitem{appel87:gc}
Andrew~W. Appel.
\newblock Garbage collection can be faster than stack allocation.
\newblock {\em Information Processing Letters}, 25(4):275--279, 1987.

\bibitem{appel89:cps}
Andrew~W. Appel.
\newblock Continuation-passing, closure-passing style.
\newblock In {\em Sixteenth ACM Symp. on Principles of Programming Languages},
  pages 293--302, 1989.

\bibitem{appel89:sggc}
Andrew~W. Appel.
\newblock Simple generational garbage collection and fast allocation.
\newblock {\em Software---Practice/Experience}, 1989.

\bibitem{appel89:tag}
Andrew~W. Appel.
\newblock Tag bits aren't necessary.
\newblock {\em Lisp and Symbolic Computation}, 1989.

\bibitem{appel88:prof}
Andrew~W. Appel, Bruce~F. Duba, and David~B. MacQueen.
\newblock Profiling in the presence of optimization and garbage collection.
\newblock Technical Report CS-TR-197-88, Princeton University Dept. Comp. Sci.,
  Princeton, NJ, 1987.

\bibitem{appel88:gc}
Andrew~W. Appel, John~R. Ellis, and Kai Li.
\newblock Real-time concurrent collection on stock multiprocessors.
\newblock {\em SIGPLAN Notices (Proc. SIGPLAN '88 Conf. on Prog. Lang. Design
  and Implementation)}, 23(7):11--20, 1988.

\bibitem{appel88:clo}
Andrew~W. Appel and Trevor T.~Y. Jim.
\newblock Optimizing closure environment representations.
\newblock Technical Report 168, Dept. of Computer Science, Princeton
  University, 1988.

\bibitem{appel87:sml}
Andrew~W. Appel and David~B. MacQueen.
\newblock A {S}tandard {ML} compiler.
\newblock In Gilles Kahn, editor, {\em Functional Programming Languages and
  Computer Architecture (LNCS 274)}, pages 301--324. Springer--Verlag, 1987.

\bibitem{britton75}
Dianne~E. Britton.
\newblock Heap storage management for the programming language {P}ascal.
\newblock Master's thesis, University of Arizona, 1975.

\bibitem{cardelli83:ml}
Luca Cardelli.
\newblock {ML} under {U}nix.
\newblock {\em Polymorphism}, 1(3), December 1983.

\bibitem{cardelli84}
Luca Cardelli.
\newblock Compiling a functional language.
\newblock In {\em 1984 Symp. on LISP and Functional Programming}, pages
  208--217, 1984.

\bibitem{cheney70}
C.~J. Cheney.
\newblock A nonrecursive list compacting algorithm.
\newblock {\em Communications of the ACM}, 13(11):677--678, 1970.

\bibitem{cormack88}
G.~V. Cormack.
\newblock A micro-kernel for concurrency in {C}.
\newblock {\em Software---Practice/Experience}, 18(5):485--492, 1988.

\bibitem{gordon78}
M.~J.~C. Gordon, A.~J. R.~G. Milner, L.~Morris, M.~C. Newey, and C.~P.
  Wadsworth.
\newblock A metalanguage for interactive proof in {LCF}.
\newblock In {\em Fifth ACM Symp. on Principles of Programming Languages},
  1978.

\bibitem{griswold86}
Ralph~E. Griswold and Madge~T. Griswold.
\newblock {\em The Implementation of the {I}con Programming Language}.
\newblock Princeton University Press, Princeton, NJ, 1986.

\bibitem{harper88}
Robert Harper, Robin Milner, and Mads Tofte.
\newblock The definition of {S}tandard {ML}, version 2.
\newblock Technical Report ECS-LFCS-88-62, Univ. of Edinburgh, 1988.

\bibitem{kernighan78}
Brian~W. Kernighan and Dennis~M. Ritchie.
\newblock {\em The {C} Programming Language}.
\newblock Prentice-Hall, Englewood Cliffs, NJ, 1978.

\bibitem{kranz86}
D.~Kranz, R.~Kelsey, J.~Rees, P.~Hudak, J.~Philbin, and N.~Adams.
\newblock {ORBIT}: An optimizing compiler for {S}cheme.
\newblock {\em SIGPLAN Notices (Proc. Sigplan '86 Symp. on Compiler
  Construction)}, 21(7):219--233, July 1986.

\bibitem{lieberman83}
Henry Lieberman and Carl Hewitt.
\newblock A real-time garbage collector based on the lifetimes of objects.
\newblock {\em Communications of the ACM}, 23(6):419--429, 1983.

\bibitem{macqueen84}
David MacQueen.
\newblock Modules for {S}tandard {ML}.
\newblock In {\em Proc. 1984 ACM Conf. on LISP and Functional Programming},
  pages 198--207, 1984.

\bibitem{milner84}
Robin Milner.
\newblock A proposal for {S}tandard {ML}.
\newblock In {\em ACM Symposium on LISP and Functional Programming}, pages
  184--197, 1984.

\bibitem{milner85}
Robin Milner.
\newblock The {S}tandard {ML} core language.
\newblock {\em Polymorphism}, 2(2), October 1985.

\bibitem{rees86}
J.~Rees and W.~Clinger (eds.).
\newblock Revised report on the algorithmic language {S}cheme.
\newblock {\em SIGPLAN Notices}, 21(12):37--79, 1986.

\bibitem{steele78}
Guy~L. Steele.
\newblock Rabbit: a compiler for {S}cheme.
\newblock Technical Report AI-TR-474, MIT, 1978.

\bibitem{ungar84}
David Ungar.
\newblock Generation scavenging: a non-disruptive high performance storage
  reclamation algorithm.
\newblock {\em SIGPLAN Notices (Proc. ACM SIGSOFT/SIGPLAN Software Eng. Symp.
  on Practical Software Development Environments)}, 19(5):157--167, 1984.

\end{thebibliography}
