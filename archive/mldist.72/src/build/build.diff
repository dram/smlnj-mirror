XXX batch.sml XXX
====2
1:6c
2:6c
  open PrintUtil ProcessFile System.Control.Print
3:6c
  open PrintUtil ProcessFile
====2
1:27a
2:28c
  (* printDepth *)
3:27a
====2
1:28a
2:30,31c
  val _  = printDepth := 0
  
3:28a
====2
1:30c
2:33c
  val topenv = ref (Env.empty: Modules.env)
3:30c
  val topenv = ref (Env.empty: Basics.env)
====3
1:45c
2:48c
  	     in outputc outfile code; close_out outfile
3:45,46c
  	    in System.Stats.codesize := size code + !System.Stats.codesize;
                  outputc outfile code; close_out outfile
====3
1:139c
2:142c
  		("profiling",profiling)]
3:140,142c
  		("profiling",profiling),
                  ("floatreg_params",floatreg_params),
                  ("icount",icount)]
====3
1:254a
2:257a
3:258,259c
                      val i = if i>1 then i else
                                if i<1 then 0 else 2
====2
1:268,269c
2:271,277c
          ("setprintdepth",fn () =>
  		let val i = atoi(skip_white std_in; getword std_in)
  		in  pr "[printDepth := "; print i; pr "]\n";
  		    printDepth := i
  		end),
  (*	("printslots",fn () => ProcessFile.printslots (!topenv)
  				 (skip_white std_in; getword std_in)), *)
3:273,274c
  	("printslots",fn () => ProcessFile.printslots (!topenv)
  				 (skip_white std_in; getword std_in)),
====3
1:281c
2:289c
  	("report",fn () => System.Control.Profile.report std_out),
3:286c
  (*	("report",fn () => System.Control.Profile.report std_out), TEMPORARY *)
XXX codes.sig XXX
XXX index.sml XXX
====2
1:2c
2:2c
    val report : ErrorMsg.inputSource -> (BareAbsyn.dec * Modules.env) -> unit
3:2c
    val report : ErrorMsg.inputSource -> (BareAbsyn.dec * Basics.env) -> unit
====2
1:8c
2:8c
  open BareAbsyn Types Variables Modules
3:8c
  open Basics BareAbsyn
====2
1:32c
2:32c
             (absyn :BareAbsyn.dec, env: Modules.env) =
3:32c
             (absyn :BareAbsyn.dec, env: Basics.env) =
====3
1:162a
2:162a
3:163,165c
        | printDec(FIXdec _) = ()
        | printDec(OVLDdec _) = ()
        | printDec(IMPORTdec _) = ()
XXX interact.sml XXX
====
1:8c
    open ErrorMsg Access Basics BareAbsyn Lambda PrintUtil ProcessFile NewParse
2:8c
    open ErrorMsg Access BareAbsyn Lambda PrintUtil ProcessFile NewParse
3:8c
    open ErrorMsg Access Basics BareAbsyn PrintUtil ProcessFile NewParse
====2
1:18a
2:19,21c
   
    datatype debuglevel = NODEBUG | FULLDEBUG of string 
  				| LIVEDEBUG of string*string
3:18a
====
1:20,22c
    datatype debuglevel = NODEBUG | FULLDEBUG of string 
  				| LIVEDEBUG of string*string
  
2:22a
3:20,23c
    datatype debuglevel = NODEBUG 
                        | FULLDEBUG of string 
                        | LIVEDEBUG of string * string * instream option
  
====1
1:29c
       fn () => (MCprint.printLexp (!bucket); newline())
2:29c
3:30c
       (fn () => (MCprint.printLexp (!bucket); newline()))
====3
1:40c
2:40c
  
3:41c
    
====
1:52c
      val topEnv = ref(Env.empty: Basics.env)           (* environment toploop adds to *)
2:52c
      val topEnv = ref(Env.empty: Modules.env)           (* environment toploop adds to *)
3:53c
      val topEnv = ref(Env.empty: Basics.env)  (* environment toploop adds to *)
====3
1:54a
2:54a
3:56,59c
      val _ = D.env := stdPervEnv      (* for debugger debugging *)
      fun strToEnv searchEnv (s:string) =
  	EnvAccess.openStructureVar Env.empty 
  			   (EnvAccess.lookSTR searchEnv (Symbol.strSymbol s))
====3
1:56,68c
2:56,68c
      (* interesting cases:
         (outer loop): baseEnv = std. pervasives
                     topEnv = everything else so far
  		   lookup = std lookup
         (debugger use): baseEnv = dbg. pervasives
                     topEnv = everything else so far
  		   lookup = std lookup
         (inner loop): baseEnv = std. pervasives + everything prior to inner loop
                                      + special
  		     lookup = std lookup + special lookup
  		     topEnv = everything defined in inner loop.
      *)
     
3:61c
  
====3
1:78,80c
2:78,80c
  		(case dbglevel of 
  		   NODEBUG => ()
  	 	 | _ => D.sizereport string)
3:71,73c
  		if !System.Control.Debug.debugging then
  		  (!D.sizereport) string
  		else ()
====3
1:87c
2:87c
  		    val lambda' = FN(mkLvar(), Translate.transDec env inputSource absyn' 
3:80,82c
  		    val lambda' = 
  			Lambda.FN(mkLvar(), 
  				  Translate.transDec env inputSource absyn' 
====3
1:119a
2:119a
3:115c
                      val codesize = String.size(System.Unsafe.cast code)
====3
1:121,123c
2:121,123c
  			  (debugmsg "about to boot";
  			   debugmsg ("code size =" ^ 
  			     Integer.makestring(String.size(System.Unsafe.cast code)));
3:117,118c
                          (debugmsg ("about to boot\ncode size ="
                                       ^ Integer.makestring(codesize));
====3
1:130c
2:130c
  		in  update(System.Stats.codegen,time);
3:125,126c
                in  System.Stats.codesize:=  codesize+ !System.Stats.codesize;
                      update(System.Stats.codegen,time);
====3
1:145,146c
2:145,146c
  				(D.Xcomplete(); (* no return *)
  				 raise Stop (* !! *))
3:141c
  				(D.complete() (* no return *))
====3
1:150c
2:150c
  				raise e
3:145c
  				(D.rollback(); raise e)
====3
1:152c
2:152c
  				raise Stop
3:147c
  				(D.rollback(); raise Stop)
====3
1:154,158c
2:154,158c
  				raise INTERRUPT)
  		      | LIVEDEBUG _ =>
  			 let val saveEnv = !topEnv
  			     fun reset() =(topEnv := Env.atop(!topEnv,saveEnv);
  					   baseEnv := stdPervEnv;
3:149,159c
  				(D.rollback(); raise INTERRUPT)
  			  | D.INTERPOLATION =>
  				(print "[interpolation set]\n";
  				 raise Stop))
  		      | LIVEDEBUG (_,n,script) =>
  			 let val saveTop = !topEnv
  			     val saveBase = !baseEnv
  			     val saveAll = Env.atop(saveTop,saveBase)
  			     val pervEnv = strToEnv saveAll n
  			     fun reset() =(topEnv := Env.atop(!topEnv,saveTop);
  					   baseEnv := saveBase;
====3
1:161,162c
2:161,162c
  			 in baseEnv := Env.special(D.looker,Env.atop(saveEnv,stdPervEnv));
  			                       
3:162,163c
  			 in baseEnv := Env.special(D.looker,
  						   Env.atop(pervEnv,saveAll));
====
1:164,166c
  			    lookupLvar := fn x => (case D.blookup x of
  						     SOME x => x
  						   | NONE => lookup x);
2:164,166c
  			    lookupLvar := (fn x => (case D.blookup x of
  						     SOME x => x
  						   | NONE => lookup x));
3:165,167c
  			    lookupLvar := (fn x => (case D.blookup x of
  						      SOME x => x
  						    | NONE => lookup x));
====3
1:170,174c
2:170,174c
  				 interact();
  				 (* return only via ctrl/d *)
       		                 D.Xabort();
  				 reset();
  				 raise Stop (*!!*))
3:171,176c
  				 (case script of
  				    SOME s => use_stream NODEBUG s
  			          | NONE => interact());
  				 (* return only via ctrl/d or stream error
  				      ==> abort *)
       		                 D.abort() (* no return *))
====3
1:181a
2:181a
3:184c
  				 D.rollback();
====3
1:185a
2:185a
3:189c
  				 D.rollback();
====3
1:189a
2:189a
3:194c
  				 D.rollback();
====3
1:191a
2:191a
3:197,199c
  			    | D.INTERPOLATION => (* shouldn't happen *)
  				(reset();
  				 raise Stop (* ?? *))
====3
1:217,218c
2:217,218c
  		      | FULLDEBUG _ => D.instrumDec(filename,absyn)
  		      | LIVEDEBUG _ => D.instrumDec(filename,absyn)
3:225,226c
  		      | FULLDEBUG _ => D.instrumAndInstall(filename,absyn)
  		      | LIVEDEBUG _ => D.instrumAndInstall(filename,absyn)
====3
1:221,223c
2:221,223c
  		   (* set environment for debugging commands *)
  		   D.env := env;
  		   (*update(System.Stats.debuginstrum,time);*)
3:229c
  		   update(System.Stats.debuginstrum,time);
====
1:234c
               case absyn0
2:234c
               (case absyn0
3:240c
              (case absyn0
====2
1:249c
2:249c
  			    ModuleUtil.staleLvars(envr,Env.atop(!topEnv,!baseEnv))
3:255c
  			    EnvAccess.staleLvars(envr,Env.atop(!topEnv,!baseEnv))
====1
1:272c
  		   end;
2:272c
3:278c
  		   end);
====3
1:306c
2:306c
      fun use_source dbglevel (fname,stream) =
3:312c
      and use_source dbglevel (fname,stream) =
====3
1:308c
2:308c
                dbglevel MUST be NODEBUG. *)
3:314c
               dbglevel MUST NOT be LIVEDEBUG. *)
====
1:317,331c
  	    fun debugPervEnv s = EnvAccess.openStructureVar stdPervEnv
  			(EnvAccess.lookSTR (!topEnv) (Symbol.strSymbol s))
              fun hidefile () = if not interactive then
  			          D.hideFile fname 
  			      else ()
  	in (case dbglevel of 
  	      FULLDEBUG d => (hidefile(); baseEnv := debugPervEnv d)
  	    | LIVEDEBUG (d,_) => (hidefile(); baseEnv := debugPervEnv d)
  	    | NODEBUG => ());
  	   toploop(parser,inputSource,dbglevel)
  	      handle exn =>
   	        ((case dbglevel of 
  		    FULLDEBUG _ => baseEnv := stdPervEnv
  		  | LIVEDEBUG _ => baseEnv := stdPervEnv
  		  | NODEBUG => ());
2:317,333c
  	    fun debugPervEnv s = ModuleUtil.openStructureVar stdPervEnv
  			(ModuleUtil.lookSTR (!topEnv) ([Symbol.strSymbol s],
  				  fn _ => ErrorMsg.impossible "use_source"))
  
              fun hidefile () = if not interactive then
  			          D.hideFile fname 
  			      else ()
  	in (case dbglevel of 
  	      FULLDEBUG d => (hidefile(); baseEnv := debugPervEnv d)
  	    | LIVEDEBUG (d,_) => (hidefile(); baseEnv := debugPervEnv d)
  	    | NODEBUG => ());
  	   toploop(parser,inputSource,dbglevel)
  	      handle exn =>
   	        ((case dbglevel of 
  		    FULLDEBUG _ => baseEnv := stdPervEnv
  		  | LIVEDEBUG _ => baseEnv := stdPervEnv
  		  | NODEBUG => ());
3:323,345c
  	    fun hideFile () = 
  	      if not interactive then
  	        case dbglevel of 
  		  FULLDEBUG _ => D.hideFile fname
  		| LIVEDEBUG _ => D.hideFile fname
  		| NODEBUG => ()
  	      else ()
  	    val saveTop = !topEnv
  	    val saveBase = !baseEnv
  	    val saveAll = Env.atop(saveTop,saveBase)
  	    val pervEnv =
  	         case dbglevel of
  	 	   FULLDEBUG d => strToEnv saveAll d
  		 | LIVEDEBUG (d,_,_) => strToEnv saveAll d
                   | NODEBUG => Env.empty
  	in hideFile();
  	   baseEnv := Env.atop(pervEnv,saveAll);
  	   (* kludge: we just hide standard pervasives with debugger version *)
  	   topEnv := Env.empty;
             toploop(parser,inputSource,dbglevel)
                handle exn =>
  	        (topEnv := Env.atop(!topEnv,saveTop);
  		 baseEnv := saveBase;
====3
1:342c
2:344c
  	  end
3:356c
  	  end (* use source *)
====3
1:344c
2:346c
      fun use_file dbglevel fname =
3:358c
      and use_file dbglevel fname =
====3
1:349c
2:351c
      fun use_stream dbglevel s = use_source dbglevel ("<instream>",s)
3:363c
      and use_stream dbglevel s = use_source dbglevel ("<instream>",s)
XXX linkage.sml XXX
====
1:14c
    open Access Basics BareAbsyn ErrorMsg
2:14c
    open Access Variables Types Modules BareAbsyn ErrorMsg
3:14,15c
    open Array List Access Basics BareAbsyn ErrorMsg
    infix 9 sub
====3
1:38a
2:38a
3:40,41c
  	      | EBgen{exn=DATACON{rep=VARIABLEc(PATH[v]),...},...} => v
  	      | EBdef{exn=DATACON{rep=VARIABLEc(PATH[v]),...},...} => v
XXX process.sml XXX
====2
1:8,12c
2:8,11c
    val process : Modules.env * string * (CPS.function * string -> unit) option ->
  			Modules.env
    val load : Modules.env -> string -> Modules.env
    val primeEnv : Modules.env
3:8,12c
    val printslots : Basics.env -> string -> unit
    val process : Basics.env * string * (CPS.function * string -> unit) option ->
  			Basics.env
    val load : Basics.env -> string -> Basics.env
    val primeEnv : Basics.env
====2
1:14c
2:13c
    val bootEnv : (Modules.env -> string -> Modules.env) -> (Modules.env * (int * int * int))
3:14c
    val bootEnv : (Basics.env -> string -> Basics.env) -> (Basics.env * (int * int * int))
====
1:20c
   open Access Basics PrintUtil EnvAccess NewParse
2:19,21c
   open Access Modules Types Variables PrintUtil ModuleUtil NewParse
        PrintBasics
  
3:20,21c
   open Array List Access Basics PrintUtil EnvAccess NewParse
   infix 9 sub
====1
1:38c
    val _ = System.Control.prLambda := fn () => (MCprint.printLexp (!lambda); newline())
2:39c
3:39c
    val _ = System.Control.prLambda := (fn () => (MCprint.printLexp (!lambda); newline()))
====2
1:41a
2:43c
    open ErrorMsg BareAbsyn Lambda System.Timer
3:42a
====
1:43,126c
   (* debugging aid--print the slots of a structure
      -- this belongs somewhere else *)
  
    fun printslot {name,access=SLOT s} =
  	  (print "Slot "; print s; print " : ";
  	   print(Symbol.name name);
  	   print "\n")
      | printslot {name,access=INLINE s} =
  	  (print "Inline "; print(Prim.inLineName s); print " : ";
  	   print(Symbol.name name);
  	   print "\n")
      | printslot {name,access=PATH _} =
  	  (print "Path?? :";
  	   print(Symbol.name name);
  	   print "\n")
  
    val usl : {name:Symbol.symbol,access:access} list ref = ref nil
  
    fun buildlist (_,VARbind(VALvar{name=[n],access,...})) =
  		  usl := {name=n,access=access} :: !usl
      | buildlist (_,STRbind(STRvar{name=[n],access,...})) =
  		  usl := {name=n,access=access} :: !usl
      | buildlist (_,CONbind(DATACON{name,rep=(VARIABLE access),...})) =
  		  usl := {name=name,access=access} :: !usl
      | buildlist _ = ()
  
    fun slotgt ({access=SLOT s1,name},{access=SLOT s2,name=_}) = s1 > s2
      | slotgt ({access=SLOT _,...},_) = true
      | slotgt ({access=PATH[v1],...},{access=PATH[v2],...}) = v1 > v2
      | slotgt ({access=PATH _,...},_) = true
      | slotgt ({access=INLINE i1,...},{access=INLINE i2,...}) =
          ErrorMsg.impossible "why do you sort slots" (* i1 > i2 *)
      | slotgt ({access=INLINE _,...},_) = true
      | slotgt _ = ErrorMsg.impossible "Path access in printslots"
  
    fun symPath s =
      let fun f nil = (nil,nil)
  	  | f ("."::m) =
  		  let val (s,syms) = f m
  		  in  (nil,Symbol.strSymbol(implode s)::syms)
  		  end
  	  | f (a::m) =
  		  let val (s,syms) = f m
  		  in  (a::s,syms)
  		  end
          val (s,syms) = f(explode s)
      in  Symbol.strSymbol(implode s)::syms
      end
  
    fun qid env symlist =
      let fun getStr([],str) = str
  	  | getStr(id::rest,STRstr{table,env,...}) =
  	      let val STRvar{access=SLOT n,binding,...} = 
  		      lookSTR table id
  		      handle Env.Unbound =>
  		      (print ("unbound intermediate structure in path: "
  				^ Symbol.name id ^ "\n"); raise Stop)
  		  val str = case (binding,env)
  			     of (INDstr i,REL{s,...}) => s sub i
  			      | (SHRstr(i::r),REL{s,...}) =>
  				   TypesUtil.getEpath(r,s sub i)
  			      | (STRstr _, _) => binding
  			      | _ => ErrorMsg.impossible "Process.qid.getStr"
  	       in getStr(rest,str)
  	      end
  	val firstId::rest = symPath symlist
  	val STRvar{binding,...} = lookSTR env firstId
  	      handle Unbound => (print("unbound structure at head of path: "
  					^ Symbol.name firstId ^ "\n"); raise Stop)
      in  getStr(rest,binding)
      end
  
    fun printslots env s =
        let val STRstr{table,...} = qid env s
  	  val unsortedlist = (usl := nil; Env.app buildlist table; !usl)
  	  val sortedlist = Sort.sort slotgt unsortedlist
        in  print "module "; print s; print "\n";
  	  app printslot sortedlist
        end
        handle Bind => ErrorMsg.impossible "Weird structure in printslots"
  
  
    open ErrorMsg BareAbsyn Lambda System.Timer
  
2:44a
3:44,129c
   (* debugging aid--print the slots of a structure
      -- this belongs somewhere else *)
  
    fun printslot {name,access=SLOT s} =
  	  (print "Slot "; print s; print " : ";
  	   print(Symbol.name name);
  	   print "\n")
      | printslot {name,access=INLINE s} =
  	  (print "Inline "; print(Prim.inLineName s); print " : ";
  	   print(Symbol.name name);
  	   print "\n")
      | printslot {name,access=PATH _} =
  	  (print "Path?? :";
  	   print(Symbol.name name);
  	   print "\n")
  
    val usl : {name:Symbol.symbol,access:access} list ref = ref nil
  
    fun buildlist (_,VARbind(VALvar{name=[n],access,...})) =
  		  usl := {name=n,access=access} :: !usl
      | buildlist (_,STRbind(STRvar{name=[n],access,...})) =
  		  usl := {name=n,access=access} :: !usl
      | buildlist (_,CONbind(DATACON{name,rep=(VARIABLE access),...})) =
  		  usl := {name=name,access=access} :: !usl
      | buildlist (_,CONbind(DATACON{name,rep=(VARIABLEc access),...})) =
  		  usl := {name=name,access=access} :: !usl
      | buildlist _ = ()
  
    fun slotgt ({access=SLOT s1,name},{access=SLOT s2,name=_}) = s1 > s2
      | slotgt ({access=SLOT _,...},_) = true
      | slotgt ({access=PATH[v1],...},{access=PATH[v2],...}) = v1 > v2
      | slotgt ({access=PATH _,...},_) = true
      | slotgt ({access=INLINE i1,...},{access=INLINE i2,...}) =
          ErrorMsg.impossible "why do you sort slots" (* i1 > i2 *)
      | slotgt ({access=INLINE _,...},_) = true
      | slotgt _ = ErrorMsg.impossible "Path access in printslots"
  
    fun symPath s =
      let fun f nil = (nil,nil)
  	  | f ("."::m) =
  		  let val (s,syms) = f m
  		  in  (nil,Symbol.strSymbol(implode s)::syms)
  		  end
  	  | f (a::m) =
  		  let val (s,syms) = f m
  		  in  (a::s,syms)
  		  end
          val (s,syms) = f(explode s)
      in  Symbol.strSymbol(implode s)::syms
      end
  
    fun qid env symlist =
      let fun getStr([],str) = str
  	  | getStr(id::rest,STRstr{table,env,...}) =
  	      let val STRvar{access=SLOT n,binding,...} = 
  		      lookSTR table id
  		      handle Env.Unbound =>
  		      (print ("unbound intermediate structure in path: "
  				^ Symbol.name id ^ "\n"); raise Stop)
  		  val str = case (binding,env)
  			     of (INDstr i,REL{s,...}) => s sub i
  			      | (SHRstr(i::r),REL{s,...}) =>
  				   TypesUtil.getEpath(r,s sub i)
  			      | (STRstr _, _) => binding
  			      | _ => ErrorMsg.impossible "Process.qid.getStr"
  	       in getStr(rest,str)
  	      end
  	val firstId::rest = symPath symlist
  	val STRvar{binding,...} = lookSTR env firstId
  	      handle Unbound => (print("unbound structure at head of path: "
  					^ Symbol.name firstId ^ "\n"); raise Stop)
      in  getStr(rest,binding)
      end
  
    fun printslots env s =
        let val STRstr{table,...} = qid env s
  	  val unsortedlist = (usl := nil; Env.app buildlist table; !usl)
  	  val sortedlist = Sort.sort slotgt unsortedlist
        in  print "module "; print s; print "\n";
  	  app printslot sortedlist
        end
        handle Bind => ErrorMsg.impossible "Weird structure in printslots"
  
  
    open ErrorMsg BareAbsyn System.Timer
  
====2
1:187c
2:105,106c
  	     	let val _ = print "point 1\n"
  		    val timer = start_timer()
3:190c
  	     	let val timer = start_timer()
====2
1:188a
2:108c
  		    val _ = print "point 2\n"
3:191a
====2
1:189a
2:110c
  		    val _ = print "point 3\n"
3:192a
====2
1:191a
2:113c
  		    val _ = print "point 4\n"
3:194a
====2
1:216,223c
2:138,147c
  	      fn absyn =>
  	        let val pr = fn () =>
  		                (PrintDec.printDec (!env') absyn (fn _ => impossible "Process.f"); print "\n")
  		in case absyn
  		   of (SEQdec decs) => app f decs
  		    | (MARKdec(d,_,_)) => f d
  		    | (SIGdec sl) => pr ()
  		    | (OPENdec _) => pr ()
  		    | (STRdec sbs) =>
  		       (pr ();
3:219,226c
  		  fn (SEQdec decs) => app f decs
  		   | (absyn as SIGdec _) => 
  		       (PrintAbsyn.printDec (!env') (absyn,0,!printDepth);
  			newline())
  		   | (absyn as OPENdec _) =>
  		       (PrintAbsyn.printDec (!env') (absyn,0,!printDepth);
  			newline())
  		   | (STRdec sbs) =>
====2
1:226,227c
2:150c
  			      STRB{strvar as STRvar{name=[n],access=PATH[v],...},...} =>
3:229,230c
  			      STRB{strvar=STRvar{name=[n],access=PATH[v],...},...} =>
  			     (print "structure "; printSym n; newline();
====2
1:232c
2:155,156c
  			(pr ();
  			 for sbs
3:235c
  			for sbs
====2
1:234,235c
2:158c
  			      STRB{strvar as STRvar{name=[n],access=PATH[v],...},...} =>
3:237,238c
  			      STRB{strvar=STRvar{name=[n],access=PATH[v],...},...} =>
  			     (print "abstraction "; printSym n; newline();
====2
1:240c
2:163,164c
  			 (pr ();
  			  for fbs
3:243c
  			for fbs
====2
1:242,244c
2:166,167c
  			      FCTB{fctvar as FCTvar{name,access=PATH[v],...},...} =>
  			      let val mkLam = fn () => transFctb (!env') fb handle Match => impossible "transFctb: match exception"
3:245,247c
  			      FCTB{fctvar=FCTvar{name,access=PATH[v],...},...} =>
  			     (print "functor "; printSym name; newline();
  			      let val mkLam = fn () => transFctb (!env') fb
====2
1:247c
2:169a
3:250c
  		   | (MARKdec(d,_,_)) => f d
====2
1:248a
2:171c
                end
3:251a
====2
1:282,323c
2:205,237c
      let val err = fn _ => impossible "bootEnv"
  	val sigSymbols =
             map Symbol.sigSymbol ["REF","LIST","ARRAY","BYTEARRAY","IO","BOOL",
  		                 "STRING","INTEGER","REAL","GENERAL"]
          val NJsymbol = Symbol.strSymbol "NewJersey"
          val _ = CoreInfo.resetCore();
          val env = load primeEnv "boot/assembly.sig"
  	val env = (is_core := true;  loader env "boot/core.sml" 
  				handle e => (is_core := false; raise e))
          val _ = is_core := false;
          val env = load env "boot/dummy.sml";
          val markabs = !System.Control.markabsyn
  		       before System.Control.markabsyn := false
  	val svCore as STRvar{access=PATH[lvCore],...} =
  	         lookSTR env ([Symbol.strSymbol "Core"],err)
  	val _ = CoreInfo.setCore(env,[Symbol.strSymbol "Core"]);
    	val env = load env "boot/perv.sig";
  	val env = load env "boot/system.sig";
  	val env = loader env "boot/math.sml";
  	val env = loader env "boot/perv.sml";
  	val env = load env "boot/overloads.sml";
  	val _ = System.Control.markabsyn := markabs;
  	val STRvar{access=PATH[lvMath],...} =
  		     lookSTR env ([Symbol.strSymbol "Math"],err)
  	and svInitial as STRvar{access=PATH[lvInitial],
  			         binding=strInitial,...} =
  		     lookSTR env ([Symbol.strSymbol "Initial"],err)
          and overLoads = lookSTR env ([Symbol.strSymbol "Overloads"],err)
  	val env' = openStructureVar (openStructureVar Env.empty svInitial)
  	                           overLoads
  	val env' = fold (fn (name,e) => Env.bind(name,Env.look env name,e))
                   sigSymbols env'
  	val env' = Env.bind
3:285,326c
      let val env = ref primeEnv
      in
        (CoreInfo.resetCore();
         env := load (!env) "boot/assembly.sig";
         is_core := true;
         (env := loader (!env) "boot/core.sml" 
  				handle e => (is_core := false; raise e));
         is_core := false;
         env := load (!env) "boot/dummy.sml";
         let val markabs = !System.Control.markabsyn
  			before System.Control.markabsyn := false
  	   val svCore as STRvar{access=PATH[lvCore],...} =
  	         lookSTR (!env) (Symbol.strSymbol "Core")
         in
  	   CoreInfo.setCore(svCore);
    
  	  env := load (!env) "boot/perv.sig";
  	  env := load (!env) "boot/system.sig";
  	  env := loader (!env) "boot/math.sml";
  	  env := loader (!env) "boot/perv.sml";
  	  env := load (!env) "boot/overloads.sml";
  	  System.Control.markabsyn := markabs;
  	  let val STRvar{access=PATH[lvMath],...} =
  		     lookSTR (!env) (Symbol.strSymbol "Math")
  	      and svInitial as STRvar{access=PATH[lvInitial],
  			 	      binding=strInitial as STRstr{table,...},...} =
  		     lookSTR (!env) (Symbol.strSymbol "Initial")
  	      and STRvar{binding=STRstr{table=otable,...},...} =
  		     lookSTR (!env) (Symbol.strSymbol "Overloads")
  	      val sigs = map (fn s => lookSIG (!env) (Symbol.sigSymbol s))
  			      ["REF","LIST","ARRAY","BYTEARRAY","IO","BOOL",
  			       "STRING","INTEGER","REAL","GENERAL"]
  	      val NJsymbol = Symbol.strSymbol "NewJersey"
  	  in (* merge overload bindings into Initial's symtable *)
  	    (* IntStrMap.app (IntStrMap.add table) otable;
  	     $$$ this has been replaced by the following atop construction,
  	     which is probably less efficient *)
  	     env := Env.atop(otable,openStructureVar Env.empty svInitial);
  	     (* Rewrite this as a "fold", without side-effects *)
  	     app (fn (sgn as SIGvar{name,...}) => 
  		   env := Env.bind(name,SIGbind sgn, !env)) sigs;
  	     env := Env.bind
====2
1:327,330c
2:241,243c
  			 env')
       in  (env',(lvCore,lvInitial,lvMath))
       end handle Cascade s => (print("Compiler Bug: "^s^"\n");
3:330,333c
  			 !env);
  	     (!env,(lvCore,lvInitial,lvMath))
  	  end
         end) handle Cascade s => (print("Compiler Bug: "^s^"\n");
====2
1:332,333c
2:244a
3:335,336c
       end
  
XXX prof.sml XXX
====2
1:13c
2:13c
  open Access Absyn Lambda Variables Modules Types BasicTypes ErrorMsg
3:13c
  open Access Absyn Lambda Basics BasicTypes ErrorMsg
