/* vararg-interp-x86.s
 * 
 * This file is GENERATED by the varargs library. Modify the
 * code at your peril :).
 * 
 * This interpreter parses the arguments for a vararg C function,
 * putting them in the correct locations, and then calls the function.
 * 
 * Mike Rainey (mrainey@cs.uchicago.edu)
 */
	.text
varargs:
	/* live= GP={%edi %esi %ebx} spilled=  */
	pushl	%ebp
	movl	%esp, %ebp
	movl	12(%ebp), %edx
	subl	$4088, %esp
	jmp	interp0B
interpC:
	addl	$32, %edx
interp0B:
	cmpl	16(%ebp), %edx
	jge	gotoCE
resolveKindsD:
	cmpl	$0, 8(%edx)
	je	resolveTys.gpr7
	cmpl	$1, 8(%edx)
	je	resolveTys.fpr8
	cmpl	$2, 8(%edx)
	je	resolveTys.stk9
	cmpl	$3, 8(%edx)
	je	resolveTys.fstkA
resolveGprs32.1:
	jmp	interpC
L3:
	/* cleanup edge */
resolveFprs32.2:
	jmp	interpC
L4:
	/* cleanup edge */
resolveFprs64.3:
	jmp	interpC
L5:
	/* cleanup edge */
resolveStk32.4:
	movl	(%edx), %eax
	movl	16(%edx), %ecx
	movl	%eax, (%esp,%ecx,1)
	jmp	interpC
L7:
	/* cleanup edge */
resolveFstk32.5:
	movl	16(%edx), %eax
	flds	(%edx)
	fstps	(%esp,%eax,1)
	jmp	interpC
L8:
	/* cleanup edge */
resolveFstk64.6:
	movl	16(%edx), %ecx
	fldl	(%edx)
	fstpl	(%esp,%ecx,1)
	jmp	interpC
resolveTys.gpr7:
	cmpl	$32, 24(%edx)
	je	L1
resolveTys.fpr8:
	cmpl	$32, 24(%edx)
	je	L3
L2:
	cmpl	$64, 24(%edx)
	je	L4
resolveTys.stk9:
	cmpl	$32, 24(%edx)
	je	L5
resolveTys.fstkA:
	cmpl	$32, 24(%edx)
	je	L7
L6:
	cmpl	$64, 24(%edx)
	je	L8
gotoCE:
	/* Liveout:  GP={%eax}  */
	call	*8(%ebp)
	leave
	/* live= GP={%edi %esi %ebx} spilled=  */
	ret
L1:
	/* cleanup edge */
	jmp	resolveGprs32.1
	.global	varargs
