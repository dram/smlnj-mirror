/* vararg-interp-amd64.s
 * 
 * This file is GENERATED by the varargs library. Modify the
 * code at your peril :).
 * 
 * This interpreter parses the arguments for a vararg C function,
 * putting them in the correct locations, and then calls the function.
 * 
 * Mike Rainey (mrainey@cs.uchicago.edu)
 */
	.text
varargs:
	movq	$8, %rax
	pushq	%rbp
	movq	%rsp, %rbp
	movq	%rsi, %rbx
	jmp	interp049
interp4A:
	addq	$32, %rbx
interp049:
	cmpq	%rdx, %rbx
	jge	gotoC4C
resolveKinds4B:
	cmpq	$0, 8(%rbx)
	je	resolveTys.gpr45
	cmpq	$1, 8(%rbx)
	je	resolveTys.fpr46
	cmpq	$2, 8(%rbx)
	je	resolveTys.stk47
	cmpq	$3, 8(%rbx)
	je	resolveTys.fstk48
resolveGprs32.3D:
	cmpq	$0, 16(%rbx)
	je	gpr32.0.reg
	cmpq	$7, 16(%rbx)
	je	gpr32.7.reg
	cmpq	$6, 16(%rbx)
	je	gpr32.6.reg
	cmpq	$2, 16(%rbx)
	je	gpr32.2.reg
	cmpq	$1, 16(%rbx)
	je	gpr32.1.reg
	cmpq	$8, 16(%rbx)
	je	gpr32.8.reg
	cmpq	$9, 16(%rbx)
	je	gpr32.9.reg
	jmp	interp4A
resolveGprs64.3E:
	cmpq	$0, 16(%rbx)
	je	gpr64.0.reg
	cmpq	$7, 16(%rbx)
	je	gpr64.7.reg
	cmpq	$6, 16(%rbx)
	je	gpr64.6.reg
	cmpq	$2, 16(%rbx)
	je	gpr64.2.reg
	cmpq	$1, 16(%rbx)
	je	gpr64.1.reg
	cmpq	$8, 16(%rbx)
	je	gpr64.8.reg
	cmpq	$9, 16(%rbx)
	je	gpr64.9.reg
	jmp	interp4A
resolveFprs32.3F:
	cmpq	$0, 16(%rbx)
	je	fpr32.0.reg
	cmpq	$1, 16(%rbx)
	je	fpr32.1.reg
	cmpq	$2, 16(%rbx)
	je	fpr32.2.reg
	cmpq	$3, 16(%rbx)
	je	fpr32.3.reg
	cmpq	$4, 16(%rbx)
	je	fpr32.4.reg
	cmpq	$5, 16(%rbx)
	je	fpr32.5.reg
	cmpq	$6, 16(%rbx)
	je	fpr32.6.reg
	cmpq	$7, 16(%rbx)
	je	fpr32.7.reg
	jmp	interp4A
resolveFprs64.40:
	cmpq	$0, 16(%rbx)
	je	fpr64.0.reg
	cmpq	$1, 16(%rbx)
	je	fpr64.1.reg
	cmpq	$2, 16(%rbx)
	je	fpr64.2.reg
	cmpq	$3, 16(%rbx)
	je	fpr64.3.reg
	cmpq	$4, 16(%rbx)
	je	fpr64.4.reg
	cmpq	$5, 16(%rbx)
	je	fpr64.5.reg
	cmpq	$6, 16(%rbx)
	je	fpr64.6.reg
	cmpq	$7, 16(%rbx)
	je	fpr64.7.reg
	jmp	interp4A
resolveStk32.41:
	movl	(%rbx), %r10d
	movq	16(%rbx), %r11
	movl	%r10d, (%rsp,%r11,1)
	jmp	interp4A
resolveStk64.42:
	movq	(%rbx), %r12
	movq	16(%rbx), %r13
	movq	%r12, (%rsp,%r13,1)
	jmp	interp4A
resolveFstk32.43:
	movq	16(%rbx), %r14
	movss	 (%rbx), %xmm8
	movss	 %xmm8, (%rsp,%r14,1)
	jmp	interp4A
resolveFstk64.44:
	movq	16(%rbx), %r15
	movsd	 (%rbx), %xmm9
	movsd	 %xmm9, (%rsp,%r15,1)
	jmp	interp4A
resolveTys.gpr45:
	cmpq	$32, 24(%rbx)
	je	resolveGprs32.3D
	cmpq	$64, 24(%rbx)
	je	resolveGprs64.3E
resolveTys.fpr46:
	cmpq	$32, 24(%rbx)
	je	resolveFprs32.3F
	cmpq	$64, 24(%rbx)
	je	resolveFprs64.40
resolveTys.stk47:
	cmpq	$32, 24(%rbx)
	je	resolveStk32.41
	cmpq	$64, 24(%rbx)
	je	resolveStk64.42
resolveTys.fstk48:
	cmpq	$32, 24(%rbx)
	je	resolveFstk32.43
	cmpq	$64, 24(%rbx)
	je	resolveFstk64.44
gpr32.0.reg:
	movl	(%rbx), %eax
	jmp	interp4A
gpr32.7.reg:
	movl	(%rbx), %edi
	jmp	interp4A
gpr32.6.reg:
	movl	(%rbx), %esi
	jmp	interp4A
gpr32.2.reg:
	movl	(%rbx), %edx
	jmp	interp4A
gpr32.1.reg:
	movl	(%rbx), %ecx
	jmp	interp4A
gpr32.8.reg:
	movl	(%rbx), %r8d
	jmp	interp4A
gpr32.9.reg:
	movl	(%rbx), %r9d
	jmp	interp4A
gpr64.0.reg:
	movq	(%rbx), %rax
	jmp	interp4A
gpr64.7.reg:
	movq	(%rbx), %rdi
	jmp	interp4A
gpr64.6.reg:
	movq	(%rbx), %rsi
	jmp	interp4A
gpr64.2.reg:
	movq	(%rbx), %rdx
	jmp	interp4A
gpr64.1.reg:
	movq	(%rbx), %rcx
	jmp	interp4A
gpr64.8.reg:
	movq	(%rbx), %r8
	jmp	interp4A
gpr64.9.reg:
	movq	(%rbx), %r9
	jmp	interp4A
fpr32.0.reg:
	movss	 (%rbx), %xmm0
	jmp	interp4A
fpr32.1.reg:
	movss	 (%rbx), %xmm1
	jmp	interp4A
fpr32.2.reg:
	movss	 (%rbx), %xmm2
	jmp	interp4A
fpr32.3.reg:
	movss	 (%rbx), %xmm3
	jmp	interp4A
fpr32.4.reg:
	movss	 (%rbx), %xmm4
	jmp	interp4A
fpr32.5.reg:
	movss	 (%rbx), %xmm5
	jmp	interp4A
fpr32.6.reg:
	movss	 (%rbx), %xmm6
	jmp	interp4A
fpr32.7.reg:
	movss	 (%rbx), %xmm7
	jmp	interp4A
fpr64.0.reg:
	movsd	 (%rbx), %xmm0
	jmp	interp4A
fpr64.1.reg:
	movsd	 (%rbx), %xmm1
	jmp	interp4A
fpr64.2.reg:
	movsd	 (%rbx), %xmm2
	jmp	interp4A
fpr64.3.reg:
	movsd	 (%rbx), %xmm3
	jmp	interp4A
fpr64.4.reg:
	movsd	 (%rbx), %xmm4
	jmp	interp4A
fpr64.5.reg:
	movsd	 (%rbx), %xmm5
	jmp	interp4A
fpr64.6.reg:
	movsd	 (%rbx), %xmm6
	jmp	interp4A
fpr64.7.reg:
	movsd	 (%rbx), %xmm7
	jmp	interp4A
gotoC4C:
	/* Liveout:  GP={%rax}  */
	call	*%rdi
	leave
	ret
	.global	varargs
