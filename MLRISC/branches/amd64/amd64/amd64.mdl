(* amd64.mdl
 *
 * COPYRIGHT (c) 2017 The Fellowship of SM_L/NJ (http://www.smlnj.org)
 * All rights reserved.
 *
 * The AMD64 (aka x86-64) machine description.
 *
 * See http://wiki.osdev.org/X86-64_Instruction_Encoding for details.
 *)

architecture AMD64 = 
  struct

   superscalar          (* superscalar machine *)
 
   little endian        (* little endian architecture *)

   lowercase assembly   (* print assembly in lower case *)

   storage
      GP   = $r[16] of 64 bits 
                asm: (fn (0,8)  => "%al" | (4, 8) => "%ah"
                       | (1,8)  => "%cl" | (5, 8) => "%ch"
                       | (2,8)  => "%dl" | (6, 8) => "%dh"
                       | (3,8)  => "%bl" | (7, 8) => "%bh"
		       | (r,8)  => "%r"^Int.toString r^"b"

		       | (0,16) => "%ax"  | (4,16) => "%sp" 
		       | (1,16) => "%cx"  | (5,16) => "%bp" 
		       | (2,16) => "%dx"  | (6,16) => "%si"      
		       | (3,16) => "%bx"  | (7,16) => "%di"     
		       | (r,16) => "%r"^Int.toString r^"w"

		       | (0,32) => "%eax"  | (4,32) => "%esp"  
		       | (1,32) => "%ecx"  | (5,32) => "%ebp" 
		       | (2,32) => "%edx"  | (6,32) => "%esi" 
		       | (3,32) => "%ebx"  | (7,32) => "%edi" 
		       | (r,32) => "%r"^Int.toString r^"d"

		       | (0,64) => "%rax"  | (4,64) => "%rsp" 
		       | (1,64) => "%rcx"  | (5,64) => "%rbp" 
		       | (2,64) => "%rdx"  | (6,64) => "%rsi"
		       | (3,64) => "%rbx"  | (7,64) => "%rdi"
                       | (r,64) => "%r"^Int.toString r
		       
                       | (r,_) => "%"^Int.toString r
                      )
   |  FP   = $f[16] of 64 bits
	             asm: (fn (f, _) => 
			      if f < 16 
				then "%xmm"^Int.toString f
				else "%f"^Int.toString f )
   |  CC     = $cc[] of 32 bits aliasing GP asm: "cc"
   |  EFLAGS = $eflags[1] of 32 bits asm: "$eflags"
   |  FFLAGS = $fflags[1] of 32 bits asm: "$fflags"
   |  MEM    = $m[]    of 8 aggregable bits asm: "mem" 
   |  CTR_L   = $ctrl[] asm: "ctrl"

   locations
       rax       = $r[0]
   and rcx       = $r[1]
   and rdx       = $r[2]
   and rbx       = $r[3]
   and rsp       = $r[4]
   and rbp       = $r[5]
   and rsi       = $r[6]
   and rdi       = $r[7]
   and r8        = $r[8]
   and r9        = $r[9]
   and r10       = $r[10]
   and r11       = $r[11]
   and r12       = $r[12]
   and r13       = $r[13]
   and r14       = $r[14]
   and r15       = $r[15]

   and xmm0      = $f[0]
   and xmm1      = $f[1]
   and xmm2      = $f[2]
   and xmm3      = $f[3]
   and xmm4      = $f[4]
   and xmm5      = $f[5]
   and xmm6      = $f[6]
   and xmm7      = $f[7]
   and xmm8      = $f[8]
   and xmm9      = $f[9]
   and xmm10     = $f[10]
   and xmm11     = $f[11]
   and xmm12     = $f[12]
   and xmm13     = $f[13]
   and xmm14     = $f[14]
   and xmm15     = $f[15]

   and stackptrR = $r[4]
   and asmTmpR   = $r[0] (* not used *)
   and fasmTmp   = $f[0] (* not used *)
   and eflags    = $eflags[0]

  (*------------------------------------------------------------------------
   * 
   * Representation for various opcodes.
   * 
   *------------------------------------------------------------------------*)
   structure Instruction = 
   struct
      (* An effective address can be any combination of
       *  base + index*scale + disp 
       *   or
       *   B + I*SCALE + DISP
       *
       * where any component is optional. The operand datatype captures
       * all these combinations.
       *
       *  DISP 	         == Immed | ImmedLabel | Const
       *  B		 == Displace{base=B, disp=0}
       *  B+DISP	 == Displace{base=B, disp=DISP}
       *  I*SCALE+DISP   == Indexed{base=NONE,index=I,scale=SCALE,disp=D}
       *  B+I*SCALE+DISP == Indexed{base=SOME B,index=I,scale=SCALE,disp=DISP}
       * Note1: The index register cannot be rbp.
       *        The disp field must be one of Immed, ImmedLabel,  or Const.
       *)

      (* Note: Relative is only generated after sdi resolution *)
      datatype operand =
         Immed      of Int32.int   	rtl: int
       | Immed64    of Int64.int        rtl: int
       | ImmedLabel of T.labexp         rtl: labexp
       | Relative   of int		(* no semantics given *)
       | LabelEA    of T.labexp         rtl: labexp (* XXX *)
       | Direct     of (int * $GP)	rtl: $r[GP]
       | FDirect    of $FP              rtl: $f[FP]
       | Displace   of {base: $GP, disp:operand, mem:Region.region}
        				rtl: $m[$r[base] + disp : mem]
       | Indexed    of {base: $GP option, index: $GP, scale:int, 
                        disp:operand, mem:Region.region}
					rtl: $m[$r[base] + $r[index] << scale + disp : mem]

      type addressing_mode = operand
      
      type ea = operand
    
      datatype cond! = 
          EQ "e" 0w4 | NE 0w5 | LT "l" 0w12 | LE 0w14 | GT "g" 0w15 | GE 0w13
        | B  0w2 | BE (* below *) 0w6 | A 0w7 | AE (* above *) 0w3
        | C  0w2 | NC (* if carry *) 0w3 | P 0wxa | NP (* if parity *) 0wxb
        | O  0w0 | NO (* overflow *) 0w1
    
          (* LOCK can only be used in front of
           *                      (Intel ordering, not gasm ordering)
           * ADC, ADD, AND, BT   mem, reg/imm
           * BTS, BTR, BTC, OR   mem, reg/imm
           * SB_B, SU_B, XOR       mem, reg/imm
           * XCHG                reg, mem
           * XCHG                mem, reg
           * DEC, INC, NEG, NOT  mem
           *)
    
      datatype binaryOp!
      (* 64-bit arithmetic operations *)
       = ADD_Q | SUB_Q | AND_Q | OR_Q | XOR_Q | SHL_Q | SAR_Q | SHR_Q | MUL_Q | IMUL_Q
       | ADC_Q | SBB_Q 
      (* 32-bit arithmetic operations *)
       | ADD_L | SUB_L | AND_L | OR_L | XOR_L | SHL_L | SAR_L | SHR_L | MUL_L | IMUL_L
       | ADC_L | SBB_L 
      (* 16-bit arithmetic operations *)
       | ADD_W | SUB_W | AND_W | OR_W | XOR_W | SHL_W | SAR_W | SHR_W | MUL_W | IMUL_W
      (* 8-bit arithmetic operations *)
       | ADD_B | SUB_B | AND_B | OR_B | XOR_B | SHL_B | SAR_B | SHR_B | MUL_B | IMUL_B
      (* bit-test operations *)
       | BT_Q | BT_L | BT_W
      (* bit test-and-complement operations *)
       | BTC_Q | BTC_L | BTC_W
      (* bit test-and-reset operations *)
       | BTR_Q | BTR_L | BTR_W
      (* bit test-and-set operations *)
       | BTS_Q | BTS_L | BTS_W
       | ROL_W | ROR_W | ROL_L | ROR_L
       | XCHG_B | XCHG_W | XCHG_L
      (* atomic operations *)
       | LOCK_ADC_W "lock\n\tadcw"
       | LOCK_ADC_L "lock\n\tadcl"
       | LOCK_ADD_W "lock\n\taddw"
       | LOCK_ADD_L "lock\n\taddl"
       | LOCK_AND_W "lock\n\tandw"
       | LOCK_AND_L "lock\n\tandl"
       | LOCK_BTS_W "lock\n\tbtsw"
       | LOCK_BTS_L "lock\n\tbtsl"
       | LOCK_BTR_W "lock\n\tbtrw"
       | LOCK_BTR_L "lock\n\tbtrl"
       | LOCK_BTC_W "lock\n\tbtcw"
       | LOCK_BTC_L "lock\n\tbtcl"
       | LOCK_OR_W  "lock\n\torw"
       | LOCK_OR_L  "lock\n\torl"
       | LOCK_SBB_W "lock\n\tsbbw"
       | LOCK_SBB_L "lock\n\tsbbl"
       | LOCK_SUB_W "lock\n\tsubw"
       | LOCK_SUB_L "lock\n\tsubl"
       | LOCK_XOR_W "lock\n\txorw"
       | LOCK_XOR_L "lock\n\txorl"
       | LOCK_XADD_B "lock\n\txaddb"
       | LOCK_XADD_W "lock\n\txaddw"
       | LOCK_XADD_L "lock\n\txaddl"
   
      (* One operand opcodes *)  
      datatype multDivOp!
        = IMULL1 "imull" | MULL1 "mull" | IDIVL1 "idivl" | DIVL1 "divl"
	| IMULQ1 "imulq" | MULQ1 "mulq" | IDIVQ1 "idivq" | DIVQ1 "divq" 
    
      datatype unaryOp! = DEC_Q | INC_Q | NEG_Q | NOT_Q
                        | DEC_L | INC_L | NEG_L | NOT_L 
                        | DEC_W | INC_W | NEG_W | NOT_W
                        | DEC_B | INC_B | NEG_B | NOT_B 
                        | LOCK_DEC_Q "lock\n\tdecq"
                        | LOCK_INC_Q "lock\n\tincq"
                        | LOCK_NEG_Q "lock\n\tnegq"
                        | LOCK_NOT_Q "lock\n\tnotq"

      datatype shiftOp! = SHLD_L | SHRD_L 
    
      datatype bitOp! = BT_Q
                      | BT_L
                      | BT_W
                      | LOCK_BT_L "lock\n\tbtl"
                      | LOCK_BT_W "lock\n\tbtw"
    
      datatype move! = MOV_Q
	             | MOV_L    (* zx(long) -> qword *)
                     | MOV_B             
                     | MOV_W             
		     | MOVABS_Q
		     | MOVSW_Q  (* sx(word) -> qword *)
                     | MOVZW_Q  (* zx(word) -> qword *) 
                     | MOVSW_L  (* sx(word) -> long *)
                     | MOVZW_L  (* zx(word) -> long *) 
                     | MOVSB_Q  (* sx(byte) -> qword *) 
                     | MOVZB_Q  (* zx(byte) -> qword *)
                     | MOVSB_L  (* sx(byte) -> long *)
                     | MOVZB_L  (* zx(byte) -> long *)
		     | MOVSL_Q  (* sx(long) -> qword *)
		     | CVTSD2SI  (* double -> long *)
		     | CVTSS2SI  (* float -> long *)
		     | CVTSD2SIQ  (* double -> qword *)
		     | CVTSS2SIQ  (* float -> qword *)
    
       datatype fbin_op!
         = ADDS_S | ADDS_D
         | SUBS_S | SUBS_D
         | MULS_S | MULS_D
         | DIVS_S | DIVS_D
	 | XORP_S | XORP_D
	 | ANDP_S | ANDP_D
	 | ORP_S  | ORP_D

       datatype fcom_op!
         = COMIS_S | COMIS_D               (* ordered *)
         | UCOMIS_S | UCOMIS_D             (* unordered *)

       datatype fmove_op!
	 = MOVS_S | MOVS_D
	   (* conversion *)
	 | CVTSS2SD | CVTSD2SS
	 | CVTSI2SS | CVTSI2SSQ | CVTSI2SD | CVTSI2SDQ

      (* Intel floating point precision *)
      datatype fsize = FP32 "s" | FP64 "l"
    
      (* Intel integer precision *)
      datatype isize = I8 "8" | I16 "16" | I32 "32" | I64 "64" 
    
  end (* Instruction *)

  (*------------------------------------------------------------------------
   *
   * Here, I'm going to define the semantics of the instructions
   *
   *------------------------------------------------------------------------*)
  structure RT_L =
  struct

     (* Get the basis *)
     include "Tools/basis.mdl"
     open Basis
     infix 1 ||  (* parallel effects *)
     infix 2 :=  (* assignment *)

     (* Some type abbreviations *)
     fun byte x = (x : #8 bits)
     fun word x = (x : #16 bits)
     fun long x = (x : #32 bits)
     fun qword x = (x: #64 bits)
     fun float x = (x : #32 bits)
     fun double x = (x : #64 bits)
     fun real80 x = (x : #80 bits)

     (* Intel register abbreviations *)
     val rax = $r[0] and rcx = $r[1] and rdx = $r[2] and rbx = $r[3]
     and rsp = $r[4] and rbp = $r[5] and rsi = $r[6] and rdi = $r[7]

     (* Condition codes bits in eflag.  
      * Let's give symbolic name for each bit as per the Intel doc.
      *)
     rtl setFlag : #n bits -> #n bits
     fun flag b = andb($eflags[0] >> b, 1)
     val CF = flag 0 and PF = flag 2  
     and ZF = flag 6 and SF = flag 7 and OF = flag 11

     (* Now gets use the bits to express the conditions.  Again from Intel. *)
     (* conditions *)                   (* aliases *)
     val B   = CF == 1                  val C = B and NAE = B 
     val BE  = CF == 1 orelse ZF == 1   val NA = BE          
     val E   = ZF == 1                  val Z = E
     val L   = SF <> OF                 val NGE = L
     val LE  = SF <> OF orelse ZF == 1  val NG = LE
     val N_B  = CF == 0                  val AE = N_B and NC = N_B
     val NBE = CF == 0 andalso ZF == 0  val A  = NBE
     val NE  = ZF == 0                  val NZ = NE
     val N_L  = SF == OF                 val GE = N_L
     val NLE = ZF == 0 andalso SF == OF val G = NLE
     val NO  = OF == 0 
     val NP  = PF == 0                  val PO = NP
     val NS  = SF == 0
     val O   = OF == 1
     val P   = PF == 1                  val PE = P
     val S   = SF == 1

     rtl NOP{} = () (* duh! *)
     rtl LEA_L{addr, r32} = $r[r32] := addr (* this is completely wrong! XXX *)
     rtl LEA_Q{addr, r64} = $r[r32] := addr (* this is completely wrong! XXX *)

         (* moves with type conversion *)
     rtl MOV_Q{src,dst} = dst := qword src
     rtl MOV_L{src,dst} = dst := long src
     rtl MOV_W{src,dst} = dst := word src
     rtl MOV_B{src,dst} = dst := byte src
     rtl MOVSW_L{src,dst} = dst := long(sx(word src))
     rtl MOVZW_L{src,dst} = dst := long(zx(word src))
     rtl MOVSB_L{src,dst} = dst := long(sx(byte src))
     rtl MOVZB_L{src,dst} = dst := long(zx(byte src))
     rtl MOVSW_Q{src,dst} = dst := qword(sx(word src))
     rtl MOVZW_Q{src,dst} = dst := qword(zx(word src))
     rtl MOVSB_Q{src,dst} = dst := qword(sx(byte src))
     rtl MOVZB_Q{src,dst} = dst := qword(zx(byte src))
     rtl MOVZL_Q{src,dst} = dst := qword(zx(long src))
 
     (* semantics of integer arithmetic;
      * all instructions sets the condition code 
      *)
     fun binop typ oper {dst,src} = dst := typ(oper(dst,src))
     fun arith typ oper {dst,src} = dst := typ(oper(dst,src)) 
                                 || $eflags[0] := ??? (* XXX *)
     fun unary typ oper {opnd} = opnd := typ(oper opnd)

     fun inc x = x + 1
     fun dec x = x - 1

     (* I'm too lazy to specify the semantics of these for now *)
     rtl adc sbb bts btc btr rol ror xchg xadd cmpxchg rdtsc rdtscp
          : #n bits * #n bits -> #n bits

     rtl [ADD,SU_B,AND,OR,XOR]^^B = map (arith byte) [(+),(-),andb,orb,xorb]
     rtl [ADD,SU_B,AND,OR,XOR]^^W = map (arith word) [(+),(-),andb,orb,xorb]
     rtl [ADD,SU_B,AND,OR,XOR]^^L = map (arith long) [(+),(-),andb,orb,xorb]
     rtl [ADD,SU_B,AND,OR,XOR]^^Q = map (arith qword) [(+),(-),andb,orb,xorb]
     rtl [SHR,SH_L,SAR]^^B = map (binop byte) [(>>),(<<),(~>>)]
     rtl [SHR,SH_L,SAR]^^W = map (binop word) [(>>),(<<),(~>>)]
     rtl [SHR,SH_L,SAR]^^L = map (binop long) [(>>),(<<),(~>>)]
     rtl [SHR,SH_L,SAR]^^Q = map (binop qword) [(>>),(<<),(~>>)]
     rtl [NEG,NOT,INC,DEC]^^B = map (unary byte) [(~),notb,inc,dec]
     rtl [NEG,NOT,INC,DEC]^^W = map (unary word) [(~),notb,inc,dec]
     rtl [NEG,NOT,INC,DEC]^^L = map (unary long) [(~),notb,inc,dec]
     rtl [NEG,NOT,INC,DEC]^^Q = map (unary qword) [(~),notb,inc,dec]

     
     rtl [ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^B = 
          map (arith byte) [adc,sbb,bts,btc,btr,rol,ror,xchg]
     rtl [ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^W = 
          map (arith word) [adc,sbb,bts,btc,btr,rol,ror,xchg]
     rtl [ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^L = 
          map (arith long) [adc,sbb,bts,btc,btr,rol,ror,xchg]
     rtl [ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^Q = 
          map (arith qword) [adc,sbb,bts,btc,btr,rol,ror,xchg]

     fun lockarith typ oper {src,dst}= 
             dst := typ(oper(dst,src)) 
          || Kill $eflags[0] (* XXX *)
     fun lockunary typ oper {opnd} = 
             opnd := typ(oper(opnd)) 
          || Kill $eflags[0] (* XXX *)

     rtl LOCK_^^[ADD,SU_B,AND,OR,XOR,XADD]^^B = 
          map (lockarith byte) [(+),(-),andb,orb,xorb,xadd]
     rtl LOCK_^^[ADD,SU_B,AND,OR,XOR,XADD]^^W = 
          map (lockarith word) [(+),(-),andb,orb,xorb,xadd]
     rtl LOCK_^^[ADD,SU_B,AND,OR,XOR,XADD]^^L = 
          map (lockarith long) [(+),(-),andb,orb,xorb,xadd]
     rtl LOCK_^^[ADD,SU_B,AND,OR,XOR,XADD]^^Q = 
          map (lockarith qword) [(+),(-),andb,orb,xorb,xadd]
     rtl LOCK_^^[ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^B = 
          map (lockarith byte) [adc,sbb,bts,btc,btr,rol,ror,xchg]
     rtl LOCK_^^[ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^W = 
          map (lockarith word) [adc,sbb,bts,btc,btr,rol,ror,xchg]
     rtl LOCK_^^[ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^L = 
          map (lockarith long) [adc,sbb,bts,btc,btr,rol,ror,xchg]
     rtl LOCK_^^[ADC,SB_B,BTS,BTC,BTR,RO_L,ROR,XCHG]^^Q = 
          map (lockarith qword) [adc,sbb,bts,btc,btr,rol,ror,xchg]
     rtl LOCK_^^[DEC,INC,NEG,NOT]^^L = 
          map (lockunary long) [dec,inc,(~),notb]
     rtl LOCK_^^[DEC,INC,NEG,NOT]^^Q = 
          map (lockunary qword) [dec,inc,(~),notb]
     rtl LOCK_^^[CMPXCHG]^^B = map (lockarith byte) [cmpxchg]
     rtl LOCK_^^[CMPXCHG]^^W = map (lockarith word) [cmpxchg]
     rtl LOCK_^^[CMPXCHG]^^L = map (lockarith long) [cmpxchg]
     rtl LOCK_^^[CMPXCHG]^^Q = map (lockarith qword) [cmpxchg]

     (* Multiplication/division *)
     rtl upperMultiply : #n bits * #n bits -> #n bits
     rtl MULL1{src}  = eax        := muls(eax, src) ||
                       edx        := upperMultiply(eax, src) ||
                       $eflags[0] := ???
     rtl IDIVL1{src} = eax := divs(eax, src) ||
                       edx := rems(eax, src) ||
                       $eflags[0] := ???
     rtl DIVL1{src}  = edx := divu(eax, src) ||
                       edx := remu(eax, src) ||
                       $eflags[0] := ???

     (* test[b,w,l] *)
     rtl TEST_B {lsrc,rsrc} = $eflags[0] := setFlag(andb(byte lsrc, rsrc))
     rtl TEST_W {lsrc,rsrc} = $eflags[0] := setFlag(andb(word lsrc, rsrc))
     rtl TEST_L {lsrc,rsrc} = $eflags[0] := setFlag(andb(long lsrc, rsrc))
     rtl TEST_Q {lsrc,rsrc} = $eflags[0] := setFlag(andb(qword lsrc, rsrc))

     (* setcc *)
     fun set cc {opnd} = opnd := byte(cond(cc, 0xff, 0x0))
     rtl SET^^   [EQ,NE,LT,LE,GT,GE,B,BE,A,AE,C,NC,P,NP,O,NO] = 
         map set [E ,NE,L, LE,G ,GE,B,BE,A,AE,C,NC,P,NP,O,NO] 

     (* conditional move *)
     fun cmov cc {src,dst} = if cc then $r[dst] := long src else ()
     rtl CMOV^^   [EQ,NE,LT,LE,GT,GE,B,BE,A,AE,C,NC,P,NP,O,NO] = 
         map cmov [E ,NE,L, LE,G ,GE,B,BE,A,AE,C,NC,P,NP,O,NO] 

     (* push and pops *)
     rtl PUSH_Q {operand} = $m[rsp - 8] := qword(operand) || rsp := rsp - 8
     rtl PUSH_L {operand} = $m[esp - 4] := long(operand) || esp := esp - 4
     rtl PUSH_W {operand} = $m[esp - 2] := word(operand) || esp := esp - 2
     rtl PUSH_B {operand} = $m[esp - 1] := byte(operand) || esp := esp - 1
     rtl POP  {operand} = operand := long($m[esp]) || esp := esp + 4
    
     (* semantics of branches and jumps *)
     rtl JMP{operand} = Jmp(long operand)
     fun jcc cc {opnd} = if cc then Jmp(long opnd) else ()
     rtl J^^     [EQ,NE,LT,LE,GT,GE,B,BE,A,AE,C,NC,P,NP,O,NO] = 
         map jcc [E ,NE,L, LE,G ,GE,B,BE,A,AE,C,NC,P,NP,O,NO] 
     rtl CAL_L{opnd,defs,uses} =
         Call(long opnd) ||
         Kill $cellset[defs] || 
         Use $cellset[uses] 
     rtl CALL_Q{opnd,defs,uses} =
         Call(qword opnd) ||
         Kill $cellset[defs] || 
         Use $cellset[uses] 

  end (* RT_L *)

  (*------------------------------------------------------------------------
   * Machine Instruction encoding on the x86
   * Because of variable width instructions.
   * We decompose each byte field into a seperate format first, then combine
   * then to form the real instructions
   *------------------------------------------------------------------------*)
  instruction formats 8 bits
    rex{_:4 = 0b0100, w:1, r:1, x:1, b:1}
  | modrm{mod:2, reg:3, rm:3} 
  | reg{opc:5, reg:3}
  | sib{ss:2, index:3, base:3}  
  | immed8{imm:8}
  
  instruction formats 32 bits
    immed32{imm:32}

(* 64-bit instructions are not supported, so we have to build 64-bit
 * immediates from pieces.
 *)
  instruction formats
    immed64{imm:64} = let
      val hi = Word32.fromLarge(Word64.toLarge(Word64.>>(imm, 0w32)))
      val lo = Word32.fromLarge(Word64.toLarge imm)
      in
	immed32{imm=lo}; immed32{imm=hi}
      end

  (*
   * Variable format instructions
   *)
  instruction formats 
    immedOpnd{opnd} = (case opnd
      of I.Immed i32 => i32
       | I.Immed i64 => i64
       | I.ImmedLabel le => lexp le
       | I.LabelEA le => lexp le
       | _ => error "immedOpnd"
      )
  | extension{opc, opnd} = (case opnd   (* generate an extension *)
     of I.Direct (_, r) => modrm{mod=3, reg=opc, rm=r}
      | I.FDirect _ => raise Fail "todo"
      | I.Displace{base, disp, ...} => let
        val immed = immedOpnd{opnd=disp}
        in  () (* XXX *)
        end
      | I.Indexed{base=NONE, index, scale, disp, ...} => ()
      | I.Indexed{base=SOME b, index, scale, disp, ...} => ()
      | _ => error "immedExt"
      )

   instruction formats 16 bits
     encodeST{prefix:8, opc:5, st: $FP 3}

   instruction formats 
     encodeReg{prefix:8, reg: $GP 3, opnd} =
      (emit prefix; immedExt{opc=reg, opnd=opnd})
   | arith{opc1,opc2,src,dst} = (case (src, dst)
     of (I.ImmedLabel le, dst) => arith{opc1,opc2,src=I.Immed(lexp le),dst} 
      | (I.LabelEA le, dst) => arith{opc1,opc2,src=I.Immed(lexp le),dst}
      | (I.Immed i,dst) => ()
      | (I.Immed64 i,dst) => ()
      | (src, I.Direct (_,r)) => encodeReg{prefix=opc1+op3,reg,opnd=src}
      | (I.Direct (_,r),dst) => encodeReg{prefix=opc1+0w1,reg,opnd=dst}
      | _ => error "arith"
      )

  structure Assembly =
    struct
      fun emitInt32 i = let
          val s = Int32.toString i
          val s = if i >= 0 then s else "-"^String.substring(s,1,size s-1)
          in
	     emit s 
	  end
      fun emitInt64 i = let
          val s = Int64.toString i
          val s = if (i >= 0) then s else "-"^String.substring(s,1,size s-1)
          in
	      emit s
          end

      val {low=SToffset, ...} = C.cellRange CellsBasis.FP
		
      fun emitScale 0 = emit "1"
        | emitScale 1 = emit "2"
        | emitScale 2 = emit "4"
        | emitScale 3 = emit "8"
        | emitScale _ = error "emitScale"

      and eImmed(I.Immed i) = emitInt32 i
	| eImmed(I.Immed64 i) = emitInt64 i
        | eImmed(I.ImmedLabel lexp) = emit_labexp lexp
        | eImmed _ = error "eImmed"

      and emit_operand opn = (case opn 
	  of I.Immed i => (emit "$"; emitInt32 i)
	   | I.Immed64 i => (emit "$"; emitInt64 i)
           | I.ImmedLabel lexp => (emit "$"; emit_labexp lexp)
           | I.LabelEA le => emit_labexp le
           | I.Relative _ => error "emit_operand"
           | I.Direct (ty, r) => emit(CellsBasis.toStringWithSize(r,ty))
           | I.FDirect f => emit(CellsBasis.toString f)
           | I.Displace{base,disp,mem,...} => 
               (emit_disp disp; emit "("; emitCell base; emit ")"; 
                emit_region mem)
           | I.Indexed{base,index,scale,disp,mem,...} =>
              (emit_disp disp; emit "("; 
               case base of
                 NONE => ()
               | SOME base => emitCell base;
               comma();
               emitCell index; comma(); 
               emitScale scale; emit ")"; emit_region mem)
	  (* end case *))

       and emit_operand8(I.Direct (_, r)) = 
	   emit(CellsBasis.toStringWithSize(r,8))
         | emit_operand8 opn = emit_operand opn

      and emit_cell (r, sz) = emit (CellsBasis.toStringWithSize(r,sz))

      and emit_disp(I.Immed 0) = ()
        | emit_disp(I.Immed i) = emitInt32 i
	| emit_disp(I.Immed64 0) = ()
	| emit_disp(I.Immed64 i) = emitInt64 i
        | emit_disp(I.ImmedLabel lexp) = emit_labexp lexp
        | emit_disp _ = error "emit_disp"

     (* The gas assembler does not like the "$" prefix for immediate
      * labels in certain instructions. 
      *)
      fun stupidGas(I.ImmedLabel lexp) = emit_labexp lexp
        | stupidGas opnd = (emit "*"; emit_operand opnd)

     (* Display the floating point binary opcode *)
      fun isMemOpnd(I.FDirect f) = true
        | isMemOpnd(I.LabelEA _) = true
        | isMemOpnd(I.Displace _) = true
        | isMemOpnd(I.Indexed _) = true
        | isMemOpnd _ = false
      fun chop fbinOp =
          let val n = size fbinOp
          in  case Char.toLower(String.sub(fbinOp,n-1)) of
                (#"s" | #"l") => String.substring(fbinOp,0,n-1)
              | _ => fbinOp
          end

      val emit_dst = emit_operand
      val emit_src = emit_operand
      val emit_opnd = emit_operand
      val emit_opnd8 = emit_operand8
      val emit_rsrc = emit_operand
      val emit_lsrc = emit_operand
      val emit_addr = emit_operand
      val emit_src1 = emit_operand
      val emit_ea = emit_operand
      val emit_count = emit_operand
  end (* Assembly *)


  (*------------------------------------------------------------------------
   *
   * Reservation tables and pipeline definitions for scheduling.
   * Faked for now as I don't have to time to look up the definitions
   * from the Intel doc.
   *
   *------------------------------------------------------------------------*)

   (* Function units *)
   resource issue and mem and alu and falu and fmul and fdiv and branch

   (* Different implementations of cpus *)
   cpu default 2 [2 issue, 2 mem, 1 alu, 1 falu, 1 fmul] (* 2 issue machine *)

   (* Definitions of various reservation tables *) 
   pipeline NOP _    = [issue] 
    and     ARITH _  = [issue^^alu]
    and     LOAD _   = [issue^^mem]
    and     STORE _  = [issue^^mem,mem,mem] 
    and     BRANCH _ = [issue^^branch]

  (*------------------------------------------------------------------------
   *
   * Compiler representation of the instruction set.
   *
   *------------------------------------------------------------------------*)
  instruction 
      NOP
	asm: ``nop''
	rtl: ``NOP''

    | JMP of operand * Label.label list
	asm: ``jmp\t<stupidGas operand>''
	rtl: ``JMP''

    | JCC of {cond:cond, opnd:operand}
	asm: ``j<cond>\t<stupidGas opnd>''
	rtl: ``J<cond>''

    | CAL_L of {opnd: operand, defs: $cellset, uses: $cellset,
               return: $cellset, cutsTo: Label.label list, mem: Region.region,
 	       pops:Int32.int}
	asm: ``call\t<stupidGas opnd><mem><
          	emit_defs(defs)><
          	emit_uses(uses)><
          	emit_cellset("return",return)><
                emit_cutsTo cutsTo>''
	rtl: ``CAL_L''

    | CALL_Q of {opnd: operand, defs: $cellset, uses: $cellset,
                return: $cellset, cutsTo: Label.label list, mem: Region.region,
 	        pops:Int32.int}
	asm: ``call\t<stupidGas opnd><mem><
          	emit_defs(defs)><
          	emit_uses(uses)><
          	emit_cellset("return",return)><
                emit_cutsTo cutsTo>''
	rtl: ``CALL_Q''

    | ENTER of {src1:operand, src2:operand} 
	asm: ``enter\t<emit_operand src1>, <emit_operand src2>''

    | LEAVE
	asm: ``leave''

    | RET of operand option
	asm: ``ret<case option of NONE => () 
                                | SOME e => (emit "\t"; emit_operand e)>''

    | MOVE of {mvOp:move, src:operand, dst:operand}
	asm: ``<mvOp>\t<src>, <dst>''
	rtl: ``<mvOp>'' 

    | LEA_L of {r32: $GP, addr: operand}
	asm: ``leal\t<addr>, <emit_cell (r32, 32)>''
	rtl: ``LEA_L'' 

    | LEA_Q of {r64: $GP, addr: operand}
	asm: ``leaq\t<addr>, <emit_cell (r64, 64)>''
	rtl: ``LEA_Q'' 

    | CMP_Q of {lsrc: operand, rsrc: operand}
	asm: ``cmpq\t<rsrc>, <lsrc>''

    | CMP_L of {lsrc: operand, rsrc: operand}
	asm: ``cmpl\t<rsrc>, <lsrc>''

    | CMP_W of {lsrc: operand, rsrc: operand}
	``cmpb\t<rsrc>, <lsrc>''

    | CMP_B of {lsrc: operand, rsrc: operand}
	``cmpb\t<rsrc>, <lsrc>''

    | TEST_Q of {lsrc: operand, rsrc: operand}
	asm: ``testq\t<rsrc>, <lsrc>''
	rtl: ``TEST_Q''

    | TEST_L of {lsrc: operand, rsrc: operand}
	asm: ``testl\t<rsrc>, <lsrc>''
	rtl: ``TEST_L''

    | TEST_W of {lsrc: operand, rsrc: operand}
	asm: ``testw\t<rsrc>, <lsrc>''
	rtl: ``TEST_W''

    | TEST_B of {lsrc: operand, rsrc: operand}
	asm: ``testb\t<rsrc>, <lsrc>''
	rtl: ``TEST_B''

    | BITOP of {bitOp:bitOp, lsrc: operand, rsrc: operand}
	``<bitOp>\t<rsrc>, <lsrc>''

    | BINARY of {binOp:binaryOp, src:operand, dst:operand}
	asm: (case (src,binOp) of
               (I.Direct _,  (* tricky business here for shifts *)
               (I.SAR_Q | I.SHR_Q | I.SHL_Q |
		I.SAR_L | I.SHR_L | I.SHL_L |
                I.SAR_W | I.SHR_W | I.SHL_W |
                I.SAR_B | I.SHR_B | I.SHL_B)) => ``<binOp>\t%cl, <dst>''
             | _ => ``<binOp>\t<src>, <dst>''
             )
	(*rtl: ``<binOp>''*)
    | SHIFT of {shiftOp:shiftOp, src:operand, dst:operand, count:operand}
        asm: (case count of (* must be %ecx if it is a register *)
                I.Direct (ty, ecx) => ``<shiftOp>\t<src>, <dst>''
              | _            => ``<shiftOp>\t<src>, <count>, <dst>''
             )

    | MULTDIV of {multDivOp:multDivOp, src:operand}
	asm: ``<multDivOp>\t<src>''

    | MUL3 of {dst: $GP, src2: Int32.int, src1:operand}
        (* Fermin: constant operand must go first *)
        asm: ``imull\t$<emitInt32 src2>, <src1>, <emit_cell (dst, 32)>''

    | MULQ3 of {dst: $GP, src2: Int32.int, src1:operand}
        (* Fermin: constant operand must go first *)
        asm: ``imulq\t$<emitInt32 src2>, <src1>, <emit_cell (dst, 64)>''

    | UNARY of {unOp:unaryOp, opnd:operand}
	asm: ``<unOp>\t<opnd>''
	rtl: ``<unOp>''

      (* set byte on condition code; note that
       * this only sets the low order byte, so it also
       * uses its operand.
       *)
    | SET of {cond:cond, opnd:operand}
	asm: ``set<cond>\t<emit_opnd8 opnd>''
	rtl: ``SET<cond>''

    | CMOV of {cond:cond, src:operand, dst: $GP} 
	asm: ``cmov<cond>\t<src>, <dst>''
	rtl: ``CMOV<cond>''

    | PUSH_Q of operand
	asm: ``pushq\t<operand>''
	rtl: ``PUSH_Q''

    | PUSH_L of operand
	asm: ``pushl\t<operand>''
	rtl: ``PUSH_L''

    | PUSH_W of operand
	asm: ``pushw\t<operand>''
	rtl: ``PUSH_W''

    | PUSH_B of operand
	asm: ``pushb\t<operand>''
	rtl: ``PUSH_B''

    | PUSHFD     (* push $eflags onto stack *)
	``pushfd''

    | POPFD	(* pop $eflags onto stack *)
	``popfd''

    | POP of operand
	asm: ``popq\t<operand>''
	rtl: ``POP''

    | CD_Q
	``cdq''

    | CLTD
        ``cltd''

    | CQTO
         ``cqto''

    (* the INTO instruction is deprecated in 64-bit mode. *)
    | INTO
	``int $4''

    (* floating-point operations (SSE scalar instructions) *)
    | FMOVE of {fmvOp : fmove_op, dst : operand, src : operand}
      ``<fmvOp>\t <src>, <dst>''

    | FBINOP of {binOp : fbin_op, dst : $FP, src : operand}
      ``<binOp>\t <src>, <dst>''

    | FCOM of {comOp : fcom_op, dst : $FP, src : operand}
      ``<comOp>\t <src>, <dst>''

    | FSQRTS of {dst : operand, src : operand}
      ``sqrtss\t <src>, <dst>''

    | FSQRTD of {dst : operand, src : operand}
      ``sqrtsd\t <src>, <dst>''

   (* misc *)
    | SAHF        (* %flags -> %ah *)
	``sahf''

  (*** concurrency operations ****)

      (* performs a serializing operation on all load-to-memory operations issued prior to
       * the lfence instruction.
       *)
    | LFENCE
        asm: ``lfence''
        rtl:  ``LFENCE''

      (* performs a serializing operation on all load-from-memory and store-to-memory 
       * operations issued prior to the mfence instruction.
       *)
    | MFENCE
        asm: ``mfence''
        rtl: ``MFENCE''

      (* performs a serializing operation on all store-to-memory operations issued prior to
       * the sfence instruction.
       *)
    | SFENCE
        asm: ``sfence''
        rtl:  ``SFENCE''

      (* improves performance of spin-wait loops *) 
    | PAUSE
        asm: ``pause''
        rtl: ``PAUSE''

    | XCHG of {lock:bool, sz:isize, src: operand, dst:operand}
	asm: (if lock then ``lock\n\t'' else ();
              ``xchg'';
              case sz of
                I.I8 => ``b''
              | I.I16 => ``w''
              | I.I32 => ``l''
	      | I.I64 => ``q'';
              ``\t<src>, <dst>''
             )

    | CMPXCHG of {lock:bool, sz:isize, src: operand, dst:operand}
	asm: (if lock then ``lock\n\t'' else ();
              ``cmpxchg'';
              case sz of
                I.I8 => ``b''
              | I.I16 => ``w''
              | I.I32 => ``l''
	      | I.I64 => ``q'';
              ``\t<src>, <dst>''
             )

    | XADD of {lock:bool, sz:isize, src:operand, dst:operand}
       asm: (if lock then ``lock\n\t'' else ();
              ``xadd'';
              case sz of
                I.I8 => ``b''
              | I.I16 => ``w''
              | I.I32 => ``l''
	      | I.I64 => ``q'';
              ``\t<src>, <dst>''
             )

    | RDTSC
        asm: ``rdtsc''
    | RDTSCP
        asm: ``rdtscp''

    | LAHF	  (* %ah -> %flags *)
	``lahf''

    | SOURCE of {}
        asm: ``source''
        mc:  ()

    | SINK of {}
        asm: ``sink''
        mc:  ()

    | PHI of {}
        asm: ``phi''
        mc:  ()
 
  end

