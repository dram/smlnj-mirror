val it = () : unit
val it = () : unit
val check' = fn : (unit -> bool) -> string
val checkres1 = fn : ('a -> ''b) -> ('a * ''b) list -> string
val checkres2 = fn : ('a -> 'b -> ''c) -> ('a * 'b * ''c) list -> string
val f1 = fn : 'a list * 'b list -> int
val f1c = fn : 'a list -> 'b list -> int
val test1a = "OK" : string
val test1b = "OK" : string
val test1c = "OK" : string
val test2a = "OK" : string
val test2b = "OK" : string
val test2c = "OK" : string
datatype 'a t = Uniq of 'a
val fc1 = fn : string t -> string
val test5 = "OK" : string
val berry = fn : bool * bool * bool -> int
val testberry = "OK" : string
datatype t = A | B | C of int list
val fcon = fn : t * t * t -> int
val test6a = "OK" : string
val test6b = "OK" : string
val test6c = "OK" : string
val test6d = "OK" : string
val fi = fn : int -> int
val test10a = "OK" : string
val test10b = "OK" : string
val test10c = "OK" : string
val test10d = "OK" : string
val fs = fn : string -> int
val test11a = "OK" : string
val test11b = "OK" : string
val test11c = "OK" : string
val fc = fn : char -> int
val test12a = "OK" : string
val test12b = "OK" : string
val test12c = "OK" : string
val test12d = "OK" : string
val test12e = "OK" : string
val fw = fn : word -> int
val test13a = "OK" : string
val test13b = "OK" : string
val test13c = "OK" : string
val test13d = "OK" : string
val funit1 = fn : unit -> int
val funit2 = fn : unit -> int
val test20 = "OK" : string
val test21 = "OK" : string
val berryvec = fn : bool vector -> int
val testberryvec = "OK" : string
val fref1 = fn : unit ref -> int
val test30 = "OK" : string
val fref2 = fn : int list ref -> int
val test31 = "OK" : string
val dynExcon = A(-) : exn
exception A
exception C
exception D
exception B = A
val fexc1 = fn : exn -> int
val test40a = "OK" : string
val test40b = "OK" : string
val test40c = "OK" : string
val test40d = "OK" : string
val test40e = "OK" : string
exception I of int
exception R of real
exception Z = I
val enclose42 = fn : unit -> string list
val test42 = ["OK","OK","OK","OK","OK"] : string list
val fbind = fn : 'a list -> 'a
val test50a = "OK" : string
val test50b = "OK" : string
val test50c = "OK" : string
val esc = fn : string -> int
val test60a = "OK" : string
val irr1 = fn : unit * int -> int
val irr2 = fn : 'a vector * int -> int
val irr3 = fn : 'a * int -> int
val test70 = true : bool

