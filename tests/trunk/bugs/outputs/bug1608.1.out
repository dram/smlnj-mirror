val it = () : unit
signature CELLS_BASIS =
  sig
    type cellkindInfo
    type cellkindDesc
    datatype cellkind
      = CC | CTRL | FP | GP | MEM | MISC_KIND of cellkindInfo ref
    datatype cell = CELL of {col:cellColor ref, desc:cellkindDesc, id:int}
    datatype cellColor = ALIASED of cell | MACHINE of int | PSEUDO | SPILLED
    structure HashTable :
      sig
        structure Key : <sig>
        type 'a hash_table
        val mkTable : int * exn -> 'a hash_table
        val clear : 'a hash_table -> unit
        val insert : 'a hash_table -> Key.hash_key * 'a -> unit
        val inDomain : 'a hash_table -> Key.hash_key -> bool
        val lookup : 'a hash_table -> Key.hash_key -> 'a
        val find : 'a hash_table -> Key.hash_key -> 'a option
        val remove : 'a hash_table -> Key.hash_key -> 'a
        val numItems : 'a hash_table -> int
        val listItems : 'a hash_table -> 'a list
        val listItemsi : 'a hash_table -> (Key.hash_key * 'a) list
        val app : ('a -> unit) -> 'a hash_table -> unit
        val appi : (Key.hash_key * 'a -> unit) -> 'a hash_table -> unit
        val map : ('a -> 'b) -> 'a hash_table -> 'b hash_table
        val mapi : (Key.hash_key * 'a -> 'b) -> 'a hash_table -> 'b hash_table
        val fold : ('a * 'b -> 'b) -> 'b -> 'a hash_table -> 'b
        val foldi : (Key.hash_key * 'a * 'b -> 'b)
                    -> 'b -> 'a hash_table -> 'b
        val modify : ('a -> 'a) -> 'a hash_table -> unit
        val modifyi : (Key.hash_key * 'a -> 'a) -> 'a hash_table -> unit
        val filter : ('a -> bool) -> 'a hash_table -> unit
        val filteri : (Key.hash_key * 'a -> bool) -> 'a hash_table -> unit
        val copy : 'a hash_table -> 'a hash_table
        val bucketSizes : 'a hash_table -> int list
      end
    structure ColorTable :
      sig
        structure Key : <sig>
        type 'a hash_table
        val mkTable : int * exn -> 'a hash_table
        val clear : 'a hash_table -> unit
        val insert : 'a hash_table -> Key.hash_key * 'a -> unit
        val inDomain : 'a hash_table -> Key.hash_key -> bool
        val lookup : 'a hash_table -> Key.hash_key -> 'a
        val find : 'a hash_table -> Key.hash_key -> 'a option
        val remove : 'a hash_table -> Key.hash_key -> 'a
        val numItems : 'a hash_table -> int
        val listItems : 'a hash_table -> 'a list
        val listItemsi : 'a hash_table -> (Key.hash_key * 'a) list
        val app : ('a -> unit) -> 'a hash_table -> unit
        val appi : (Key.hash_key * 'a -> unit) -> 'a hash_table -> unit
        val map : ('a -> 'b) -> 'a hash_table -> 'b hash_table
        val mapi : (Key.hash_key * 'a -> 'b) -> 'a hash_table -> 'b hash_table
        val fold : ('a * 'b -> 'b) -> 'b -> 'a hash_table -> 'b
        val foldi : (Key.hash_key * 'a * 'b -> 'b)
                    -> 'b -> 'a hash_table -> 'b
        val modify : ('a -> 'a) -> 'a hash_table -> unit
        val modifyi : (Key.hash_key * 'a -> 'a) -> 'a hash_table -> unit
        val filter : ('a -> bool) -> 'a hash_table -> unit
        val filteri : (Key.hash_key * 'a -> bool) -> 'a hash_table -> unit
        val copy : 'a hash_table -> 'a hash_table
        val bucketSizes : 'a hash_table -> int list
      end
  end
structure CellsInternal :
  sig
    datatype cellkindInfo = INFO of {name:string, nickname:string}
    datatype cellkind
      = CC | CTRL | FP | GP | MEM | MISC_KIND of cellkindInfo ref
    datatype cellkindDesc
      = DESC of {counter:int ref, defaultValues:(int * int) list, high:int,
                 kind:cellkind, low:int, physicalRegs:cell array ref,
                 toString:int -> string, toStringWithSize:int * int -> string,
                 zeroReg:int option}
    datatype cell = CELL of {col:cellColor ref, desc:cellkindDesc, id:int}
    datatype cellColor = ALIASED of cell | MACHINE of int | PSEUDO | SPILLED
  end
structure CellsBasis : CELLS_BASIS
signature CELLS_COMMON =
  sig
    type cellkindInfo = cellkindInfo
    type cellkindDesc = cellkindDesc
    datatype cellkind = datatype cellkind
    datatype cell = datatype cell
    datatype cellColor = ALIASED of cell | MACHINE of int | PSEUDO | SPILLED
    structure HashTable :
      sig
        structure Key : <sig>
        type 'a hash_table
        val mkTable : int * exn -> 'a hash_table
        val clear : 'a hash_table -> unit
        val insert : 'a hash_table -> Key.hash_key * 'a -> unit
        val inDomain : 'a hash_table -> Key.hash_key -> bool
        val lookup : 'a hash_table -> Key.hash_key -> 'a
        val find : 'a hash_table -> Key.hash_key -> 'a option
        val remove : 'a hash_table -> Key.hash_key -> 'a
        val numItems : 'a hash_table -> int
        val listItems : 'a hash_table -> 'a list
        val listItemsi : 'a hash_table -> (Key.hash_key * 'a) list
        val app : ('a -> unit) -> 'a hash_table -> unit
        val appi : (Key.hash_key * 'a -> unit) -> 'a hash_table -> unit
        val map : ('a -> 'b) -> 'a hash_table -> 'b hash_table
        val mapi : (Key.hash_key * 'a -> 'b) -> 'a hash_table -> 'b hash_table
        val fold : ('a * 'b -> 'b) -> 'b -> 'a hash_table -> 'b
        val foldi : (Key.hash_key * 'a * 'b -> 'b)
                    -> 'b -> 'a hash_table -> 'b
        val modify : ('a -> 'a) -> 'a hash_table -> unit
        val modifyi : (Key.hash_key * 'a -> 'a) -> 'a hash_table -> unit
        val filter : ('a -> bool) -> 'a hash_table -> unit
        val filteri : (Key.hash_key * 'a -> bool) -> 'a hash_table -> unit
        val copy : 'a hash_table -> 'a hash_table
        val bucketSizes : 'a hash_table -> int list
      end
    structure ColorTable :
      sig
        structure Key : <sig>
        type 'a hash_table
        val mkTable : int * exn -> 'a hash_table
        val clear : 'a hash_table -> unit
        val insert : 'a hash_table -> Key.hash_key * 'a -> unit
        val inDomain : 'a hash_table -> Key.hash_key -> bool
        val lookup : 'a hash_table -> Key.hash_key -> 'a
        val find : 'a hash_table -> Key.hash_key -> 'a option
        val remove : 'a hash_table -> Key.hash_key -> 'a
        val numItems : 'a hash_table -> int
        val listItems : 'a hash_table -> 'a list
        val listItemsi : 'a hash_table -> (Key.hash_key * 'a) list
        val app : ('a -> unit) -> 'a hash_table -> unit
        val appi : (Key.hash_key * 'a -> unit) -> 'a hash_table -> unit
        val map : ('a -> 'b) -> 'a hash_table -> 'b hash_table
        val mapi : (Key.hash_key * 'a -> 'b) -> 'a hash_table -> 'b hash_table
        val fold : ('a * 'b -> 'b) -> 'b -> 'a hash_table -> 'b
        val foldi : (Key.hash_key * 'a * 'b -> 'b)
                    -> 'b -> 'a hash_table -> 'b
        val modify : ('a -> 'a) -> 'a hash_table -> unit
        val modifyi : (Key.hash_key * 'a -> 'a) -> 'a hash_table -> unit
        val filter : ('a -> bool) -> 'a hash_table -> unit
        val filteri : (Key.hash_key * 'a -> bool) -> 'a hash_table -> unit
        val copy : 'a hash_table -> 'a hash_table
        val bucketSizes : 'a hash_table -> int list
      end
  end

