val it = () : unit
opening Posix.Process
  type signal = ?.POSIX_Signal.signal
  datatype pid = ...
  val wordToPid : Word32.word -> pid
  val pidToWord : pid -> Word32.word
  val fork : unit -> pid option
  val exec : string * string list -> 'a
  val exece : string * string list * string list -> 'a
  val execp : string * string list -> 'a
  datatype waitpid_arg
    = W_ANY_CHILD | W_CHILD of pid | W_GROUP of pid | W_SAME_GROUP
  datatype exit_status
    = W_EXITED
    | W_EXITSTATUS of Word8.word
    | W_SIGNALED of signal
    | W_STOPPED of signal
  structure W :
    sig
      datatype flags = ...
      val toWord : flags -> Word32.word
      val fromWord : Word32.word -> flags
      val flags : flags list -> flags
      val allSet : flags * flags -> bool
      val anySet : flags * flags -> bool
      val untraced : flags
    end
  val wait : unit -> pid * exit_status
  val waitpid : waitpid_arg * W.flags list -> pid * exit_status
  val waitpid_nh : waitpid_arg * W.flags list -> (pid * exit_status) option
  val exit : Word8.word -> 'a
  datatype killpid_arg = K_GROUP of pid | K_PROC of pid | K_SAME_GROUP
  val kill : killpid_arg * signal -> unit
  val alarm : Time.time -> Time.time
  val pause : unit -> unit
  val sleep : Time.time -> Time.time
